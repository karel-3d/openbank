// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: github.com/openbank/openbank/v1/consent/all.proto

package consent

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_UnknownStatus   Status = 0
	Status_INITIATED       Status = 1
	Status_ACCEPTED        Status = 2
	Status_REJECTED        Status = 3
	Status_REVOKED         Status = 4
	Status_RECEIVED        Status = 5
	Status_VALID           Status = 6
	Status_REVOKEDBYPSU    Status = 7
	Status_EXPIRED         Status = 8
	Status_TERMINATEDBYTPP Status = 9
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UnknownStatus",
		1: "INITIATED",
		2: "ACCEPTED",
		3: "REJECTED",
		4: "REVOKED",
		5: "RECEIVED",
		6: "VALID",
		7: "REVOKEDBYPSU",
		8: "EXPIRED",
		9: "TERMINATEDBYTPP",
	}
	Status_value = map[string]int32{
		"UnknownStatus":   0,
		"INITIATED":       1,
		"ACCEPTED":        2,
		"REJECTED":        3,
		"REVOKED":         4,
		"RECEIVED":        5,
		"VALID":           6,
		"REVOKEDBYPSU":    7,
		"EXPIRED":         8,
		"TERMINATEDBYTPP": 9,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openbank_openbank_v1_consent_all_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_github_com_openbank_openbank_v1_consent_all_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consent_all_proto_rawDescGZIP(), []int{0}
}

// AnswerConsentChallengeRequest is a request mesasge to answer consent challenge request
type AnswerConsentChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID    string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	ConsentID string `protobuf:"bytes,2,opt,name=ConsentID,json=consent_id,proto3" json:"consent_id,omitempty"`
	Answer    string `protobuf:"bytes,3,opt,name=Answer,json=answer,proto3" json:"answer,omitempty"`
}

func (x *AnswerConsentChallengeRequest) Reset() {
	*x = AnswerConsentChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerConsentChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerConsentChallengeRequest) ProtoMessage() {}

func (x *AnswerConsentChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerConsentChallengeRequest.ProtoReflect.Descriptor instead.
func (*AnswerConsentChallengeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consent_all_proto_rawDescGZIP(), []int{0}
}

func (x *AnswerConsentChallengeRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *AnswerConsentChallengeRequest) GetConsentID() string {
	if x != nil {
		return x.ConsentID
	}
	return ""
}

func (x *AnswerConsentChallengeRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

// Consent is a response mesasge
type Consent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsentID string `protobuf:"bytes,1,opt,name=ConsentID,json=consent_id,proto3" json:"consent_id,omitempty"`
	Jwt       string `protobuf:"bytes,2,opt,name=Jwt,json=jwt,proto3" json:"jwt,omitempty"`
	Status    Status `protobuf:"varint,3,opt,name=Status,json=status,proto3,enum=consent.Status" json:"status,omitempty"`
}

func (x *Consent) Reset() {
	*x = Consent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consent) ProtoMessage() {}

func (x *Consent) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consent.ProtoReflect.Descriptor instead.
func (*Consent) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consent_all_proto_rawDescGZIP(), []int{1}
}

func (x *Consent) GetConsentID() string {
	if x != nil {
		return x.ConsentID
	}
	return ""
}

func (x *Consent) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

func (x *Consent) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UnknownStatus
}

// CreateConsentEmailRequest
type CreateConsentEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	For    string `protobuf:"bytes,2,opt,name=For,json=for,proto3" json:"for,omitempty"`
	View   string `protobuf:"bytes,3,opt,name=View,json=view,proto3" json:"view,omitempty"`
	Email  string `protobuf:"bytes,4,opt,name=Email,json=email,proto3" json:"email,omitempty"`
}

func (x *CreateConsentEmailRequest) Reset() {
	*x = CreateConsentEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentEmailRequest) ProtoMessage() {}

func (x *CreateConsentEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentEmailRequest.ProtoReflect.Descriptor instead.
func (*CreateConsentEmailRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consent_all_proto_rawDescGZIP(), []int{2}
}

func (x *CreateConsentEmailRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CreateConsentEmailRequest) GetFor() string {
	if x != nil {
		return x.For
	}
	return ""
}

func (x *CreateConsentEmailRequest) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

func (x *CreateConsentEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// CreateConsentSMSRequest
type CreateConsentSMSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID      string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	For         string `protobuf:"bytes,2,opt,name=For,json=for,proto3" json:"for,omitempty"`
	View        string `protobuf:"bytes,3,opt,name=View,json=view,proto3" json:"view,omitempty"`
	PhoneNumber string `protobuf:"bytes,4,opt,name=PhoneNumber,json=phone_number,proto3" json:"phone_number,omitempty"`
}

func (x *CreateConsentSMSRequest) Reset() {
	*x = CreateConsentSMSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsentSMSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsentSMSRequest) ProtoMessage() {}

func (x *CreateConsentSMSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsentSMSRequest.ProtoReflect.Descriptor instead.
func (*CreateConsentSMSRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consent_all_proto_rawDescGZIP(), []int{3}
}

func (x *CreateConsentSMSRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CreateConsentSMSRequest) GetFor() string {
	if x != nil {
		return x.For
	}
	return ""
}

func (x *CreateConsentSMSRequest) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

func (x *CreateConsentSMSRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

// GetConsentsRequest
type GetConsentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID            string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	NexeStartingIndex string `protobuf:"bytes,2,opt,name=NexeStartingIndex,json=next_starting_index,proto3" json:"next_starting_index,omitempty"`
}

func (x *GetConsentsRequest) Reset() {
	*x = GetConsentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentsRequest) ProtoMessage() {}

func (x *GetConsentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentsRequest.ProtoReflect.Descriptor instead.
func (*GetConsentsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consent_all_proto_rawDescGZIP(), []int{4}
}

func (x *GetConsentsRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *GetConsentsRequest) GetNexeStartingIndex() string {
	if x != nil {
		return x.NexeStartingIndex
	}
	return ""
}

// GetConsentsResponse
type GetConsentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consents []*Consent `protobuf:"bytes,1,rep,name=Consents,json=consents,proto3" json:"consents,omitempty"`
}

func (x *GetConsentsResponse) Reset() {
	*x = GetConsentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsentsResponse) ProtoMessage() {}

func (x *GetConsentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsentsResponse.ProtoReflect.Descriptor instead.
func (*GetConsentsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consent_all_proto_rawDescGZIP(), []int{5}
}

func (x *GetConsentsResponse) GetConsents() []*Consent {
	if x != nil {
		return x.Consents
	}
	return nil
}

// RevokeConsentRequest
type RevokeConsentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID    string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	ConsentID string `protobuf:"bytes,2,opt,name=ConsentID,json=consent_id,proto3" json:"consent_id,omitempty"`
}

func (x *RevokeConsentRequest) Reset() {
	*x = RevokeConsentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeConsentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeConsentRequest) ProtoMessage() {}

func (x *RevokeConsentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeConsentRequest.ProtoReflect.Descriptor instead.
func (*RevokeConsentRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consent_all_proto_rawDescGZIP(), []int{6}
}

func (x *RevokeConsentRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *RevokeConsentRequest) GetConsentID() string {
	if x != nil {
		return x.ConsentID
	}
	return ""
}

var File_github_com_openbank_openbank_v1_consent_all_proto protoreflect.FileDescriptor

var file_github_com_openbank_openbank_v1_consent_all_proto_rawDesc = []byte{
	0x0a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x8f, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x03, 0x4a, 0x77, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa8, 0x01, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x03, 0x46, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x66, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x56,
	0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x05, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x03, 0x46, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x03, 0x66, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x7d, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x11, 0x4e, 0x65, 0x78, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x6e, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x2a, 0xcc, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15,
	0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07,
	0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a,
	0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0d, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14,
	0x0a, 0x0c, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x42, 0x59, 0x50, 0x53, 0x55, 0x10, 0x07,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x45, 0x44, 0x42, 0x59, 0x54, 0x50, 0x50, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02,
	0x18, 0x00, 0x32, 0xd4, 0x0d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf8, 0x02, 0x0a, 0x16, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x9f, 0x02, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0xd9, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x71, 0x65, 0x75, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0x24, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4a, 0x51, 0x0a, 0x03,
	0x32, 0x30, 0x31, 0x12, 0x4a, 0x0a, 0x26, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x1e, 0x1a, 0x1c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x62,
	0x2f, 0x0a, 0x2d, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x23, 0x0a, 0x21, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xc7, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xf6, 0x01,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc0, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4a, 0x4e, 0x0a, 0x03, 0x32, 0x30, 0x31,
	0x12, 0x47, 0x0a, 0x23, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x20, 0x0a, 0x1e, 0x1a, 0x1c, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x62, 0x2f, 0x0a, 0x2d, 0x0a, 0x06, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x23, 0x0a, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x28, 0x00, 0x30, 0x00, 0x12, 0xbb, 0x02, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x4d, 0x53, 0x12,
	0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x22, 0xee, 0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xba, 0x01,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x6e, 0x20, 0x73, 0x6d, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x1a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20,
	0x73, 0x6d, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4a, 0x4c, 0x0a, 0x03, 0x32,
	0x30, 0x31, 0x12, 0x45, 0x0a, 0x21, 0x53, 0x4d, 0x53, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x20, 0x0a, 0x1e, 0x1a, 0x1c, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x62, 0x2f, 0x0a, 0x2d, 0x0a, 0x06, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x23, 0x0a, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x6d, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xff, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xb0, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x83, 0x02,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x5e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x30,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x60, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x60,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x55, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x4e, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2c, 0x0a, 0x2a, 0x1a, 0x28, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x62, 0x2e, 0x0a, 0x2c, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12,
	0x22, 0x0a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb7, 0x02, 0x0a, 0x0d, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xf0, 0x01,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xad, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x13, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x1a, 0x12, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4a, 0x48, 0x0a, 0x03,
	0x32, 0x30, 0x31, 0x12, 0x41, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x72,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x20, 0x0a, 0x1e, 0x1a, 0x1c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x62, 0x2f, 0x0a, 0x2d, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x12, 0x23, 0x0a, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a,
	0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e,
	0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0xf9, 0x06, 0x0a, 0x12, 0x74, 0x6f,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x48, 0x01, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x3b, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01,
	0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0x97, 0x06, 0x0a, 0x03,
	0x32, 0x2e, 0x30, 0x12, 0x4c, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x41,
	0x50, 0x49, 0x12, 0x36, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x43, 0x52, 0x55,
	0x44, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e,
	0x30, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x5f, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x58, 0x0a, 0x56, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62, 0x6f, 0x64,
	0x79, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65,
	0x64, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x4c, 0x0a, 0x03, 0x34, 0x30, 0x31,
	0x12, 0x45, 0x0a, 0x43, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x6f,
	0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x49,
	0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x46, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x3f, 0x0a, 0x3d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x64,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73,
	0x69, 0x64, 0x65, 0x2e, 0x5a, 0x9e, 0x02, 0x0a, 0x9b, 0x02, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x12, 0x90, 0x02, 0x08, 0x03, 0x12, 0x81, 0x01, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x28, 0x04, 0x32, 0x08, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x71, 0x0a, 0x35, 0x0a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x11, 0x56, 0x69, 0x65, 0x77, 0x20, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x38, 0x0a, 0x21, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x13, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openbank_openbank_v1_consent_all_proto_rawDescOnce sync.Once
	file_github_com_openbank_openbank_v1_consent_all_proto_rawDescData = file_github_com_openbank_openbank_v1_consent_all_proto_rawDesc
)

func file_github_com_openbank_openbank_v1_consent_all_proto_rawDescGZIP() []byte {
	file_github_com_openbank_openbank_v1_consent_all_proto_rawDescOnce.Do(func() {
		file_github_com_openbank_openbank_v1_consent_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openbank_openbank_v1_consent_all_proto_rawDescData)
	})
	return file_github_com_openbank_openbank_v1_consent_all_proto_rawDescData
}

var (
	file_github_com_openbank_openbank_v1_consent_all_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 7)
	file_github_com_openbank_openbank_v1_consent_all_proto_goTypes   = []interface{}{
		(Status)(0),                           // 0: consent.Status
		(*AnswerConsentChallengeRequest)(nil), // 1: consent.AnswerConsentChallengeRequest
		(*Consent)(nil),                       // 2: consent.Consent
		(*CreateConsentEmailRequest)(nil),     // 3: consent.CreateConsentEmailRequest
		(*CreateConsentSMSRequest)(nil),       // 4: consent.CreateConsentSMSRequest
		(*GetConsentsRequest)(nil),            // 5: consent.GetConsentsRequest
		(*GetConsentsResponse)(nil),           // 6: consent.GetConsentsResponse
		(*RevokeConsentRequest)(nil),          // 7: consent.RevokeConsentRequest
	}
)

var file_github_com_openbank_openbank_v1_consent_all_proto_depIdxs = []int32{
	0, // 0: consent.Consent.Status:type_name -> consent.Status
	2, // 1: consent.GetConsentsResponse.Consents:type_name -> consent.Consent
	1, // 2: consent.ConsentService.AnswerConsentChallenge:input_type -> consent.AnswerConsentChallengeRequest
	3, // 3: consent.ConsentService.CreateConsentEmail:input_type -> consent.CreateConsentEmailRequest
	4, // 4: consent.ConsentService.CreateConsentSMS:input_type -> consent.CreateConsentSMSRequest
	5, // 5: consent.ConsentService.GetConsents:input_type -> consent.GetConsentsRequest
	7, // 6: consent.ConsentService.RevokeConsent:input_type -> consent.RevokeConsentRequest
	2, // 7: consent.ConsentService.AnswerConsentChallenge:output_type -> consent.Consent
	2, // 8: consent.ConsentService.CreateConsentEmail:output_type -> consent.Consent
	2, // 9: consent.ConsentService.CreateConsentSMS:output_type -> consent.Consent
	6, // 10: consent.ConsentService.GetConsents:output_type -> consent.GetConsentsResponse
	2, // 11: consent.ConsentService.RevokeConsent:output_type -> consent.Consent
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_github_com_openbank_openbank_v1_consent_all_proto_init() }
func file_github_com_openbank_openbank_v1_consent_all_proto_init() {
	if File_github_com_openbank_openbank_v1_consent_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerConsentChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsentSMSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeConsentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openbank_openbank_v1_consent_all_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openbank_openbank_v1_consent_all_proto_goTypes,
		DependencyIndexes: file_github_com_openbank_openbank_v1_consent_all_proto_depIdxs,
		EnumInfos:         file_github_com_openbank_openbank_v1_consent_all_proto_enumTypes,
		MessageInfos:      file_github_com_openbank_openbank_v1_consent_all_proto_msgTypes,
	}.Build()
	File_github_com_openbank_openbank_v1_consent_all_proto = out.File
	file_github_com_openbank_openbank_v1_consent_all_proto_rawDesc = nil
	file_github_com_openbank_openbank_v1_consent_all_proto_goTypes = nil
	file_github_com_openbank_openbank_v1_consent_all_proto_depIdxs = nil
}
