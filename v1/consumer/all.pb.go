// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: github.com/openbank/openbank/v1/consumer/all.proto

package consumer

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateByUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	Email      string `protobuf:"bytes,2,opt,name=Email,json=email,proto3" json:"email,omitempty"`
	ProviderID string `protobuf:"bytes,3,opt,name=ProviderID,json=provider_id,proto3" json:"provider_id,omitempty"`
	Provider   string `protobuf:"bytes,4,opt,name=Provider,json=provider,proto3" json:"provider,omitempty"`
	Username   string `protobuf:"bytes,5,opt,name=Username,json=username,proto3" json:"username,omitempty"`
}

func (x *CreateByUser) Reset() {
	*x = CreateByUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateByUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateByUser) ProtoMessage() {}

func (x *CreateByUser) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateByUser.ProtoReflect.Descriptor instead.
func (*CreateByUser) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{0}
}

func (x *CreateByUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreateByUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateByUser) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

func (x *CreateByUser) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *CreateByUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Consumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              int32                  `protobuf:"varint,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	AppName         string                 `protobuf:"bytes,2,opt,name=AppName,json=app_name,proto3" json:"app_name,omitempty"`
	AppType         string                 `protobuf:"bytes,3,opt,name=AppType,json=app_type,proto3" json:"app_type,omitempty"`
	Description     string                 `protobuf:"bytes,4,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	DeveloperEmail  string                 `protobuf:"bytes,5,opt,name=DeveloperEmail,json=developer_email,proto3" json:"developer_email,omitempty"`
	RedirectURL     string                 `protobuf:"bytes,6,opt,name=RedirectURL,json=redirect_url,proto3" json:"redirect_url,omitempty"`
	CreatedByUserID string                 `protobuf:"bytes,7,opt,name=CreatedByUserID,json=created_by_user_id,proto3" json:"created_by_user_id,omitempty"`
	CreatedByUser   *CreateByUser          `protobuf:"bytes,8,opt,name=CreatedByUser,json=created_by_user,proto3" json:"created_by_user,omitempty"`
	Enabled         bool                   `protobuf:"varint,9,opt,name=Enabled,json=enabled,proto3" json:"enabled,omitempty"`
	Created         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=Created,json=created,proto3" json:"created,omitempty"`
}

func (x *Consumer) Reset() {
	*x = Consumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer) ProtoMessage() {}

func (x *Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer.ProtoReflect.Descriptor instead.
func (*Consumer) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{1}
}

func (x *Consumer) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Consumer) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Consumer) GetAppType() string {
	if x != nil {
		return x.AppType
	}
	return ""
}

func (x *Consumer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Consumer) GetDeveloperEmail() string {
	if x != nil {
		return x.DeveloperEmail
	}
	return ""
}

func (x *Consumer) GetRedirectURL() string {
	if x != nil {
		return x.RedirectURL
	}
	return ""
}

func (x *Consumer) GetCreatedByUserID() string {
	if x != nil {
		return x.CreatedByUserID
	}
	return ""
}

func (x *Consumer) GetCreatedByUser() *CreateByUser {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *Consumer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Consumer) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type EnableOrDisableConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerID string `protobuf:"bytes,1,opt,name=ConsumerID,json=consumer_id,proto3" json:"consumer_id,omitempty"`
	Enable     bool   `protobuf:"varint,2,opt,name=Enable,json=enable,proto3" json:"enable,omitempty"`
}

func (x *EnableOrDisableConsumerRequest) Reset() {
	*x = EnableOrDisableConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableOrDisableConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableOrDisableConsumerRequest) ProtoMessage() {}

func (x *EnableOrDisableConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableOrDisableConsumerRequest.ProtoReflect.Descriptor instead.
func (*EnableOrDisableConsumerRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{2}
}

func (x *EnableOrDisableConsumerRequest) GetConsumerID() string {
	if x != nil {
		return x.ConsumerID
	}
	return ""
}

func (x *EnableOrDisableConsumerRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type EnableOrDisableConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=Enable,json=enable,proto3" json:"enable,omitempty"`
}

func (x *EnableOrDisableConsumerResponse) Reset() {
	*x = EnableOrDisableConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableOrDisableConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableOrDisableConsumerResponse) ProtoMessage() {}

func (x *EnableOrDisableConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableOrDisableConsumerResponse.ProtoReflect.Descriptor instead.
func (*EnableOrDisableConsumerResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{3}
}

func (x *EnableOrDisableConsumerResponse) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallsMade      int32 `protobuf:"varint,1,opt,name=CallsMade,json=calls_made,proto3" json:"calls_made,omitempty"`
	ResetInSeconds int32 `protobuf:"varint,2,opt,name=ResetInSeconds,json=reset_in_seconds,proto3" json:"reset_in_seconds,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{4}
}

func (x *State) GetCallsMade() int32 {
	if x != nil {
		return x.CallsMade
	}
	return 0
}

func (x *State) GetResetInSeconds() int32 {
	if x != nil {
		return x.ResetInSeconds
	}
	return 0
}

type CurrentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerSecond *State `protobuf:"bytes,1,opt,name=PerSecond,json=per_second,proto3" json:"per_second,omitempty"`
	PerHour   *State `protobuf:"bytes,2,opt,name=PerHour,json=per_hour,proto3" json:"per_hour,omitempty"`
	PerDay    *State `protobuf:"bytes,3,opt,name=PerDay,json=per_day,proto3" json:"per_day,omitempty"`
	PerWeek   *State `protobuf:"bytes,4,opt,name=PerWeek,json=per_week,proto3" json:"per_week,omitempty"`
	PerMonth  *State `protobuf:"bytes,5,opt,name=PerMonth,json=per_month,proto3" json:"per_month,omitempty"`
	PerYear   *State `protobuf:"bytes,6,opt,name=PerYear,json=per_year,proto3" json:"per_year,omitempty"`
}

func (x *CurrentState) Reset() {
	*x = CurrentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentState) ProtoMessage() {}

func (x *CurrentState) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentState.ProtoReflect.Descriptor instead.
func (*CurrentState) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{5}
}

func (x *CurrentState) GetPerSecond() *State {
	if x != nil {
		return x.PerSecond
	}
	return nil
}

func (x *CurrentState) GetPerHour() *State {
	if x != nil {
		return x.PerHour
	}
	return nil
}

func (x *CurrentState) GetPerDay() *State {
	if x != nil {
		return x.PerDay
	}
	return nil
}

func (x *CurrentState) GetPerWeek() *State {
	if x != nil {
		return x.PerWeek
	}
	return nil
}

func (x *CurrentState) GetPerMonth() *State {
	if x != nil {
		return x.PerMonth
	}
	return nil
}

func (x *CurrentState) GetPerYear() *State {
	if x != nil {
		return x.PerYear
	}
	return nil
}

type GetConsumerCallLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerID string `protobuf:"bytes,1,opt,name=ConsumerID,json=consumer_id,proto3" json:"consumer_id,omitempty"`
}

func (x *GetConsumerCallLimitsRequest) Reset() {
	*x = GetConsumerCallLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsumerCallLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumerCallLimitsRequest) ProtoMessage() {}

func (x *GetConsumerCallLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumerCallLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetConsumerCallLimitsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{6}
}

func (x *GetConsumerCallLimitsRequest) GetConsumerID() string {
	if x != nil {
		return x.ConsumerID
	}
	return ""
}

type GetConsumerCallLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerSecondCallLimit string        `protobuf:"bytes,1,opt,name=PerSecondCallLimit,json=per_second_call_limit,proto3" json:"per_second_call_limit,omitempty"`
	PerMinuteCallLimit string        `protobuf:"bytes,2,opt,name=PerMinuteCallLimit,json=per_minute_call_limit,proto3" json:"per_minute_call_limit,omitempty"`
	PerHourCallLimit   string        `protobuf:"bytes,3,opt,name=PerHourCallLimit,json=per_hour_call_limit,proto3" json:"per_hour_call_limit,omitempty"`
	PerDayCallLimit    string        `protobuf:"bytes,4,opt,name=PerDayCallLimit,json=per_day_call_limit,proto3" json:"per_day_call_limit,omitempty"`
	PerWeekCallLimit   string        `protobuf:"bytes,5,opt,name=PerWeekCallLimit,json=per_week_call_limit,proto3" json:"per_week_call_limit,omitempty"`
	PerMonthCallLimit  string        `protobuf:"bytes,6,opt,name=PerMonthCallLimit,json=per_month_call_limit,proto3" json:"per_month_call_limit,omitempty"`
	CurrentState       *CurrentState `protobuf:"bytes,7,opt,name=CurrentState,json=current_state,proto3" json:"current_state,omitempty"`
}

func (x *GetConsumerCallLimitsResponse) Reset() {
	*x = GetConsumerCallLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsumerCallLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumerCallLimitsResponse) ProtoMessage() {}

func (x *GetConsumerCallLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumerCallLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetConsumerCallLimitsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{7}
}

func (x *GetConsumerCallLimitsResponse) GetPerSecondCallLimit() string {
	if x != nil {
		return x.PerSecondCallLimit
	}
	return ""
}

func (x *GetConsumerCallLimitsResponse) GetPerMinuteCallLimit() string {
	if x != nil {
		return x.PerMinuteCallLimit
	}
	return ""
}

func (x *GetConsumerCallLimitsResponse) GetPerHourCallLimit() string {
	if x != nil {
		return x.PerHourCallLimit
	}
	return ""
}

func (x *GetConsumerCallLimitsResponse) GetPerDayCallLimit() string {
	if x != nil {
		return x.PerDayCallLimit
	}
	return ""
}

func (x *GetConsumerCallLimitsResponse) GetPerWeekCallLimit() string {
	if x != nil {
		return x.PerWeekCallLimit
	}
	return ""
}

func (x *GetConsumerCallLimitsResponse) GetPerMonthCallLimit() string {
	if x != nil {
		return x.PerMonthCallLimit
	}
	return ""
}

func (x *GetConsumerCallLimitsResponse) GetCurrentState() *CurrentState {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

type GetConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerID string `protobuf:"bytes,1,opt,name=ConsumerID,json=consumer_id,proto3" json:"consumer_id,omitempty"`
}

func (x *GetConsumerRequest) Reset() {
	*x = GetConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumerRequest) ProtoMessage() {}

func (x *GetConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumerRequest.ProtoReflect.Descriptor instead.
func (*GetConsumerRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{8}
}

func (x *GetConsumerRequest) GetConsumerID() string {
	if x != nil {
		return x.ConsumerID
	}
	return ""
}

type GetConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumer *Consumer `protobuf:"bytes,1,opt,name=Consumer,json=consumer,proto3" json:"consumer,omitempty"`
}

func (x *GetConsumerResponse) Reset() {
	*x = GetConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumerResponse) ProtoMessage() {}

func (x *GetConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumerResponse.ProtoReflect.Descriptor instead.
func (*GetConsumerResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{9}
}

func (x *GetConsumerResponse) GetConsumer() *Consumer {
	if x != nil {
		return x.Consumer
	}
	return nil
}

type GetConsumersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumers []*Consumer `protobuf:"bytes,1,rep,name=Consumers,json=consumers,proto3" json:"consumers,omitempty"`
}

func (x *GetConsumersResponse) Reset() {
	*x = GetConsumersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsumersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumersResponse) ProtoMessage() {}

func (x *GetConsumersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumersResponse.ProtoReflect.Descriptor instead.
func (*GetConsumersResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{10}
}

func (x *GetConsumersResponse) GetConsumers() []*Consumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

type GetConsumersForLoggedInUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumers []*Consumer `protobuf:"bytes,1,rep,name=Consumers,json=consumers,proto3" json:"consumers,omitempty"`
}

func (x *GetConsumersForLoggedInUserResponse) Reset() {
	*x = GetConsumersForLoggedInUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsumersForLoggedInUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumersForLoggedInUserResponse) ProtoMessage() {}

func (x *GetConsumersForLoggedInUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumersForLoggedInUserResponse.ProtoReflect.Descriptor instead.
func (*GetConsumersForLoggedInUserResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{11}
}

func (x *GetConsumersForLoggedInUserResponse) GetConsumers() []*Consumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

type SetConsumerCallsLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerID         string `protobuf:"bytes,1,opt,name=ConsumerID,json=consumer_id,proto3" json:"consumer_id,omitempty"`
	PerSecondCallLimit string `protobuf:"bytes,2,opt,name=PerSecondCallLimit,json=per_second_call_limit,proto3" json:"per_second_call_limit,omitempty"`
	PerMinuteCallLimit string `protobuf:"bytes,3,opt,name=PerMinuteCallLimit,json=per_minute_call_limit,proto3" json:"per_minute_call_limit,omitempty"`
	PerHourCallLimit   string `protobuf:"bytes,4,opt,name=PerHourCallLimit,json=per_hour_call_limit,proto3" json:"per_hour_call_limit,omitempty"`
	PerDayCallLimit    string `protobuf:"bytes,5,opt,name=PerDayCallLimit,json=per_day_call_limit,proto3" json:"per_day_call_limit,omitempty"`
	PerWeekCallLimit   string `protobuf:"bytes,6,opt,name=PerWeekCallLimit,json=per_week_call_limit,proto3" json:"per_week_call_limit,omitempty"`
	PerMonthCallLimit  string `protobuf:"bytes,7,opt,name=PerMonthCallLimit,json=per_month_call_limit,proto3" json:"per_month_call_limit,omitempty"`
}

func (x *SetConsumerCallsLimitRequest) Reset() {
	*x = SetConsumerCallsLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConsumerCallsLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConsumerCallsLimitRequest) ProtoMessage() {}

func (x *SetConsumerCallsLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConsumerCallsLimitRequest.ProtoReflect.Descriptor instead.
func (*SetConsumerCallsLimitRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{12}
}

func (x *SetConsumerCallsLimitRequest) GetConsumerID() string {
	if x != nil {
		return x.ConsumerID
	}
	return ""
}

func (x *SetConsumerCallsLimitRequest) GetPerSecondCallLimit() string {
	if x != nil {
		return x.PerSecondCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitRequest) GetPerMinuteCallLimit() string {
	if x != nil {
		return x.PerMinuteCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitRequest) GetPerHourCallLimit() string {
	if x != nil {
		return x.PerHourCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitRequest) GetPerDayCallLimit() string {
	if x != nil {
		return x.PerDayCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitRequest) GetPerWeekCallLimit() string {
	if x != nil {
		return x.PerWeekCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitRequest) GetPerMonthCallLimit() string {
	if x != nil {
		return x.PerMonthCallLimit
	}
	return ""
}

type SetConsumerCallsLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerSecondCallLimit string `protobuf:"bytes,1,opt,name=PerSecondCallLimit,json=per_second_call_limit,proto3" json:"per_second_call_limit,omitempty"`
	PerMinuteCallLimit string `protobuf:"bytes,2,opt,name=PerMinuteCallLimit,json=per_minute_call_limit,proto3" json:"per_minute_call_limit,omitempty"`
	PerHourCallLimit   string `protobuf:"bytes,3,opt,name=PerHourCallLimit,json=per_hour_call_limit,proto3" json:"per_hour_call_limit,omitempty"`
	PerDayCallLimit    string `protobuf:"bytes,4,opt,name=PerDayCallLimit,json=per_day_call_limit,proto3" json:"per_day_call_limit,omitempty"`
	PerWeekCallLimit   string `protobuf:"bytes,5,opt,name=PerWeekCallLimit,json=per_week_call_limit,proto3" json:"per_week_call_limit,omitempty"`
	PerMonthCallLimit  string `protobuf:"bytes,6,opt,name=PerMonthCallLimit,json=per_month_call_limit,proto3" json:"per_month_call_limit,omitempty"`
}

func (x *SetConsumerCallsLimitResponse) Reset() {
	*x = SetConsumerCallsLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConsumerCallsLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConsumerCallsLimitResponse) ProtoMessage() {}

func (x *SetConsumerCallsLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConsumerCallsLimitResponse.ProtoReflect.Descriptor instead.
func (*SetConsumerCallsLimitResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{13}
}

func (x *SetConsumerCallsLimitResponse) GetPerSecondCallLimit() string {
	if x != nil {
		return x.PerSecondCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitResponse) GetPerMinuteCallLimit() string {
	if x != nil {
		return x.PerMinuteCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitResponse) GetPerHourCallLimit() string {
	if x != nil {
		return x.PerHourCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitResponse) GetPerDayCallLimit() string {
	if x != nil {
		return x.PerDayCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitResponse) GetPerWeekCallLimit() string {
	if x != nil {
		return x.PerWeekCallLimit
	}
	return ""
}

func (x *SetConsumerCallsLimitResponse) GetPerMonthCallLimit() string {
	if x != nil {
		return x.PerMonthCallLimit
	}
	return ""
}

type UpdateConsumerRedirectURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerID  string `protobuf:"bytes,1,opt,name=ConsumerID,json=consumer_id,proto3" json:"consumer_id,omitempty"`
	RedirectURL string `protobuf:"bytes,2,opt,name=RedirectURL,json=redirect_url,proto3" json:"redirect_url,omitempty"`
}

func (x *UpdateConsumerRedirectURLRequest) Reset() {
	*x = UpdateConsumerRedirectURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConsumerRedirectURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsumerRedirectURLRequest) ProtoMessage() {}

func (x *UpdateConsumerRedirectURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsumerRedirectURLRequest.ProtoReflect.Descriptor instead.
func (*UpdateConsumerRedirectURLRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateConsumerRedirectURLRequest) GetConsumerID() string {
	if x != nil {
		return x.ConsumerID
	}
	return ""
}

func (x *UpdateConsumerRedirectURLRequest) GetRedirectURL() string {
	if x != nil {
		return x.RedirectURL
	}
	return ""
}

type UpdateConsumerRedirectURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumer *Consumer `protobuf:"bytes,1,opt,name=Consumer,json=consumer,proto3" json:"consumer,omitempty"`
}

func (x *UpdateConsumerRedirectURLResponse) Reset() {
	*x = UpdateConsumerRedirectURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConsumerRedirectURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsumerRedirectURLResponse) ProtoMessage() {}

func (x *UpdateConsumerRedirectURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsumerRedirectURLResponse.ProtoReflect.Descriptor instead.
func (*UpdateConsumerRedirectURLResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateConsumerRedirectURLResponse) GetConsumer() *Consumer {
	if x != nil {
		return x.Consumer
	}
	return nil
}

var File_github_com_openbank_openbank_v1_consumer_all_proto protoreflect.FileDescriptor

var file_github_com_openbank_openbank_v1_consumer_all_proto_rawDesc = []byte{
	0x0a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xfb, 0x03, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0e,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2d, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x12, 0x37, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x79, 0x0a, 0x1e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f,
	0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x4d, 0x0a, 0x1f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x70, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x4d, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x6d,
	0x61, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xea, 0x02, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x36,
	0x0a, 0x07, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x07,
	0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x65, 0x72, 0x5f,
	0x77, 0x65, 0x65, 0x6b, 0x12, 0x38, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x36,
	0x0a, 0x07, 0x50, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x70, 0x65,
	0x72, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x53,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xda, 0x03, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x70, 0x65,
	0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x70, 0x65, 0x72, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37,
	0x0a, 0x0f, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x12, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x70,
	0x65, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x3b, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61,
	0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x70, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x47, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x59, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x6b, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xbd, 0x03, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d,
	0x0a, 0x12, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a,
	0x10, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x13, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x44,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x39, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x61, 0x6c, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x11,
	0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x14, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x91, 0x03, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x3d, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x15, 0x70, 0x65, 0x72, 0x5f,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x39, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0f,
	0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x12, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x70, 0x65, 0x72,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x3b, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x86, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x67,
	0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0xf6, 0x16, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc3, 0x03, 0x0a, 0x17,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x94, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x12, 0x1f, 0x53, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x1a, 0x1e, 0x53, 0x65, 0x74, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x4a, 0x62, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5b, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x39, 0x0a,
	0x37, 0x1a, 0x35, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f,
	0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12,
	0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x30, 0x0a, 0x2e, 0x0a,
	0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x1a, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30,
	0x00, 0x12, 0xa5, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x02, 0x88,
	0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xea, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x12, 0x17, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x32, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x70, 0x20,
	0x74, 0x6f, 0x20, 0x32, 0x30, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x63,
	0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4a, 0x60, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x59, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x62, 0x2f, 0x0a, 0x2d, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x23,
	0x0a, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62,
	0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x2d, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xcb, 0x02, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92,
	0x41, 0xc3, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x0c, 0x47,
	0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x1a, 0x20, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x49, 0x44, 0x4a, 0x56, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2d, 0x0a, 0x2b, 0x1a, 0x29, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x2f, 0x0a, 0x2d, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x12, 0x23, 0x0a, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xcd, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x82, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd8, 0x01, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x0d, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x1a, 0x33, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x30, 0x20, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4a, 0x57, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x50, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2e, 0x0a, 0x2c, 0x1a, 0x2a, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x62, 0x2f, 0x0a, 0x2d, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0x23, 0x0a, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x73, 0x30, 0x00, 0x12, 0xae, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5,
	0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8d, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x20, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x30, 0x20,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4a,
	0x66, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5f, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x3d, 0x0a, 0x3b, 0x1a, 0x39, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73,
	0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x2f, 0x0a, 0x2d, 0x0a, 0x06, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x12, 0x23, 0x0a, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x30, 0x00, 0x12, 0xc5, 0x03, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xd6, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x87, 0x02,
	0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x19, 0x53, 0x65, 0x74, 0x20,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x1a, 0x19, 0x53, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x4a, 0x60, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x59, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x30, 0x0a, 0x2e, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x12, 0x24, 0x0a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a,
	0x1a, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xd8, 0x03, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x2a,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0x8d, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x1a,
	0x53, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x75, 0x72, 0x6c, 0x2e, 0x1a, 0x1a, 0x53, 0x65, 0x74, 0x20,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x75, 0x72, 0x6c, 0x2e, 0x4a, 0x64, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5d, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x3b, 0x0a, 0x39, 0x1a, 0x37, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x31, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62,
	0x30, 0x0a, 0x2e, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x24, 0x0a, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01, 0x2a, 0x1a, 0x3b, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00,
	0x42, 0x89, 0x07, 0x0a, 0x13, 0x74, 0x6f, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x80,
	0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01,
	0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x06, 0x0a, 0x03, 0x32, 0x2e, 0x30, 0x12, 0x54, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x12, 0x3d, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x32, 0x05, 0x31, 0x2e,
	0x30, 0x2e, 0x30, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x5f, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x58, 0x0a, 0x56, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62,
	0x6f, 0x64, 0x79, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x4c, 0x0a, 0x03, 0x34,
	0x30, 0x31, 0x12, 0x45, 0x0a, 0x43, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x49, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x31, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x46,
	0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x3f, 0x0a, 0x3d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x5a, 0xa3, 0x02, 0x0a, 0xa0, 0x02, 0x0a, 0x06, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x12, 0x95, 0x02, 0x08, 0x03, 0x12, 0x82, 0x01, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x54,
	0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x28, 0x04,
	0x32, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x09, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x0a, 0x37, 0x0a, 0x21, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x12, 0x56, 0x69,
	0x65, 0x77, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x0a, 0x3a, 0x0a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x14, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescOnce sync.Once
	file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescData = file_github_com_openbank_openbank_v1_consumer_all_proto_rawDesc
)

func file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescGZIP() []byte {
	file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescOnce.Do(func() {
		file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescData)
	})
	return file_github_com_openbank_openbank_v1_consumer_all_proto_rawDescData
}

var (
	file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
	file_github_com_openbank_openbank_v1_consumer_all_proto_goTypes  = []interface{}{
		(*CreateByUser)(nil),                        // 0: consumer.CreateByUser
		(*Consumer)(nil),                            // 1: consumer.Consumer
		(*EnableOrDisableConsumerRequest)(nil),      // 2: consumer.EnableOrDisableConsumerRequest
		(*EnableOrDisableConsumerResponse)(nil),     // 3: consumer.EnableOrDisableConsumerResponse
		(*State)(nil),                               // 4: consumer.State
		(*CurrentState)(nil),                        // 5: consumer.CurrentState
		(*GetConsumerCallLimitsRequest)(nil),        // 6: consumer.GetConsumerCallLimitsRequest
		(*GetConsumerCallLimitsResponse)(nil),       // 7: consumer.GetConsumerCallLimitsResponse
		(*GetConsumerRequest)(nil),                  // 8: consumer.GetConsumerRequest
		(*GetConsumerResponse)(nil),                 // 9: consumer.GetConsumerResponse
		(*GetConsumersResponse)(nil),                // 10: consumer.GetConsumersResponse
		(*GetConsumersForLoggedInUserResponse)(nil), // 11: consumer.GetConsumersForLoggedInUserResponse
		(*SetConsumerCallsLimitRequest)(nil),        // 12: consumer.SetConsumerCallsLimitRequest
		(*SetConsumerCallsLimitResponse)(nil),       // 13: consumer.SetConsumerCallsLimitResponse
		(*UpdateConsumerRedirectURLRequest)(nil),    // 14: consumer.UpdateConsumerRedirectURLRequest
		(*UpdateConsumerRedirectURLResponse)(nil),   // 15: consumer.UpdateConsumerRedirectURLResponse
		(*timestamppb.Timestamp)(nil),               // 16: google.protobuf.Timestamp
		(*emptypb.Empty)(nil),                       // 17: google.protobuf.Empty
	}
)

var file_github_com_openbank_openbank_v1_consumer_all_proto_depIdxs = []int32{
	0,  // 0: consumer.Consumer.CreatedByUser:type_name -> consumer.CreateByUser
	16, // 1: consumer.Consumer.Created:type_name -> google.protobuf.Timestamp
	4,  // 2: consumer.CurrentState.PerSecond:type_name -> consumer.State
	4,  // 3: consumer.CurrentState.PerHour:type_name -> consumer.State
	4,  // 4: consumer.CurrentState.PerDay:type_name -> consumer.State
	4,  // 5: consumer.CurrentState.PerWeek:type_name -> consumer.State
	4,  // 6: consumer.CurrentState.PerMonth:type_name -> consumer.State
	4,  // 7: consumer.CurrentState.PerYear:type_name -> consumer.State
	5,  // 8: consumer.GetConsumerCallLimitsResponse.CurrentState:type_name -> consumer.CurrentState
	1,  // 9: consumer.GetConsumerResponse.Consumer:type_name -> consumer.Consumer
	1,  // 10: consumer.GetConsumersResponse.Consumers:type_name -> consumer.Consumer
	1,  // 11: consumer.GetConsumersForLoggedInUserResponse.Consumers:type_name -> consumer.Consumer
	1,  // 12: consumer.UpdateConsumerRedirectURLResponse.Consumer:type_name -> consumer.Consumer
	2,  // 13: consumer.ConsumerService.EnableOrDisableConsumer:input_type -> consumer.EnableOrDisableConsumerRequest
	6,  // 14: consumer.ConsumerService.GetConsumerCallLimits:input_type -> consumer.GetConsumerCallLimitsRequest
	8,  // 15: consumer.ConsumerService.GetConsumer:input_type -> consumer.GetConsumerRequest
	17, // 16: consumer.ConsumerService.GetConsumers:input_type -> google.protobuf.Empty
	17, // 17: consumer.ConsumerService.GetConsumersForLoggedInUser:input_type -> google.protobuf.Empty
	12, // 18: consumer.ConsumerService.SetConsumerCallsLimit:input_type -> consumer.SetConsumerCallsLimitRequest
	14, // 19: consumer.ConsumerService.UpdateConsumerRedirectURL:input_type -> consumer.UpdateConsumerRedirectURLRequest
	3,  // 20: consumer.ConsumerService.EnableOrDisableConsumer:output_type -> consumer.EnableOrDisableConsumerResponse
	7,  // 21: consumer.ConsumerService.GetConsumerCallLimits:output_type -> consumer.GetConsumerCallLimitsResponse
	9,  // 22: consumer.ConsumerService.GetConsumer:output_type -> consumer.GetConsumerResponse
	10, // 23: consumer.ConsumerService.GetConsumers:output_type -> consumer.GetConsumersResponse
	11, // 24: consumer.ConsumerService.GetConsumersForLoggedInUser:output_type -> consumer.GetConsumersForLoggedInUserResponse
	13, // 25: consumer.ConsumerService.SetConsumerCallsLimit:output_type -> consumer.SetConsumerCallsLimitResponse
	15, // 26: consumer.ConsumerService.UpdateConsumerRedirectURL:output_type -> consumer.UpdateConsumerRedirectURLResponse
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_github_com_openbank_openbank_v1_consumer_all_proto_init() }
func file_github_com_openbank_openbank_v1_consumer_all_proto_init() {
	if File_github_com_openbank_openbank_v1_consumer_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateByUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableOrDisableConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableOrDisableConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsumerCallLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsumerCallLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsumersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsumersForLoggedInUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConsumerCallsLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConsumerCallsLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConsumerRedirectURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConsumerRedirectURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openbank_openbank_v1_consumer_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openbank_openbank_v1_consumer_all_proto_goTypes,
		DependencyIndexes: file_github_com_openbank_openbank_v1_consumer_all_proto_depIdxs,
		MessageInfos:      file_github_com_openbank_openbank_v1_consumer_all_proto_msgTypes,
	}.Build()
	File_github_com_openbank_openbank_v1_consumer_all_proto = out.File
	file_github_com_openbank_openbank_v1_consumer_all_proto_rawDesc = nil
	file_github_com_openbank_openbank_v1_consumer_all_proto_goTypes = nil
	file_github_com_openbank_openbank_v1_consumer_all_proto_depIdxs = nil
}
