// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package counterpartymetadata

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CounterpartyMetadataServiceClient is the client API for CounterpartyMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterpartyMetadataServiceClient interface {
	// CreateCorporateLocation creates a new corporate location.
	CreateCorporateLocation(ctx context.Context, in *CreateCorporateLocationRequest, opts ...grpc.CallOption) (*CorporateLocation, error)
	// GetCorporateLocation retrieves a corporate location.
	GetCorporateLocation(ctx context.Context, in *GetCorporateLocationRequest, opts ...grpc.CallOption) (*CorporateLocation, error)
	// GetCorporateLocations retrieves all corporate locations.
	GetCorporateLocations(ctx context.Context, in *GetCorporateLocationsRequest, opts ...grpc.CallOption) (*GetCorporateLocationsResponse, error)
	// UpdateCorporateLocation updates the corporate location.
	UpdateCorporateLocation(ctx context.Context, in *UpdateCorporateLocationRequest, opts ...grpc.CallOption) (*CorporateLocation, error)
	// DeleteCorporateLocation deletes the corporate location.
	DeleteCorporateLocation(ctx context.Context, in *DeleteCorporateLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateMoreInfo creates a new more info.
	CreateMoreInfo(ctx context.Context, in *CreateMoreInfoRequest, opts ...grpc.CallOption) (*MoreInfo, error)
	// GetMoreInfo retrieves a more info.
	GetMoreInfo(ctx context.Context, in *GetMoreInfoRequest, opts ...grpc.CallOption) (*MoreInfo, error)
	// GetMoreInfos retrieves all more infos.
	GetMoreInfos(ctx context.Context, in *GetMoreInfosRequest, opts ...grpc.CallOption) (*GetMoreInfosResponse, error)
	// UpdateMoreInfo updates the more info.
	UpdateMoreInfo(ctx context.Context, in *UpdateMoreInfoRequest, opts ...grpc.CallOption) (*MoreInfo, error)
	// DeleteMoreInfo deletes the more info.
	DeleteMoreInfo(ctx context.Context, in *DeleteMoreInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateOpenCorporatesURL creates a new open corporates url.
	CreateOpenCorporatesURL(ctx context.Context, in *CreateOpenCorporatesURLRequest, opts ...grpc.CallOption) (*OpenCorporatesURL, error)
	// GetOpenCorporatesURL retrieves a open corporates url.
	GetOpenCorporatesURL(ctx context.Context, in *GetOpenCorporatesURLRequest, opts ...grpc.CallOption) (*OpenCorporatesURL, error)
	// GetOpenCorporatesURLs retrieves all open corporates urls.
	GetOpenCorporatesURLs(ctx context.Context, in *GetOpenCorporatesURLsRequest, opts ...grpc.CallOption) (*GetOpenCorporatesURLsResponse, error)
	// UpdateOpenCorporatesURL updates the open corporates url.
	UpdateOpenCorporatesURL(ctx context.Context, in *UpdateOpenCorporatesURLRequest, opts ...grpc.CallOption) (*OpenCorporatesURL, error)
	// DeleteOpenCorporatesURL deletes the open corporates url.
	DeleteOpenCorporatesURL(ctx context.Context, in *DeleteOpenCorporatesURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateURL creates a new url.
	CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*URL, error)
	// GetURL retrieves a url.
	GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*URL, error)
	// GetURLs retrieves all urls.
	GetURLs(ctx context.Context, in *GetURLsRequest, opts ...grpc.CallOption) (*GetURLsResponse, error)
	// UpdateURL updates the url.
	UpdateURL(ctx context.Context, in *UpdateURLRequest, opts ...grpc.CallOption) (*URL, error)
	// DeleteURL deletes the url.
	DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateImageURL creates a new image url.
	CreateImageURL(ctx context.Context, in *CreateImageURLRequest, opts ...grpc.CallOption) (*ImageURL, error)
	// GetImageURL retrieves a image url.
	GetImageURL(ctx context.Context, in *GetImageURLRequest, opts ...grpc.CallOption) (*ImageURL, error)
	// GetImageURLs retrieves all image urls.
	GetImageURLs(ctx context.Context, in *GetImageURLsRequest, opts ...grpc.CallOption) (*GetImageURLsResponse, error)
	// UpdateImageURL updates the image url.
	UpdateImageURL(ctx context.Context, in *UpdateImageURLRequest, opts ...grpc.CallOption) (*ImageURL, error)
	// DeleteImageURL deletes the image url.
	DeleteImageURL(ctx context.Context, in *DeleteImageURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreatePhysicalLocation creates a new physical location.
	CreatePhysicalLocation(ctx context.Context, in *CreatePhysicalLocationRequest, opts ...grpc.CallOption) (*PhysicalLocation, error)
	// GetPhysicalLocation retrieves a physical location.
	GetPhysicalLocation(ctx context.Context, in *GetPhysicalLocationRequest, opts ...grpc.CallOption) (*PhysicalLocation, error)
	// GetPhysicalLocations retrieves all physical locations.
	GetPhysicalLocations(ctx context.Context, in *GetPhysicalLocationsRequest, opts ...grpc.CallOption) (*GetPhysicalLocationsResponse, error)
	// UpdatePhysicalLocation updates the physical location.
	UpdatePhysicalLocation(ctx context.Context, in *UpdatePhysicalLocationRequest, opts ...grpc.CallOption) (*PhysicalLocation, error)
	// DeletePhysicalLocation deletes the physical location.
	DeletePhysicalLocation(ctx context.Context, in *DeletePhysicalLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreatePublicAlias creates a new public alias.
	CreatePublicAlias(ctx context.Context, in *CreatePublicAliasRequest, opts ...grpc.CallOption) (*PublicAlias, error)
	// GetPublicAlias retrieves a public alias.
	GetPublicAlias(ctx context.Context, in *GetPublicAliasRequest, opts ...grpc.CallOption) (*PublicAlias, error)
	// GetPublicAliases retrieves all public aliases.
	GetPublicAliases(ctx context.Context, in *GetPublicAliasesRequest, opts ...grpc.CallOption) (*GetPublicAliasesResponse, error)
	// UpdatePublicAlias updates the public alias.
	UpdatePublicAlias(ctx context.Context, in *UpdatePublicAliasRequest, opts ...grpc.CallOption) (*PublicAlias, error)
	// DeletePublicAlias deletes the public alias.
	DeletePublicAlias(ctx context.Context, in *DeletePublicAliasRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreatePrivateAlias creates a new private alias.
	CreatePrivateAlias(ctx context.Context, in *CreatePrivateAliasRequest, opts ...grpc.CallOption) (*PrivateAlias, error)
	// GetPrivateAlias retrieves a private alias.
	GetPrivateAlias(ctx context.Context, in *GetPrivateAliasRequest, opts ...grpc.CallOption) (*PrivateAlias, error)
	// GetPrivateAliases retrieves all private aliases.
	GetPrivateAliases(ctx context.Context, in *GetPrivateAliasesRequest, opts ...grpc.CallOption) (*GetPrivateAliasesResponse, error)
	// UpdatePrivateAlias updates the private alias.
	UpdatePrivateAlias(ctx context.Context, in *UpdatePrivateAliasRequest, opts ...grpc.CallOption) (*PrivateAlias, error)
	// DeletePrivateAlias deletes the private alias.
	DeletePrivateAlias(ctx context.Context, in *DeletePrivateAliasRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetOtherAccountMetadata retrieves other accounts metadata.
	GetOtherAccountMetadata(ctx context.Context, in *GetOtherAccountMetadataRequest, opts ...grpc.CallOption) (*GetOtherAccountMetadataResponse, error)
}

type counterpartyMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterpartyMetadataServiceClient(cc grpc.ClientConnInterface) CounterpartyMetadataServiceClient {
	return &counterpartyMetadataServiceClient{cc}
}

func (c *counterpartyMetadataServiceClient) CreateCorporateLocation(ctx context.Context, in *CreateCorporateLocationRequest, opts ...grpc.CallOption) (*CorporateLocation, error) {
	out := new(CorporateLocation)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/CreateCorporateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetCorporateLocation(ctx context.Context, in *GetCorporateLocationRequest, opts ...grpc.CallOption) (*CorporateLocation, error) {
	out := new(CorporateLocation)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetCorporateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetCorporateLocations(ctx context.Context, in *GetCorporateLocationsRequest, opts ...grpc.CallOption) (*GetCorporateLocationsResponse, error) {
	out := new(GetCorporateLocationsResponse)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetCorporateLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) UpdateCorporateLocation(ctx context.Context, in *UpdateCorporateLocationRequest, opts ...grpc.CallOption) (*CorporateLocation, error) {
	out := new(CorporateLocation)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/UpdateCorporateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) DeleteCorporateLocation(ctx context.Context, in *DeleteCorporateLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/DeleteCorporateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) CreateMoreInfo(ctx context.Context, in *CreateMoreInfoRequest, opts ...grpc.CallOption) (*MoreInfo, error) {
	out := new(MoreInfo)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/CreateMoreInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetMoreInfo(ctx context.Context, in *GetMoreInfoRequest, opts ...grpc.CallOption) (*MoreInfo, error) {
	out := new(MoreInfo)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetMoreInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetMoreInfos(ctx context.Context, in *GetMoreInfosRequest, opts ...grpc.CallOption) (*GetMoreInfosResponse, error) {
	out := new(GetMoreInfosResponse)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetMoreInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) UpdateMoreInfo(ctx context.Context, in *UpdateMoreInfoRequest, opts ...grpc.CallOption) (*MoreInfo, error) {
	out := new(MoreInfo)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/UpdateMoreInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) DeleteMoreInfo(ctx context.Context, in *DeleteMoreInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/DeleteMoreInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) CreateOpenCorporatesURL(ctx context.Context, in *CreateOpenCorporatesURLRequest, opts ...grpc.CallOption) (*OpenCorporatesURL, error) {
	out := new(OpenCorporatesURL)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/CreateOpenCorporatesURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetOpenCorporatesURL(ctx context.Context, in *GetOpenCorporatesURLRequest, opts ...grpc.CallOption) (*OpenCorporatesURL, error) {
	out := new(OpenCorporatesURL)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetOpenCorporatesURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetOpenCorporatesURLs(ctx context.Context, in *GetOpenCorporatesURLsRequest, opts ...grpc.CallOption) (*GetOpenCorporatesURLsResponse, error) {
	out := new(GetOpenCorporatesURLsResponse)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetOpenCorporatesURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) UpdateOpenCorporatesURL(ctx context.Context, in *UpdateOpenCorporatesURLRequest, opts ...grpc.CallOption) (*OpenCorporatesURL, error) {
	out := new(OpenCorporatesURL)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/UpdateOpenCorporatesURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) DeleteOpenCorporatesURL(ctx context.Context, in *DeleteOpenCorporatesURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/DeleteOpenCorporatesURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) CreateURL(ctx context.Context, in *CreateURLRequest, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/CreateURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetURLs(ctx context.Context, in *GetURLsRequest, opts ...grpc.CallOption) (*GetURLsResponse, error) {
	out := new(GetURLsResponse)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) UpdateURL(ctx context.Context, in *UpdateURLRequest, opts ...grpc.CallOption) (*URL, error) {
	out := new(URL)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/UpdateURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/DeleteURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) CreateImageURL(ctx context.Context, in *CreateImageURLRequest, opts ...grpc.CallOption) (*ImageURL, error) {
	out := new(ImageURL)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/CreateImageURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetImageURL(ctx context.Context, in *GetImageURLRequest, opts ...grpc.CallOption) (*ImageURL, error) {
	out := new(ImageURL)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetImageURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetImageURLs(ctx context.Context, in *GetImageURLsRequest, opts ...grpc.CallOption) (*GetImageURLsResponse, error) {
	out := new(GetImageURLsResponse)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetImageURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) UpdateImageURL(ctx context.Context, in *UpdateImageURLRequest, opts ...grpc.CallOption) (*ImageURL, error) {
	out := new(ImageURL)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/UpdateImageURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) DeleteImageURL(ctx context.Context, in *DeleteImageURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/DeleteImageURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) CreatePhysicalLocation(ctx context.Context, in *CreatePhysicalLocationRequest, opts ...grpc.CallOption) (*PhysicalLocation, error) {
	out := new(PhysicalLocation)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/CreatePhysicalLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetPhysicalLocation(ctx context.Context, in *GetPhysicalLocationRequest, opts ...grpc.CallOption) (*PhysicalLocation, error) {
	out := new(PhysicalLocation)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetPhysicalLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetPhysicalLocations(ctx context.Context, in *GetPhysicalLocationsRequest, opts ...grpc.CallOption) (*GetPhysicalLocationsResponse, error) {
	out := new(GetPhysicalLocationsResponse)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetPhysicalLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) UpdatePhysicalLocation(ctx context.Context, in *UpdatePhysicalLocationRequest, opts ...grpc.CallOption) (*PhysicalLocation, error) {
	out := new(PhysicalLocation)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/UpdatePhysicalLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) DeletePhysicalLocation(ctx context.Context, in *DeletePhysicalLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/DeletePhysicalLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) CreatePublicAlias(ctx context.Context, in *CreatePublicAliasRequest, opts ...grpc.CallOption) (*PublicAlias, error) {
	out := new(PublicAlias)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/CreatePublicAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetPublicAlias(ctx context.Context, in *GetPublicAliasRequest, opts ...grpc.CallOption) (*PublicAlias, error) {
	out := new(PublicAlias)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetPublicAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetPublicAliases(ctx context.Context, in *GetPublicAliasesRequest, opts ...grpc.CallOption) (*GetPublicAliasesResponse, error) {
	out := new(GetPublicAliasesResponse)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetPublicAliases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) UpdatePublicAlias(ctx context.Context, in *UpdatePublicAliasRequest, opts ...grpc.CallOption) (*PublicAlias, error) {
	out := new(PublicAlias)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/UpdatePublicAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) DeletePublicAlias(ctx context.Context, in *DeletePublicAliasRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/DeletePublicAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) CreatePrivateAlias(ctx context.Context, in *CreatePrivateAliasRequest, opts ...grpc.CallOption) (*PrivateAlias, error) {
	out := new(PrivateAlias)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/CreatePrivateAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetPrivateAlias(ctx context.Context, in *GetPrivateAliasRequest, opts ...grpc.CallOption) (*PrivateAlias, error) {
	out := new(PrivateAlias)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetPrivateAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetPrivateAliases(ctx context.Context, in *GetPrivateAliasesRequest, opts ...grpc.CallOption) (*GetPrivateAliasesResponse, error) {
	out := new(GetPrivateAliasesResponse)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetPrivateAliases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) UpdatePrivateAlias(ctx context.Context, in *UpdatePrivateAliasRequest, opts ...grpc.CallOption) (*PrivateAlias, error) {
	out := new(PrivateAlias)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/UpdatePrivateAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) DeletePrivateAlias(ctx context.Context, in *DeletePrivateAliasRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/DeletePrivateAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterpartyMetadataServiceClient) GetOtherAccountMetadata(ctx context.Context, in *GetOtherAccountMetadataRequest, opts ...grpc.CallOption) (*GetOtherAccountMetadataResponse, error) {
	out := new(GetOtherAccountMetadataResponse)
	err := c.cc.Invoke(ctx, "/counterpartymetadata.CounterpartyMetadataService/GetOtherAccountMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterpartyMetadataServiceServer is the server API for CounterpartyMetadataService service.
// All implementations must embed UnimplementedCounterpartyMetadataServiceServer
// for forward compatibility
type CounterpartyMetadataServiceServer interface {
	// CreateCorporateLocation creates a new corporate location.
	CreateCorporateLocation(context.Context, *CreateCorporateLocationRequest) (*CorporateLocation, error)
	// GetCorporateLocation retrieves a corporate location.
	GetCorporateLocation(context.Context, *GetCorporateLocationRequest) (*CorporateLocation, error)
	// GetCorporateLocations retrieves all corporate locations.
	GetCorporateLocations(context.Context, *GetCorporateLocationsRequest) (*GetCorporateLocationsResponse, error)
	// UpdateCorporateLocation updates the corporate location.
	UpdateCorporateLocation(context.Context, *UpdateCorporateLocationRequest) (*CorporateLocation, error)
	// DeleteCorporateLocation deletes the corporate location.
	DeleteCorporateLocation(context.Context, *DeleteCorporateLocationRequest) (*emptypb.Empty, error)
	// CreateMoreInfo creates a new more info.
	CreateMoreInfo(context.Context, *CreateMoreInfoRequest) (*MoreInfo, error)
	// GetMoreInfo retrieves a more info.
	GetMoreInfo(context.Context, *GetMoreInfoRequest) (*MoreInfo, error)
	// GetMoreInfos retrieves all more infos.
	GetMoreInfos(context.Context, *GetMoreInfosRequest) (*GetMoreInfosResponse, error)
	// UpdateMoreInfo updates the more info.
	UpdateMoreInfo(context.Context, *UpdateMoreInfoRequest) (*MoreInfo, error)
	// DeleteMoreInfo deletes the more info.
	DeleteMoreInfo(context.Context, *DeleteMoreInfoRequest) (*emptypb.Empty, error)
	// CreateOpenCorporatesURL creates a new open corporates url.
	CreateOpenCorporatesURL(context.Context, *CreateOpenCorporatesURLRequest) (*OpenCorporatesURL, error)
	// GetOpenCorporatesURL retrieves a open corporates url.
	GetOpenCorporatesURL(context.Context, *GetOpenCorporatesURLRequest) (*OpenCorporatesURL, error)
	// GetOpenCorporatesURLs retrieves all open corporates urls.
	GetOpenCorporatesURLs(context.Context, *GetOpenCorporatesURLsRequest) (*GetOpenCorporatesURLsResponse, error)
	// UpdateOpenCorporatesURL updates the open corporates url.
	UpdateOpenCorporatesURL(context.Context, *UpdateOpenCorporatesURLRequest) (*OpenCorporatesURL, error)
	// DeleteOpenCorporatesURL deletes the open corporates url.
	DeleteOpenCorporatesURL(context.Context, *DeleteOpenCorporatesURLRequest) (*emptypb.Empty, error)
	// CreateURL creates a new url.
	CreateURL(context.Context, *CreateURLRequest) (*URL, error)
	// GetURL retrieves a url.
	GetURL(context.Context, *GetURLRequest) (*URL, error)
	// GetURLs retrieves all urls.
	GetURLs(context.Context, *GetURLsRequest) (*GetURLsResponse, error)
	// UpdateURL updates the url.
	UpdateURL(context.Context, *UpdateURLRequest) (*URL, error)
	// DeleteURL deletes the url.
	DeleteURL(context.Context, *DeleteURLRequest) (*emptypb.Empty, error)
	// CreateImageURL creates a new image url.
	CreateImageURL(context.Context, *CreateImageURLRequest) (*ImageURL, error)
	// GetImageURL retrieves a image url.
	GetImageURL(context.Context, *GetImageURLRequest) (*ImageURL, error)
	// GetImageURLs retrieves all image urls.
	GetImageURLs(context.Context, *GetImageURLsRequest) (*GetImageURLsResponse, error)
	// UpdateImageURL updates the image url.
	UpdateImageURL(context.Context, *UpdateImageURLRequest) (*ImageURL, error)
	// DeleteImageURL deletes the image url.
	DeleteImageURL(context.Context, *DeleteImageURLRequest) (*emptypb.Empty, error)
	// CreatePhysicalLocation creates a new physical location.
	CreatePhysicalLocation(context.Context, *CreatePhysicalLocationRequest) (*PhysicalLocation, error)
	// GetPhysicalLocation retrieves a physical location.
	GetPhysicalLocation(context.Context, *GetPhysicalLocationRequest) (*PhysicalLocation, error)
	// GetPhysicalLocations retrieves all physical locations.
	GetPhysicalLocations(context.Context, *GetPhysicalLocationsRequest) (*GetPhysicalLocationsResponse, error)
	// UpdatePhysicalLocation updates the physical location.
	UpdatePhysicalLocation(context.Context, *UpdatePhysicalLocationRequest) (*PhysicalLocation, error)
	// DeletePhysicalLocation deletes the physical location.
	DeletePhysicalLocation(context.Context, *DeletePhysicalLocationRequest) (*emptypb.Empty, error)
	// CreatePublicAlias creates a new public alias.
	CreatePublicAlias(context.Context, *CreatePublicAliasRequest) (*PublicAlias, error)
	// GetPublicAlias retrieves a public alias.
	GetPublicAlias(context.Context, *GetPublicAliasRequest) (*PublicAlias, error)
	// GetPublicAliases retrieves all public aliases.
	GetPublicAliases(context.Context, *GetPublicAliasesRequest) (*GetPublicAliasesResponse, error)
	// UpdatePublicAlias updates the public alias.
	UpdatePublicAlias(context.Context, *UpdatePublicAliasRequest) (*PublicAlias, error)
	// DeletePublicAlias deletes the public alias.
	DeletePublicAlias(context.Context, *DeletePublicAliasRequest) (*emptypb.Empty, error)
	// CreatePrivateAlias creates a new private alias.
	CreatePrivateAlias(context.Context, *CreatePrivateAliasRequest) (*PrivateAlias, error)
	// GetPrivateAlias retrieves a private alias.
	GetPrivateAlias(context.Context, *GetPrivateAliasRequest) (*PrivateAlias, error)
	// GetPrivateAliases retrieves all private aliases.
	GetPrivateAliases(context.Context, *GetPrivateAliasesRequest) (*GetPrivateAliasesResponse, error)
	// UpdatePrivateAlias updates the private alias.
	UpdatePrivateAlias(context.Context, *UpdatePrivateAliasRequest) (*PrivateAlias, error)
	// DeletePrivateAlias deletes the private alias.
	DeletePrivateAlias(context.Context, *DeletePrivateAliasRequest) (*emptypb.Empty, error)
	// GetOtherAccountMetadata retrieves other accounts metadata.
	GetOtherAccountMetadata(context.Context, *GetOtherAccountMetadataRequest) (*GetOtherAccountMetadataResponse, error)
	mustEmbedUnimplementedCounterpartyMetadataServiceServer()
}

// UnimplementedCounterpartyMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCounterpartyMetadataServiceServer struct{}

func (UnimplementedCounterpartyMetadataServiceServer) CreateCorporateLocation(context.Context, *CreateCorporateLocationRequest) (*CorporateLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCorporateLocation not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetCorporateLocation(context.Context, *GetCorporateLocationRequest) (*CorporateLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCorporateLocation not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetCorporateLocations(context.Context, *GetCorporateLocationsRequest) (*GetCorporateLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCorporateLocations not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) UpdateCorporateLocation(context.Context, *UpdateCorporateLocationRequest) (*CorporateLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCorporateLocation not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) DeleteCorporateLocation(context.Context, *DeleteCorporateLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCorporateLocation not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) CreateMoreInfo(context.Context, *CreateMoreInfoRequest) (*MoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMoreInfo not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetMoreInfo(context.Context, *GetMoreInfoRequest) (*MoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoreInfo not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetMoreInfos(context.Context, *GetMoreInfosRequest) (*GetMoreInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoreInfos not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) UpdateMoreInfo(context.Context, *UpdateMoreInfoRequest) (*MoreInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMoreInfo not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) DeleteMoreInfo(context.Context, *DeleteMoreInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMoreInfo not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) CreateOpenCorporatesURL(context.Context, *CreateOpenCorporatesURLRequest) (*OpenCorporatesURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpenCorporatesURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetOpenCorporatesURL(context.Context, *GetOpenCorporatesURLRequest) (*OpenCorporatesURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenCorporatesURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetOpenCorporatesURLs(context.Context, *GetOpenCorporatesURLsRequest) (*GetOpenCorporatesURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenCorporatesURLs not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) UpdateOpenCorporatesURL(context.Context, *UpdateOpenCorporatesURLRequest) (*OpenCorporatesURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpenCorporatesURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) DeleteOpenCorporatesURL(context.Context, *DeleteOpenCorporatesURLRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOpenCorporatesURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) CreateURL(context.Context, *CreateURLRequest) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetURL(context.Context, *GetURLRequest) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetURLs(context.Context, *GetURLsRequest) (*GetURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLs not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) UpdateURL(context.Context, *UpdateURLRequest) (*URL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) DeleteURL(context.Context, *DeleteURLRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) CreateImageURL(context.Context, *CreateImageURLRequest) (*ImageURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetImageURL(context.Context, *GetImageURLRequest) (*ImageURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetImageURLs(context.Context, *GetImageURLsRequest) (*GetImageURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageURLs not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) UpdateImageURL(context.Context, *UpdateImageURLRequest) (*ImageURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) DeleteImageURL(context.Context, *DeleteImageURLRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImageURL not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) CreatePhysicalLocation(context.Context, *CreatePhysicalLocationRequest) (*PhysicalLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhysicalLocation not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetPhysicalLocation(context.Context, *GetPhysicalLocationRequest) (*PhysicalLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhysicalLocation not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetPhysicalLocations(context.Context, *GetPhysicalLocationsRequest) (*GetPhysicalLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhysicalLocations not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) UpdatePhysicalLocation(context.Context, *UpdatePhysicalLocationRequest) (*PhysicalLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhysicalLocation not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) DeletePhysicalLocation(context.Context, *DeletePhysicalLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhysicalLocation not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) CreatePublicAlias(context.Context, *CreatePublicAliasRequest) (*PublicAlias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicAlias not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetPublicAlias(context.Context, *GetPublicAliasRequest) (*PublicAlias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicAlias not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetPublicAliases(context.Context, *GetPublicAliasesRequest) (*GetPublicAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicAliases not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) UpdatePublicAlias(context.Context, *UpdatePublicAliasRequest) (*PublicAlias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublicAlias not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) DeletePublicAlias(context.Context, *DeletePublicAliasRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublicAlias not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) CreatePrivateAlias(context.Context, *CreatePrivateAliasRequest) (*PrivateAlias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateAlias not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetPrivateAlias(context.Context, *GetPrivateAliasRequest) (*PrivateAlias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateAlias not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetPrivateAliases(context.Context, *GetPrivateAliasesRequest) (*GetPrivateAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateAliases not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) UpdatePrivateAlias(context.Context, *UpdatePrivateAliasRequest) (*PrivateAlias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivateAlias not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) DeletePrivateAlias(context.Context, *DeletePrivateAliasRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrivateAlias not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) GetOtherAccountMetadata(context.Context, *GetOtherAccountMetadataRequest) (*GetOtherAccountMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOtherAccountMetadata not implemented")
}

func (UnimplementedCounterpartyMetadataServiceServer) mustEmbedUnimplementedCounterpartyMetadataServiceServer() {
}

// UnsafeCounterpartyMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterpartyMetadataServiceServer will
// result in compilation errors.
type UnsafeCounterpartyMetadataServiceServer interface {
	mustEmbedUnimplementedCounterpartyMetadataServiceServer()
}

func RegisterCounterpartyMetadataServiceServer(s grpc.ServiceRegistrar, srv CounterpartyMetadataServiceServer) {
	s.RegisterService(&CounterpartyMetadataService_ServiceDesc, srv)
}

func _CounterpartyMetadataService_CreateCorporateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCorporateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).CreateCorporateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/CreateCorporateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).CreateCorporateLocation(ctx, req.(*CreateCorporateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetCorporateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorporateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetCorporateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetCorporateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetCorporateLocation(ctx, req.(*GetCorporateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetCorporateLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorporateLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetCorporateLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetCorporateLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetCorporateLocations(ctx, req.(*GetCorporateLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_UpdateCorporateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCorporateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).UpdateCorporateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/UpdateCorporateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).UpdateCorporateLocation(ctx, req.(*UpdateCorporateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_DeleteCorporateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCorporateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).DeleteCorporateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/DeleteCorporateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).DeleteCorporateLocation(ctx, req.(*DeleteCorporateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_CreateMoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMoreInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).CreateMoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/CreateMoreInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).CreateMoreInfo(ctx, req.(*CreateMoreInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetMoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoreInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetMoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetMoreInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetMoreInfo(ctx, req.(*GetMoreInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetMoreInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoreInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetMoreInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetMoreInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetMoreInfos(ctx, req.(*GetMoreInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_UpdateMoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMoreInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).UpdateMoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/UpdateMoreInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).UpdateMoreInfo(ctx, req.(*UpdateMoreInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_DeleteMoreInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMoreInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).DeleteMoreInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/DeleteMoreInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).DeleteMoreInfo(ctx, req.(*DeleteMoreInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_CreateOpenCorporatesURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpenCorporatesURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).CreateOpenCorporatesURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/CreateOpenCorporatesURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).CreateOpenCorporatesURL(ctx, req.(*CreateOpenCorporatesURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetOpenCorporatesURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenCorporatesURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetOpenCorporatesURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetOpenCorporatesURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetOpenCorporatesURL(ctx, req.(*GetOpenCorporatesURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetOpenCorporatesURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenCorporatesURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetOpenCorporatesURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetOpenCorporatesURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetOpenCorporatesURLs(ctx, req.(*GetOpenCorporatesURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_UpdateOpenCorporatesURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpenCorporatesURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).UpdateOpenCorporatesURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/UpdateOpenCorporatesURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).UpdateOpenCorporatesURL(ctx, req.(*UpdateOpenCorporatesURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_DeleteOpenCorporatesURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOpenCorporatesURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).DeleteOpenCorporatesURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/DeleteOpenCorporatesURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).DeleteOpenCorporatesURL(ctx, req.(*DeleteOpenCorporatesURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_CreateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).CreateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/CreateURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).CreateURL(ctx, req.(*CreateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetURL(ctx, req.(*GetURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetURLs(ctx, req.(*GetURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_UpdateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).UpdateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/UpdateURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).UpdateURL(ctx, req.(*UpdateURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/DeleteURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).DeleteURL(ctx, req.(*DeleteURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_CreateImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).CreateImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/CreateImageURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).CreateImageURL(ctx, req.(*CreateImageURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetImageURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetImageURL(ctx, req.(*GetImageURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetImageURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetImageURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetImageURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetImageURLs(ctx, req.(*GetImageURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_UpdateImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).UpdateImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/UpdateImageURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).UpdateImageURL(ctx, req.(*UpdateImageURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_DeleteImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).DeleteImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/DeleteImageURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).DeleteImageURL(ctx, req.(*DeleteImageURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_CreatePhysicalLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhysicalLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).CreatePhysicalLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/CreatePhysicalLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).CreatePhysicalLocation(ctx, req.(*CreatePhysicalLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetPhysicalLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhysicalLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetPhysicalLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetPhysicalLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetPhysicalLocation(ctx, req.(*GetPhysicalLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetPhysicalLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhysicalLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetPhysicalLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetPhysicalLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetPhysicalLocations(ctx, req.(*GetPhysicalLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_UpdatePhysicalLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhysicalLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).UpdatePhysicalLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/UpdatePhysicalLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).UpdatePhysicalLocation(ctx, req.(*UpdatePhysicalLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_DeletePhysicalLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhysicalLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).DeletePhysicalLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/DeletePhysicalLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).DeletePhysicalLocation(ctx, req.(*DeletePhysicalLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_CreatePublicAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).CreatePublicAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/CreatePublicAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).CreatePublicAlias(ctx, req.(*CreatePublicAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetPublicAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetPublicAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetPublicAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetPublicAlias(ctx, req.(*GetPublicAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetPublicAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetPublicAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetPublicAliases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetPublicAliases(ctx, req.(*GetPublicAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_UpdatePublicAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).UpdatePublicAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/UpdatePublicAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).UpdatePublicAlias(ctx, req.(*UpdatePublicAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_DeletePublicAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublicAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).DeletePublicAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/DeletePublicAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).DeletePublicAlias(ctx, req.(*DeletePublicAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_CreatePrivateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).CreatePrivateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/CreatePrivateAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).CreatePrivateAlias(ctx, req.(*CreatePrivateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetPrivateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetPrivateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetPrivateAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetPrivateAlias(ctx, req.(*GetPrivateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetPrivateAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetPrivateAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetPrivateAliases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetPrivateAliases(ctx, req.(*GetPrivateAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_UpdatePrivateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrivateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).UpdatePrivateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/UpdatePrivateAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).UpdatePrivateAlias(ctx, req.(*UpdatePrivateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_DeletePrivateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrivateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).DeletePrivateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/DeletePrivateAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).DeletePrivateAlias(ctx, req.(*DeletePrivateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterpartyMetadataService_GetOtherAccountMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOtherAccountMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterpartyMetadataServiceServer).GetOtherAccountMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterpartymetadata.CounterpartyMetadataService/GetOtherAccountMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterpartyMetadataServiceServer).GetOtherAccountMetadata(ctx, req.(*GetOtherAccountMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CounterpartyMetadataService_ServiceDesc is the grpc.ServiceDesc for CounterpartyMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CounterpartyMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "counterpartymetadata.CounterpartyMetadataService",
	HandlerType: (*CounterpartyMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCorporateLocation",
			Handler:    _CounterpartyMetadataService_CreateCorporateLocation_Handler,
		},
		{
			MethodName: "GetCorporateLocation",
			Handler:    _CounterpartyMetadataService_GetCorporateLocation_Handler,
		},
		{
			MethodName: "GetCorporateLocations",
			Handler:    _CounterpartyMetadataService_GetCorporateLocations_Handler,
		},
		{
			MethodName: "UpdateCorporateLocation",
			Handler:    _CounterpartyMetadataService_UpdateCorporateLocation_Handler,
		},
		{
			MethodName: "DeleteCorporateLocation",
			Handler:    _CounterpartyMetadataService_DeleteCorporateLocation_Handler,
		},
		{
			MethodName: "CreateMoreInfo",
			Handler:    _CounterpartyMetadataService_CreateMoreInfo_Handler,
		},
		{
			MethodName: "GetMoreInfo",
			Handler:    _CounterpartyMetadataService_GetMoreInfo_Handler,
		},
		{
			MethodName: "GetMoreInfos",
			Handler:    _CounterpartyMetadataService_GetMoreInfos_Handler,
		},
		{
			MethodName: "UpdateMoreInfo",
			Handler:    _CounterpartyMetadataService_UpdateMoreInfo_Handler,
		},
		{
			MethodName: "DeleteMoreInfo",
			Handler:    _CounterpartyMetadataService_DeleteMoreInfo_Handler,
		},
		{
			MethodName: "CreateOpenCorporatesURL",
			Handler:    _CounterpartyMetadataService_CreateOpenCorporatesURL_Handler,
		},
		{
			MethodName: "GetOpenCorporatesURL",
			Handler:    _CounterpartyMetadataService_GetOpenCorporatesURL_Handler,
		},
		{
			MethodName: "GetOpenCorporatesURLs",
			Handler:    _CounterpartyMetadataService_GetOpenCorporatesURLs_Handler,
		},
		{
			MethodName: "UpdateOpenCorporatesURL",
			Handler:    _CounterpartyMetadataService_UpdateOpenCorporatesURL_Handler,
		},
		{
			MethodName: "DeleteOpenCorporatesURL",
			Handler:    _CounterpartyMetadataService_DeleteOpenCorporatesURL_Handler,
		},
		{
			MethodName: "CreateURL",
			Handler:    _CounterpartyMetadataService_CreateURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _CounterpartyMetadataService_GetURL_Handler,
		},
		{
			MethodName: "GetURLs",
			Handler:    _CounterpartyMetadataService_GetURLs_Handler,
		},
		{
			MethodName: "UpdateURL",
			Handler:    _CounterpartyMetadataService_UpdateURL_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _CounterpartyMetadataService_DeleteURL_Handler,
		},
		{
			MethodName: "CreateImageURL",
			Handler:    _CounterpartyMetadataService_CreateImageURL_Handler,
		},
		{
			MethodName: "GetImageURL",
			Handler:    _CounterpartyMetadataService_GetImageURL_Handler,
		},
		{
			MethodName: "GetImageURLs",
			Handler:    _CounterpartyMetadataService_GetImageURLs_Handler,
		},
		{
			MethodName: "UpdateImageURL",
			Handler:    _CounterpartyMetadataService_UpdateImageURL_Handler,
		},
		{
			MethodName: "DeleteImageURL",
			Handler:    _CounterpartyMetadataService_DeleteImageURL_Handler,
		},
		{
			MethodName: "CreatePhysicalLocation",
			Handler:    _CounterpartyMetadataService_CreatePhysicalLocation_Handler,
		},
		{
			MethodName: "GetPhysicalLocation",
			Handler:    _CounterpartyMetadataService_GetPhysicalLocation_Handler,
		},
		{
			MethodName: "GetPhysicalLocations",
			Handler:    _CounterpartyMetadataService_GetPhysicalLocations_Handler,
		},
		{
			MethodName: "UpdatePhysicalLocation",
			Handler:    _CounterpartyMetadataService_UpdatePhysicalLocation_Handler,
		},
		{
			MethodName: "DeletePhysicalLocation",
			Handler:    _CounterpartyMetadataService_DeletePhysicalLocation_Handler,
		},
		{
			MethodName: "CreatePublicAlias",
			Handler:    _CounterpartyMetadataService_CreatePublicAlias_Handler,
		},
		{
			MethodName: "GetPublicAlias",
			Handler:    _CounterpartyMetadataService_GetPublicAlias_Handler,
		},
		{
			MethodName: "GetPublicAliases",
			Handler:    _CounterpartyMetadataService_GetPublicAliases_Handler,
		},
		{
			MethodName: "UpdatePublicAlias",
			Handler:    _CounterpartyMetadataService_UpdatePublicAlias_Handler,
		},
		{
			MethodName: "DeletePublicAlias",
			Handler:    _CounterpartyMetadataService_DeletePublicAlias_Handler,
		},
		{
			MethodName: "CreatePrivateAlias",
			Handler:    _CounterpartyMetadataService_CreatePrivateAlias_Handler,
		},
		{
			MethodName: "GetPrivateAlias",
			Handler:    _CounterpartyMetadataService_GetPrivateAlias_Handler,
		},
		{
			MethodName: "GetPrivateAliases",
			Handler:    _CounterpartyMetadataService_GetPrivateAliases_Handler,
		},
		{
			MethodName: "UpdatePrivateAlias",
			Handler:    _CounterpartyMetadataService_UpdatePrivateAlias_Handler,
		},
		{
			MethodName: "DeletePrivateAlias",
			Handler:    _CounterpartyMetadataService_DeletePrivateAlias_Handler,
		},
		{
			MethodName: "GetOtherAccountMetadata",
			Handler:    _CounterpartyMetadataService_GetOtherAccountMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/counterpartymetadata/all.proto",
}
