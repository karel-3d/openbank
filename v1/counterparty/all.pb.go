// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: github.com/openbank/openbank/v1/counterparty/all.proto

package counterparty

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	types "github.com/openbank/openbank/v1/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Entity type defines the type of counterparty
type TransactionRequestType int32

const (
	TransactionRequestType_UnknownTransactionRequestType TransactionRequestType = 0
	// Counter party type
	TransactionRequestType_COUNTERPARTY TransactionRequestType = 1
	// TransactionRequestType_SEPA transaction type
	TransactionRequestType_SEPA TransactionRequestType = 2
)

// Enum value maps for TransactionRequestType.
var (
	TransactionRequestType_name = map[int32]string{
		0: "UnknownTransactionRequestType",
		1: "COUNTERPARTY",
		2: "SEPA",
	}
	TransactionRequestType_value = map[string]int32{
		"UnknownTransactionRequestType": 0,
		"COUNTERPARTY":                  1,
		"SEPA":                          2,
	}
)

func (x TransactionRequestType) Enum() *TransactionRequestType {
	p := new(TransactionRequestType)
	*p = x
	return p
}

func (x TransactionRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_enumTypes[0].Descriptor()
}

func (TransactionRequestType) Type() protoreflect.EnumType {
	return &file_github_com_openbank_openbank_v1_counterparty_all_proto_enumTypes[0]
}

func (x TransactionRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionRequestType.Descriptor instead.
func (TransactionRequestType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{0}
}

// Structure of counter part
type CounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human readable name (e.g. John Bravo)
	Name string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	// The description of the about counter party
	Description string `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	// Account routing schme such as AccountId or AccountNumber or any   strings
	OtherAccountRoutingScheme string `protobuf:"bytes,3,opt,name=OtherAccountRoutingScheme,json=other_account_routing_scheme,proto3" json:"other_account_routing_scheme,omitempty"`
	// Account routing address is a valid account identifier
	OtherAccountRoutingAddress string `protobuf:"bytes,4,opt,name=OtherAccountRoutingAddress,json=other_account_routing_address,proto3" json:"other_account_routing_address,omitempty"`
	//  Account secondary routing address such as IBan
	OtherAccountSecondaryRoutingScheme string `protobuf:"bytes,5,opt,name=OtherAccountSecondaryRoutingScheme,json=other_account_secondary_routing_scheme,proto3" json:"other_account_secondary_routing_scheme,omitempty"`
	// IBan it should be unique for each counterparty.
	OtherAccountSecondaryRoutingAddress string `protobuf:"bytes,6,opt,name=OtherAccountSecondaryRoutingAddress,json=other_account_secondary_routing_address,proto3" json:"other_account_secondary_routing_address,omitempty"`
	// Bank routing scheme such as bankId or bankCode or any   strings
	OtherBankRoutingScheme string `protobuf:"bytes,7,opt,name=OtherBankRoutingScheme,json=other_bank_routing_scheme,proto3" json:"other_bank_routing_scheme,omitempty"`
	// Bank routing address such as eg: testsandbox, must be valid sandbox bankIds
	OtherBankRoutingAddress string `protobuf:"bytes,8,opt,name=OtherBankRoutingAddress,json=other_bank_routing_address,proto3" json:"other_bank_routing_address,omitempty"`
	// Branch routing scheme such as branchId or any other strings
	OtherBranchRoutingScheme string `protobuf:"bytes,9,opt,name=OtherBranchRoutingScheme,json=other_branch_routing_scheme,proto3" json:"other_branch_routing_scheme,omitempty"`
	// Branch routing address like branch-id-765 or you can leave it empty
	OtherBranchRoutingAddress string `protobuf:"bytes,10,opt,name=OtherBranchRoutingAddress,json=other_branch_routing_address,proto3" json:"other_branch_routing_address,omitempty"`
	// Must be set to true in order to send payments to this counterparty
	IsBeneficiary bool `protobuf:"varint,11,opt,name=IsBeneficiary,json=is_beneficiary,proto3" json:"is_beneficiary,omitempty"`
	// It support list of key-value, you can add it to the counterarty.
	Bespoke []*Bespoke `protobuf:"bytes,12,rep,name=Bespoke,json=bespoke,proto3" json:"bespoke,omitempty"`
	// Metadata about the counter party
	Metadata *Metadata `protobuf:"bytes,13,opt,name=Metadata,json=metadata,proto3" json:"metadata,omitempty"`
}

func (x *CounterParty) Reset() {
	*x = CounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterParty) ProtoMessage() {}

func (x *CounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterParty.ProtoReflect.Descriptor instead.
func (*CounterParty) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{0}
}

func (x *CounterParty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CounterParty) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CounterParty) GetOtherAccountRoutingScheme() string {
	if x != nil {
		return x.OtherAccountRoutingScheme
	}
	return ""
}

func (x *CounterParty) GetOtherAccountRoutingAddress() string {
	if x != nil {
		return x.OtherAccountRoutingAddress
	}
	return ""
}

func (x *CounterParty) GetOtherAccountSecondaryRoutingScheme() string {
	if x != nil {
		return x.OtherAccountSecondaryRoutingScheme
	}
	return ""
}

func (x *CounterParty) GetOtherAccountSecondaryRoutingAddress() string {
	if x != nil {
		return x.OtherAccountSecondaryRoutingAddress
	}
	return ""
}

func (x *CounterParty) GetOtherBankRoutingScheme() string {
	if x != nil {
		return x.OtherBankRoutingScheme
	}
	return ""
}

func (x *CounterParty) GetOtherBankRoutingAddress() string {
	if x != nil {
		return x.OtherBankRoutingAddress
	}
	return ""
}

func (x *CounterParty) GetOtherBranchRoutingScheme() string {
	if x != nil {
		return x.OtherBranchRoutingScheme
	}
	return ""
}

func (x *CounterParty) GetOtherBranchRoutingAddress() string {
	if x != nil {
		return x.OtherBranchRoutingAddress
	}
	return ""
}

func (x *CounterParty) GetIsBeneficiary() bool {
	if x != nil {
		return x.IsBeneficiary
	}
	return false
}

func (x *CounterParty) GetBespoke() []*Bespoke {
	if x != nil {
		return x.Bespoke
	}
	return nil
}

func (x *CounterParty) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Structure of Bespoke
type Bespoke struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// any info-key you want to add to this counerparty
	Key string `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"key,omitempty"`
	// any info-value you want to add to this counerparty
	Value string `protobuf:"bytes,2,opt,name=Value,json=value,proto3" json:"value,omitempty"`
}

func (x *Bespoke) Reset() {
	*x = Bespoke{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bespoke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bespoke) ProtoMessage() {}

func (x *Bespoke) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bespoke.ProtoReflect.Descriptor instead.
func (*Bespoke) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{1}
}

func (x *Bespoke) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Bespoke) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Structure of Metadata
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicAlias       string          `protobuf:"bytes,1,opt,name=PublicAlias,json=public_alias,proto3" json:"public_alias,omitempty"`
	MoreInfo          string          `protobuf:"bytes,2,opt,name=MoreInfo,json=more_info,proto3" json:"more_info,omitempty"`
	URL               string          `protobuf:"bytes,3,opt,name=URL,json=url,proto3" json:"url,omitempty"`
	ImageURL          string          `protobuf:"bytes,4,opt,name=ImageURL,json=image_url,proto3" json:"image_url,omitempty"`
	OpenCorporatesURL string          `protobuf:"bytes,5,opt,name=OpenCorporatesURL,json=open_corporates_url,proto3" json:"open_corporates_url,omitempty"`
	CorporateLocation *types.Location `protobuf:"bytes,6,opt,name=CorporateLocation,json=corporate_location,proto3" json:"corporate_location,omitempty"`
	PhysicalLocation  *types.Location `protobuf:"bytes,7,opt,name=PhysicalLocation,json=physical_location,proto3" json:"physical_location,omitempty"`
	PrivateAlias      string          `protobuf:"bytes,8,opt,name=PrivateAlias,json=private_alias,proto3" json:"private_alias,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetPublicAlias() string {
	if x != nil {
		return x.PublicAlias
	}
	return ""
}

func (x *Metadata) GetMoreInfo() string {
	if x != nil {
		return x.MoreInfo
	}
	return ""
}

func (x *Metadata) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *Metadata) GetImageURL() string {
	if x != nil {
		return x.ImageURL
	}
	return ""
}

func (x *Metadata) GetOpenCorporatesURL() string {
	if x != nil {
		return x.OpenCorporatesURL
	}
	return ""
}

func (x *Metadata) GetCorporateLocation() *types.Location {
	if x != nil {
		return x.CorporateLocation
	}
	return nil
}

func (x *Metadata) GetPhysicalLocation() *types.Location {
	if x != nil {
		return x.PhysicalLocation
	}
	return nil
}

func (x *Metadata) GetPrivateAlias() string {
	if x != nil {
		return x.PrivateAlias
	}
	return ""
}

// CreateCounterPartyRequest is a request mesasge to create counterparty
type CreateCounterPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                string     `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	Description                         string     `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	OtherAccountRoutingScheme           string     `protobuf:"bytes,3,opt,name=OtherAccountRoutingScheme,json=other_account_routing_scheme,proto3" json:"other_account_routing_scheme,omitempty"`
	OtherAccountRoutingAddress          string     `protobuf:"bytes,4,opt,name=OtherAccountRoutingAddress,json=other_account_routing_address,proto3" json:"other_account_routing_address,omitempty"`
	OtherAccountSecondaryRoutingScheme  string     `protobuf:"bytes,5,opt,name=OtherAccountSecondaryRoutingScheme,json=other_account_secondary_routing_scheme,proto3" json:"other_account_secondary_routing_scheme,omitempty"`
	OtherAccountSecondaryRoutingAddress string     `protobuf:"bytes,6,opt,name=OtherAccountSecondaryRoutingAddress,json=other_account_secondary_routing_address,proto3" json:"other_account_secondary_routing_address,omitempty"`
	OtherBankRoutingScheme              string     `protobuf:"bytes,7,opt,name=OtherBankRoutingScheme,json=other_bank_routing_scheme,proto3" json:"other_bank_routing_scheme,omitempty"`
	OtherBankRoutingAddress             string     `protobuf:"bytes,8,opt,name=OtherBankRoutingAddress,json=other_bank_routing_address,proto3" json:"other_bank_routing_address,omitempty"`
	OtherBranchRoutingScheme            string     `protobuf:"bytes,9,opt,name=OtherBranchRoutingScheme,json=other_branch_routing_scheme,proto3" json:"other_branch_routing_scheme,omitempty"`
	OtherBranchRoutingAddress           string     `protobuf:"bytes,10,opt,name=OtherBranchRoutingAddress,json=other_branch_routing_address,proto3" json:"other_branch_routing_address,omitempty"`
	IsBeneficiary                       bool       `protobuf:"varint,11,opt,name=IsBeneficiary,json=is_beneficiary,proto3" json:"is_beneficiary,omitempty"`
	Bespoke                             []*Bespoke `protobuf:"bytes,12,rep,name=Bespoke,json=bespoke,proto3" json:"bespoke,omitempty"`
}

func (x *CreateCounterPartyRequest) Reset() {
	*x = CreateCounterPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCounterPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCounterPartyRequest) ProtoMessage() {}

func (x *CreateCounterPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCounterPartyRequest.ProtoReflect.Descriptor instead.
func (*CreateCounterPartyRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCounterPartyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetOtherAccountRoutingScheme() string {
	if x != nil {
		return x.OtherAccountRoutingScheme
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetOtherAccountRoutingAddress() string {
	if x != nil {
		return x.OtherAccountRoutingAddress
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetOtherAccountSecondaryRoutingScheme() string {
	if x != nil {
		return x.OtherAccountSecondaryRoutingScheme
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetOtherAccountSecondaryRoutingAddress() string {
	if x != nil {
		return x.OtherAccountSecondaryRoutingAddress
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetOtherBankRoutingScheme() string {
	if x != nil {
		return x.OtherBankRoutingScheme
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetOtherBankRoutingAddress() string {
	if x != nil {
		return x.OtherBankRoutingAddress
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetOtherBranchRoutingScheme() string {
	if x != nil {
		return x.OtherBranchRoutingScheme
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetOtherBranchRoutingAddress() string {
	if x != nil {
		return x.OtherBranchRoutingAddress
	}
	return ""
}

func (x *CreateCounterPartyRequest) GetIsBeneficiary() bool {
	if x != nil {
		return x.IsBeneficiary
	}
	return false
}

func (x *CreateCounterPartyRequest) GetBespoke() []*Bespoke {
	if x != nil {
		return x.Bespoke
	}
	return nil
}

// CreateCounterPartyResponse is a response message for create counter party request
type CreateCounterPartyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterParty     *CounterParty   `protobuf:"bytes,1,opt,name=CounterParty,json=counter_party,proto3" json:"counter_party,omitempty"`
	Metadata         *Metadata       `protobuf:"bytes,2,opt,name=Metadata,json=metadata,proto3" json:"metadata,omitempty"`
	PhysicalLocation *types.Location `protobuf:"bytes,3,opt,name=PhysicalLocation,json=physical_location,proto3" json:"physical_location,omitempty"`
	PrivateAlias     string          `protobuf:"bytes,4,opt,name=PrivateAlias,json=private_alias,proto3" json:"private_alias,omitempty"`
}

func (x *CreateCounterPartyResponse) Reset() {
	*x = CreateCounterPartyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCounterPartyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCounterPartyResponse) ProtoMessage() {}

func (x *CreateCounterPartyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCounterPartyResponse.ProtoReflect.Descriptor instead.
func (*CreateCounterPartyResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCounterPartyResponse) GetCounterParty() *CounterParty {
	if x != nil {
		return x.CounterParty
	}
	return nil
}

func (x *CreateCounterPartyResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateCounterPartyResponse) GetPhysicalLocation() *types.Location {
	if x != nil {
		return x.PhysicalLocation
	}
	return nil
}

func (x *CreateCounterPartyResponse) GetPrivateAlias() string {
	if x != nil {
		return x.PrivateAlias
	}
	return ""
}

// GetCounterPartyRequest is the request envelope to get an counter party by its identifier.
type GetCounterPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *GetCounterPartyRequest) Reset() {
	*x = GetCounterPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCounterPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterPartyRequest) ProtoMessage() {}

func (x *GetCounterPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterPartyRequest.ProtoReflect.Descriptor instead.
func (*GetCounterPartyRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{5}
}

func (x *GetCounterPartyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// GetCounterPartiesRequest is the request envelope to get a list of filtered counter parties.
type GetCounterPartiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AfterID is a cursor for pagination.
	AfterID string `protobuf:"bytes,1,opt,name=AfterID,json=after_id,proto3" json:"after_id,omitempty"`
	// Limit is maximum number of results to return.
	Limit int32 `protobuf:"varint,2,opt,name=Limit,json=limit,proto3" json:"limit,omitempty"`
}

func (x *GetCounterPartiesRequest) Reset() {
	*x = GetCounterPartiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCounterPartiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterPartiesRequest) ProtoMessage() {}

func (x *GetCounterPartiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterPartiesRequest.ProtoReflect.Descriptor instead.
func (*GetCounterPartiesRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{6}
}

func (x *GetCounterPartiesRequest) GetAfterID() string {
	if x != nil {
		return x.AfterID
	}
	return ""
}

func (x *GetCounterPartiesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// GetCounterPartiesResponse wraps the list of counter parties.
type GetCounterPartiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result is the paginated query result.
	Result []*CounterParty `protobuf:"bytes,1,rep,name=Result,json=result,proto3" json:"result,omitempty"`
}

func (x *GetCounterPartiesResponse) Reset() {
	*x = GetCounterPartiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCounterPartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterPartiesResponse) ProtoMessage() {}

func (x *GetCounterPartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterPartiesResponse.ProtoReflect.Descriptor instead.
func (*GetCounterPartiesResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{7}
}

func (x *GetCounterPartiesResponse) GetResult() []*CounterParty {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetOtherAccountByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID      string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	OtherAccountID string `protobuf:"bytes,2,opt,name=OtherAccountID,json=other_account_id,proto3" json:"other_account_id,omitempty"`
}

func (x *GetOtherAccountByIDRequest) Reset() {
	*x = GetOtherAccountByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOtherAccountByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOtherAccountByIDRequest) ProtoMessage() {}

func (x *GetOtherAccountByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOtherAccountByIDRequest.ProtoReflect.Descriptor instead.
func (*GetOtherAccountByIDRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{8}
}

func (x *GetOtherAccountByIDRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *GetOtherAccountByIDRequest) GetOtherAccountID() string {
	if x != nil {
		return x.OtherAccountID
	}
	return ""
}

type GetOtherAccountByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherAccount *OtherAccount `protobuf:"bytes,1,opt,name=OtherAccount,json=other_account,proto3" json:"other_account,omitempty"`
}

func (x *GetOtherAccountByIDResponse) Reset() {
	*x = GetOtherAccountByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOtherAccountByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOtherAccountByIDResponse) ProtoMessage() {}

func (x *GetOtherAccountByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOtherAccountByIDResponse.ProtoReflect.Descriptor instead.
func (*GetOtherAccountByIDResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{9}
}

func (x *GetOtherAccountByIDResponse) GetOtherAccount() *OtherAccount {
	if x != nil {
		return x.OtherAccount
	}
	return nil
}

type OtherAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string             `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Holder          *Holder            `protobuf:"bytes,2,opt,name=Holder,json=holder,proto3" json:"holder,omitempty"`
	BankRouting     *BankRouting       `protobuf:"bytes,3,opt,name=BankRouting,json=bank_routing,proto3" json:"bank_routing,omitempty"`
	AccountRoutings []*AccountRoutings `protobuf:"bytes,4,rep,name=AccountRoutings,json=account_routings,proto3" json:"account_routings,omitempty"`
	Metadata        *Metadata          `protobuf:"bytes,5,opt,name=Metadata,json=metadata,proto3" json:"metadata,omitempty"`
}

func (x *OtherAccount) Reset() {
	*x = OtherAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherAccount) ProtoMessage() {}

func (x *OtherAccount) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherAccount.ProtoReflect.Descriptor instead.
func (*OtherAccount) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{10}
}

func (x *OtherAccount) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OtherAccount) GetHolder() *Holder {
	if x != nil {
		return x.Holder
	}
	return nil
}

func (x *OtherAccount) GetBankRouting() *BankRouting {
	if x != nil {
		return x.BankRouting
	}
	return nil
}

func (x *OtherAccount) GetAccountRoutings() []*AccountRoutings {
	if x != nil {
		return x.AccountRoutings
	}
	return nil
}

func (x *OtherAccount) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetOtherAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *GetOtherAccountsRequest) Reset() {
	*x = GetOtherAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOtherAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOtherAccountsRequest) ProtoMessage() {}

func (x *GetOtherAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOtherAccountsRequest.ProtoReflect.Descriptor instead.
func (*GetOtherAccountsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{11}
}

func (x *GetOtherAccountsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type GetOtherAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherAccounts []*OtherAccount `protobuf:"bytes,1,rep,name=OtherAccounts,json=other_accounts,proto3" json:"other_accounts,omitempty"`
}

func (x *GetOtherAccountsResponse) Reset() {
	*x = GetOtherAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOtherAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOtherAccountsResponse) ProtoMessage() {}

func (x *GetOtherAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOtherAccountsResponse.ProtoReflect.Descriptor instead.
func (*GetOtherAccountsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{12}
}

func (x *GetOtherAccountsResponse) GetOtherAccounts() []*OtherAccount {
	if x != nil {
		return x.OtherAccounts
	}
	return nil
}

type Holder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	IsAlias bool   `protobuf:"varint,2,opt,name=IsAlias,json=is_alias,proto3" json:"is_alias,omitempty"`
}

func (x *Holder) Reset() {
	*x = Holder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holder) ProtoMessage() {}

func (x *Holder) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holder.ProtoReflect.Descriptor instead.
func (*Holder) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{13}
}

func (x *Holder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Holder) GetIsAlias() bool {
	if x != nil {
		return x.IsAlias
	}
	return false
}

type BankRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme  string `protobuf:"bytes,1,opt,name=Scheme,json=scheme,proto3" json:"scheme,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=Address,json=address,proto3" json:"address,omitempty"`
}

func (x *BankRouting) Reset() {
	*x = BankRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankRouting) ProtoMessage() {}

func (x *BankRouting) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankRouting.ProtoReflect.Descriptor instead.
func (*BankRouting) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{14}
}

func (x *BankRouting) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *BankRouting) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type AccountRoutings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme  string `protobuf:"bytes,1,opt,name=Scheme,json=scheme,proto3" json:"scheme,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=Address,json=address,proto3" json:"address,omitempty"`
}

func (x *AccountRoutings) Reset() {
	*x = AccountRoutings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRoutings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRoutings) ProtoMessage() {}

func (x *AccountRoutings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRoutings.ProtoReflect.Descriptor instead.
func (*AccountRoutings) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{15}
}

func (x *AccountRoutings) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *AccountRoutings) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=DisplayName,json=display_name,proto3" json:"display_name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP(), []int{16}
}

func (x *User) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *User) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

var File_github_com_openbank_openbank_v1_counterparty_all_proto protoreflect.FileDescriptor

var file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x61,
	0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x07, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x19, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x1c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x1a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x1d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x5e, 0x0a, 0x22, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x26, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x60, 0x0a, 0x23, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x27, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x45, 0x0a, 0x16, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x17, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x49, 0x0a, 0x18, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x1b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x19, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1c, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x49, 0x73,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x69,
	0x73, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x3b, 0x0a,
	0x07, 0x42, 0x65, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x42, 0x65,
	0x73, 0x70, 0x6f, 0x6b, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x62, 0x65, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x51, 0x0a, 0x07, 0x42, 0x65, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x12, 0x1c, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb4, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2d, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x12, 0x3a, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x4a, 0x0a,
	0x11, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x10, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe7, 0x06, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x19, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x1a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x5e, 0x0a, 0x22, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x26, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x23, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x27, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x16, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x42,
	0x61, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x17, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x18, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x1b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x19, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x1c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31,
	0x0a, 0x0d, 0x49, 0x73, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0e, 0x69, 0x73, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x12, 0x3b, 0x0a, 0x07, 0x42, 0x65, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x42, 0x65, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x65, 0x73, 0x70, 0x6f, 0x6b, 0x65, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xac, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x48, 0x0a, 0x10, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x6b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x07, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x63, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x85, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x72, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xcc, 0x02, 0x0a, 0x0c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x54, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x71,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x57, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x49,
	0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x5f, 0x0a, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x63, 0x0a, 0x0f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22,
	0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x59, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x2a, 0x67, 0x0a, 0x16, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x1d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x53, 0x45, 0x50, 0x41, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00,
	0x1a, 0x02, 0x18, 0x00, 0x32, 0xce, 0x11, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf5, 0x02, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92,
	0x41, 0xe2, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x1a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x66, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x5f,
	0x0a, 0x23, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x50, 0x61, 0x72, 0x74, 0x79, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x38, 0x0a, 0x36, 0x1a, 0x34, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62,
	0x34, 0x0a, 0x32, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x28, 0x0a, 0x26, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x28, 0x00, 0x30, 0x00, 0x12, 0xbc, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0xe2, 0x02, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0xbb, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20,
	0x61, 0x6e, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x1a, 0x53, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x2e, 0x4a, 0x53, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4c, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x2a,
	0x0a, 0x28, 0x1a, 0x26, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30,
	0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x33, 0x0a,
	0x31, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x27, 0x0a, 0x25, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x72, 0x65,
	0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x28,
	0x00, 0x30, 0x00, 0x12, 0x9f, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x02, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0x90, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x56, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x30, 0x20, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x60, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x60, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4a, 0x60, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x59, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x62, 0x33, 0x0a, 0x31, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x27,
	0x0a, 0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62,
	0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xf7, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x28, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x86, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xbd, 0x02, 0x0a,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x69, 0x64, 0x1a, 0x3b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x28, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x29, 0x20, 0x62, 0x79, 0x20,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x64,
	0x4a, 0x62, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5b, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x39, 0x0a, 0x37, 0x1a, 0x35, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x33, 0x0a, 0x31, 0x0a, 0x06, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x12, 0x27, 0x0a, 0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12,
	0xde, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf6, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xbe, 0x02,
	0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x69, 0x64, 0x1a, 0x3e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x20, 0x28, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x29, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x69, 0x64, 0x4a, 0x5f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x36,
	0x0a, 0x34, 0x1a, 0x32, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x47, 0x65,
	0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a,
	0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x33, 0x0a, 0x31, 0x0a, 0x06, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x27, 0x0a, 0x25, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x28, 0x00, 0x30, 0x00,
	0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0xa7, 0x07, 0x0a, 0x17, 0x74, 0x6f, 0x2e, 0x62, 0x6e, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x3b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8,
	0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0xb6, 0x06, 0x0a, 0x03, 0x32, 0x2e, 0x30, 0x12, 0x50,
	0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x20, 0x41, 0x50,
	0x49, 0x12, 0x36, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x43, 0x52, 0x55, 0x44,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30,
	0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x5f, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x58,
	0x0a, 0x56, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62, 0x6f, 0x64, 0x79,
	0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x4c, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x45, 0x0a, 0x43, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x6f, 0x65,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x49, 0x0a,
	0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12,
	0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x46, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x3f, 0x0a, 0x3d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x64, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69,
	0x64, 0x65, 0x2e, 0x5a, 0xb9, 0x02, 0x0a, 0xb6, 0x02, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x12, 0xab, 0x02, 0x08, 0x03, 0x12, 0x87, 0x01, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x28, 0x04, 0x32, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x09, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x85, 0x01, 0x0a, 0x3f, 0x0a, 0x25, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x16, 0x56, 0x69, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x42, 0x0a, 0x26, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x18, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescOnce sync.Once
	file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescData = file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDesc
)

func file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescGZIP() []byte {
	file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescOnce.Do(func() {
		file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescData)
	})
	return file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDescData
}

var (
	file_github_com_openbank_openbank_v1_counterparty_all_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
	file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 17)
	file_github_com_openbank_openbank_v1_counterparty_all_proto_goTypes   = []interface{}{
		(TransactionRequestType)(0),         // 0: counterparty.TransactionRequestType
		(*CounterParty)(nil),                // 1: counterparty.CounterParty
		(*Bespoke)(nil),                     // 2: counterparty.Bespoke
		(*Metadata)(nil),                    // 3: counterparty.Metadata
		(*CreateCounterPartyRequest)(nil),   // 4: counterparty.CreateCounterPartyRequest
		(*CreateCounterPartyResponse)(nil),  // 5: counterparty.CreateCounterPartyResponse
		(*GetCounterPartyRequest)(nil),      // 6: counterparty.GetCounterPartyRequest
		(*GetCounterPartiesRequest)(nil),    // 7: counterparty.GetCounterPartiesRequest
		(*GetCounterPartiesResponse)(nil),   // 8: counterparty.GetCounterPartiesResponse
		(*GetOtherAccountByIDRequest)(nil),  // 9: counterparty.GetOtherAccountByIDRequest
		(*GetOtherAccountByIDResponse)(nil), // 10: counterparty.GetOtherAccountByIDResponse
		(*OtherAccount)(nil),                // 11: counterparty.OtherAccount
		(*GetOtherAccountsRequest)(nil),     // 12: counterparty.GetOtherAccountsRequest
		(*GetOtherAccountsResponse)(nil),    // 13: counterparty.GetOtherAccountsResponse
		(*Holder)(nil),                      // 14: counterparty.Holder
		(*BankRouting)(nil),                 // 15: counterparty.BankRouting
		(*AccountRoutings)(nil),             // 16: counterparty.AccountRoutings
		(*User)(nil),                        // 17: counterparty.User
		(*types.Location)(nil),              // 18: types.Location
	}
)

var file_github_com_openbank_openbank_v1_counterparty_all_proto_depIdxs = []int32{
	2,  // 0: counterparty.CounterParty.Bespoke:type_name -> counterparty.Bespoke
	3,  // 1: counterparty.CounterParty.Metadata:type_name -> counterparty.Metadata
	18, // 2: counterparty.Metadata.CorporateLocation:type_name -> types.Location
	18, // 3: counterparty.Metadata.PhysicalLocation:type_name -> types.Location
	2,  // 4: counterparty.CreateCounterPartyRequest.Bespoke:type_name -> counterparty.Bespoke
	1,  // 5: counterparty.CreateCounterPartyResponse.CounterParty:type_name -> counterparty.CounterParty
	3,  // 6: counterparty.CreateCounterPartyResponse.Metadata:type_name -> counterparty.Metadata
	18, // 7: counterparty.CreateCounterPartyResponse.PhysicalLocation:type_name -> types.Location
	1,  // 8: counterparty.GetCounterPartiesResponse.Result:type_name -> counterparty.CounterParty
	11, // 9: counterparty.GetOtherAccountByIDResponse.OtherAccount:type_name -> counterparty.OtherAccount
	14, // 10: counterparty.OtherAccount.Holder:type_name -> counterparty.Holder
	15, // 11: counterparty.OtherAccount.BankRouting:type_name -> counterparty.BankRouting
	16, // 12: counterparty.OtherAccount.AccountRoutings:type_name -> counterparty.AccountRoutings
	3,  // 13: counterparty.OtherAccount.Metadata:type_name -> counterparty.Metadata
	11, // 14: counterparty.GetOtherAccountsResponse.OtherAccounts:type_name -> counterparty.OtherAccount
	4,  // 15: counterparty.CounterPartyService.CreateCounterParty:input_type -> counterparty.CreateCounterPartyRequest
	6,  // 16: counterparty.CounterPartyService.GetCounterParty:input_type -> counterparty.GetCounterPartyRequest
	7,  // 17: counterparty.CounterPartyService.GetCounterParties:input_type -> counterparty.GetCounterPartiesRequest
	9,  // 18: counterparty.CounterPartyService.GetOtherAccountByID:input_type -> counterparty.GetOtherAccountByIDRequest
	12, // 19: counterparty.CounterPartyService.GetOtherAccounts:input_type -> counterparty.GetOtherAccountsRequest
	5,  // 20: counterparty.CounterPartyService.CreateCounterParty:output_type -> counterparty.CreateCounterPartyResponse
	1,  // 21: counterparty.CounterPartyService.GetCounterParty:output_type -> counterparty.CounterParty
	8,  // 22: counterparty.CounterPartyService.GetCounterParties:output_type -> counterparty.GetCounterPartiesResponse
	10, // 23: counterparty.CounterPartyService.GetOtherAccountByID:output_type -> counterparty.GetOtherAccountByIDResponse
	13, // 24: counterparty.CounterPartyService.GetOtherAccounts:output_type -> counterparty.GetOtherAccountsResponse
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_github_com_openbank_openbank_v1_counterparty_all_proto_init() }
func file_github_com_openbank_openbank_v1_counterparty_all_proto_init() {
	if File_github_com_openbank_openbank_v1_counterparty_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bespoke); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCounterPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCounterPartyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCounterPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCounterPartiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCounterPartiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOtherAccountByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOtherAccountByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOtherAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOtherAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRoutings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openbank_openbank_v1_counterparty_all_proto_goTypes,
		DependencyIndexes: file_github_com_openbank_openbank_v1_counterparty_all_proto_depIdxs,
		EnumInfos:         file_github_com_openbank_openbank_v1_counterparty_all_proto_enumTypes,
		MessageInfos:      file_github_com_openbank_openbank_v1_counterparty_all_proto_msgTypes,
	}.Build()
	File_github_com_openbank_openbank_v1_counterparty_all_proto = out.File
	file_github_com_openbank_openbank_v1_counterparty_all_proto_rawDesc = nil
	file_github_com_openbank_openbank_v1_counterparty_all_proto_goTypes = nil
	file_github_com_openbank_openbank_v1_counterparty_all_proto_depIdxs = nil
}
