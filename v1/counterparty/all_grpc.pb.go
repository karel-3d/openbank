// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package counterparty

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CounterPartyServiceClient is the client API for CounterPartyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterPartyServiceClient interface {
	// CreateCounterParty creates a new counter party
	CreateCounterParty(ctx context.Context, in *CreateCounterPartyRequest, opts ...grpc.CallOption) (*CreateCounterPartyResponse, error)
	// GetCounterPart retrieves the details of an counter party, selected by its id.
	GetCounterParty(ctx context.Context, in *GetCounterPartyRequest, opts ...grpc.CallOption) (*CounterParty, error)
	// GetCounterParties returns a list containing up to 20 counter parties.
	GetCounterParties(ctx context.Context, in *GetCounterPartiesRequest, opts ...grpc.CallOption) (*GetCounterPartiesResponse, error)
	// GetOtherAccountByID returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID
	GetOtherAccountByID(ctx context.Context, in *GetOtherAccountByIDRequest, opts ...grpc.CallOption) (*GetOtherAccountByIDResponse, error)
	// GetOtherAccounts returns data about all the other Account that has shared at least one transaction with ACCOUNT_ID
	GetOtherAccounts(ctx context.Context, in *GetOtherAccountsRequest, opts ...grpc.CallOption) (*GetOtherAccountsResponse, error)
}

type counterPartyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterPartyServiceClient(cc grpc.ClientConnInterface) CounterPartyServiceClient {
	return &counterPartyServiceClient{cc}
}

func (c *counterPartyServiceClient) CreateCounterParty(ctx context.Context, in *CreateCounterPartyRequest, opts ...grpc.CallOption) (*CreateCounterPartyResponse, error) {
	out := new(CreateCounterPartyResponse)
	err := c.cc.Invoke(ctx, "/counterparty.CounterPartyService/CreateCounterParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterPartyServiceClient) GetCounterParty(ctx context.Context, in *GetCounterPartyRequest, opts ...grpc.CallOption) (*CounterParty, error) {
	out := new(CounterParty)
	err := c.cc.Invoke(ctx, "/counterparty.CounterPartyService/GetCounterParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterPartyServiceClient) GetCounterParties(ctx context.Context, in *GetCounterPartiesRequest, opts ...grpc.CallOption) (*GetCounterPartiesResponse, error) {
	out := new(GetCounterPartiesResponse)
	err := c.cc.Invoke(ctx, "/counterparty.CounterPartyService/GetCounterParties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterPartyServiceClient) GetOtherAccountByID(ctx context.Context, in *GetOtherAccountByIDRequest, opts ...grpc.CallOption) (*GetOtherAccountByIDResponse, error) {
	out := new(GetOtherAccountByIDResponse)
	err := c.cc.Invoke(ctx, "/counterparty.CounterPartyService/GetOtherAccountByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterPartyServiceClient) GetOtherAccounts(ctx context.Context, in *GetOtherAccountsRequest, opts ...grpc.CallOption) (*GetOtherAccountsResponse, error) {
	out := new(GetOtherAccountsResponse)
	err := c.cc.Invoke(ctx, "/counterparty.CounterPartyService/GetOtherAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterPartyServiceServer is the server API for CounterPartyService service.
// All implementations must embed UnimplementedCounterPartyServiceServer
// for forward compatibility
type CounterPartyServiceServer interface {
	// CreateCounterParty creates a new counter party
	CreateCounterParty(context.Context, *CreateCounterPartyRequest) (*CreateCounterPartyResponse, error)
	// GetCounterPart retrieves the details of an counter party, selected by its id.
	GetCounterParty(context.Context, *GetCounterPartyRequest) (*CounterParty, error)
	// GetCounterParties returns a list containing up to 20 counter parties.
	GetCounterParties(context.Context, *GetCounterPartiesRequest) (*GetCounterPartiesResponse, error)
	// GetOtherAccountByID returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID
	GetOtherAccountByID(context.Context, *GetOtherAccountByIDRequest) (*GetOtherAccountByIDResponse, error)
	// GetOtherAccounts returns data about all the other Account that has shared at least one transaction with ACCOUNT_ID
	GetOtherAccounts(context.Context, *GetOtherAccountsRequest) (*GetOtherAccountsResponse, error)
	mustEmbedUnimplementedCounterPartyServiceServer()
}

// UnimplementedCounterPartyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCounterPartyServiceServer struct{}

func (UnimplementedCounterPartyServiceServer) CreateCounterParty(context.Context, *CreateCounterPartyRequest) (*CreateCounterPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCounterParty not implemented")
}

func (UnimplementedCounterPartyServiceServer) GetCounterParty(context.Context, *GetCounterPartyRequest) (*CounterParty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterParty not implemented")
}

func (UnimplementedCounterPartyServiceServer) GetCounterParties(context.Context, *GetCounterPartiesRequest) (*GetCounterPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterParties not implemented")
}

func (UnimplementedCounterPartyServiceServer) GetOtherAccountByID(context.Context, *GetOtherAccountByIDRequest) (*GetOtherAccountByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOtherAccountByID not implemented")
}

func (UnimplementedCounterPartyServiceServer) GetOtherAccounts(context.Context, *GetOtherAccountsRequest) (*GetOtherAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOtherAccounts not implemented")
}
func (UnimplementedCounterPartyServiceServer) mustEmbedUnimplementedCounterPartyServiceServer() {}

// UnsafeCounterPartyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterPartyServiceServer will
// result in compilation errors.
type UnsafeCounterPartyServiceServer interface {
	mustEmbedUnimplementedCounterPartyServiceServer()
}

func RegisterCounterPartyServiceServer(s grpc.ServiceRegistrar, srv CounterPartyServiceServer) {
	s.RegisterService(&CounterPartyService_ServiceDesc, srv)
}

func _CounterPartyService_CreateCounterParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCounterPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterPartyServiceServer).CreateCounterParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterparty.CounterPartyService/CreateCounterParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterPartyServiceServer).CreateCounterParty(ctx, req.(*CreateCounterPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterPartyService_GetCounterParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCounterPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterPartyServiceServer).GetCounterParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterparty.CounterPartyService/GetCounterParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterPartyServiceServer).GetCounterParty(ctx, req.(*GetCounterPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterPartyService_GetCounterParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCounterPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterPartyServiceServer).GetCounterParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterparty.CounterPartyService/GetCounterParties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterPartyServiceServer).GetCounterParties(ctx, req.(*GetCounterPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterPartyService_GetOtherAccountByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOtherAccountByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterPartyServiceServer).GetOtherAccountByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterparty.CounterPartyService/GetOtherAccountByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterPartyServiceServer).GetOtherAccountByID(ctx, req.(*GetOtherAccountByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterPartyService_GetOtherAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOtherAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterPartyServiceServer).GetOtherAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counterparty.CounterPartyService/GetOtherAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterPartyServiceServer).GetOtherAccounts(ctx, req.(*GetOtherAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CounterPartyService_ServiceDesc is the grpc.ServiceDesc for CounterPartyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CounterPartyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "counterparty.CounterPartyService",
	HandlerType: (*CounterPartyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCounterParty",
			Handler:    _CounterPartyService_CreateCounterParty_Handler,
		},
		{
			MethodName: "GetCounterParty",
			Handler:    _CounterPartyService_GetCounterParty_Handler,
		},
		{
			MethodName: "GetCounterParties",
			Handler:    _CounterPartyService_GetCounterParties_Handler,
		},
		{
			MethodName: "GetOtherAccountByID",
			Handler:    _CounterPartyService_GetOtherAccountByID_Handler,
		},
		{
			MethodName: "GetOtherAccounts",
			Handler:    _CounterPartyService_GetOtherAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/counterparty/all.proto",
}
