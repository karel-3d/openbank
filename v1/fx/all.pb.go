// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: github.com/openbank/openbank/v1/fx/all.proto

package fx

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FX holds all the details about a foreign exchange object.
type FX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BankID is an identifier for the bank on this fx transaction.
	BankID string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	// FromCurrencyCode is the currency to transfer from.
	FromCurrencyCode string `protobuf:"bytes,2,opt,name=FromCurrencyCode,json=from_currency_code,proto3" json:"from_currency_code,omitempty"`
	// ToCurrencyCode is the currency that we are transferring to.
	ToCurrencyCode string `protobuf:"bytes,3,opt,name=ToCurrencyCode,json=to_currency_code,proto3" json:"to_currency_code,omitempty"`
	// Rate is the exchange rate of the foreign exchange.
	Rate string `protobuf:"bytes,4,opt,name=Rate,json=rate,proto3" json:"rate,omitempty"`
	// InverseRate is the inverse of the exchange rate of the foreign exchange.
	InverseRate string `protobuf:"bytes,5,opt,name=InverseRate,json=inverse_rate,proto3" json:"inverse_rate,omitempty"`
	// EffectiveDate is the effective date of the foreign exchange quote.
	EffectiveDate string `protobuf:"bytes,6,opt,name=EffectiveDate,json=effective_date,proto3" json:"effective_date,omitempty"`
}

func (x *FX) Reset() {
	*x = FX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FX) ProtoMessage() {}

func (x *FX) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FX.ProtoReflect.Descriptor instead.
func (*FX) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_fx_all_proto_rawDescGZIP(), []int{0}
}

func (x *FX) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *FX) GetFromCurrencyCode() string {
	if x != nil {
		return x.FromCurrencyCode
	}
	return ""
}

func (x *FX) GetToCurrencyCode() string {
	if x != nil {
		return x.ToCurrencyCode
	}
	return ""
}

func (x *FX) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *FX) GetInverseRate() string {
	if x != nil {
		return x.InverseRate
	}
	return ""
}

func (x *FX) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

// CreateFXRequest is a request envelope to create a foreign exchange quote.
type CreateFXRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FX is the foreign exchange information to create.
	FX *FX `protobuf:"bytes,1,opt,name=FX,json=fx,proto3" json:"fx,omitempty"`
}

func (x *CreateFXRequest) Reset() {
	*x = CreateFXRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFXRequest) ProtoMessage() {}

func (x *CreateFXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFXRequest.ProtoReflect.Descriptor instead.
func (*CreateFXRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_fx_all_proto_rawDescGZIP(), []int{1}
}

func (x *CreateFXRequest) GetFX() *FX {
	if x != nil {
		return x.FX
	}
	return nil
}

// UpdateFXRequest is a request envelope to update a foreign exchange quote.
type UpdateFXRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FX is the foreign exchange information to update.
	FX *FX `protobuf:"bytes,1,opt,name=FX,json=fx,proto3" json:"fx,omitempty"`
}

func (x *UpdateFXRequest) Reset() {
	*x = UpdateFXRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFXRequest) ProtoMessage() {}

func (x *UpdateFXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFXRequest.ProtoReflect.Descriptor instead.
func (*UpdateFXRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_fx_all_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateFXRequest) GetFX() *FX {
	if x != nil {
		return x.FX
	}
	return nil
}

// GetCurrentFXRateRequest is a request envelope to get a foreign exchange rate.
type GetCurrentFXRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FromCurrencyCode is the currency to transfer from.
	FromCurrencyCode string `protobuf:"bytes,1,opt,name=FromCurrencyCode,json=from_currency_code,proto3" json:"from_currency_code,omitempty"`
	// ToCurrencyCode is the currency that we are transferring to.
	ToCurrencyCode string `protobuf:"bytes,2,opt,name=ToCurrencyCode,json=to_currency_code,proto3" json:"to_currency_code,omitempty"`
}

func (x *GetCurrentFXRateRequest) Reset() {
	*x = GetCurrentFXRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentFXRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentFXRateRequest) ProtoMessage() {}

func (x *GetCurrentFXRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentFXRateRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentFXRateRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_fx_all_proto_rawDescGZIP(), []int{3}
}

func (x *GetCurrentFXRateRequest) GetFromCurrencyCode() string {
	if x != nil {
		return x.FromCurrencyCode
	}
	return ""
}

func (x *GetCurrentFXRateRequest) GetToCurrencyCode() string {
	if x != nil {
		return x.ToCurrencyCode
	}
	return ""
}

var File_github_com_openbank_openbank_v1_fx_all_proto protoreflect.FileDescriptor

var file_github_com_openbank_openbank_v1_fx_all_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x78, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x66, 0x78, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x02,
	0x0a, 0x02, 0x46, 0x58, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x49, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x3d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x58, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x46, 0x58, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x66, 0x78, 0x2e, 0x46, 0x58, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x66, 0x78, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x3d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x58, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x46, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x66, 0x78, 0x2e, 0x46, 0x58, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x66, 0x78, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x58, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x10, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x54, 0x6f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x6f, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0xb0, 0x07, 0x0a, 0x09, 0x46, 0x58, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x83, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x58, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x66, 0x78, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x58, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x66, 0x78, 0x2e, 0x46, 0x58, 0x22, 0xc5, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x02, 0x46, 0x58, 0x12, 0x2d,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74,
	0x77, 0x6f, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x35, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x4a, 0x3f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x38, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x16, 0x0a,
	0x14, 0x1a, 0x12, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x66, 0x78, 0x46, 0x58, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x29, 0x0a, 0x27, 0x0a, 0x06, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x12, 0x1d, 0x0a, 0x1b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x66, 0x78, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x78, 0x2f, 0x7b, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x7b, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0x99, 0x02, 0x0a, 0x08, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x58, 0x12, 0x13, 0x2e, 0x66, 0x78, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x66, 0x78,
	0x2e, 0x46, 0x58, 0x22, 0xeb, 0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd0, 0x01,
	0x0a, 0x02, 0x46, 0x58, 0x12, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x1a, 0x34, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x6e, 0x65, 0x77, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x69, 0x74, 0x2e, 0x4a, 0x47, 0x0a, 0x03, 0x32,
	0x30, 0x31, 0x12, 0x40, 0x0a, 0x26, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x16, 0x0a, 0x14,
	0x1a, 0x12, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x66, 0x78, 0x46, 0x58, 0x62, 0x2a, 0x0a, 0x28, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0x1e, 0x0a, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x66, 0x78, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x3a, 0x01, 0x2a, 0x22, 0x06, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x78, 0x28, 0x00, 0x30, 0x00, 0x12, 0xfb, 0x01, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x58, 0x12, 0x13, 0x2e, 0x66, 0x78, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x58,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0xbf, 0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x01, 0x0a, 0x02, 0x46, 0x58,
	0x12, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x1a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x4a, 0x2f, 0x0a, 0x03, 0x32, 0x30, 0x34, 0x12, 0x28, 0x0a, 0x26, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x20, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x62, 0x2a, 0x0a, 0x28, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0x1e, 0x0a, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x66, 0x78, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x3a, 0x01, 0x2a, 0x1a, 0x06, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x78, 0x28, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0xda, 0x06, 0x0a, 0x0d, 0x74, 0x6f, 0x2e,
	0x62, 0x6e, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x78, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x25,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x78, 0x3b, 0x66, 0x78, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01,
	0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0x87, 0x06, 0x0a, 0x03,
	0x32, 0x2e, 0x30, 0x12, 0x56, 0x0a, 0x06, 0x46, 0x58, 0x20, 0x41, 0x50, 0x49, 0x12, 0x45, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x20, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x2a, 0x01, 0x02, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x52, 0x5f, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x56, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x73, 0x20, 0x6d,
	0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x64,
	0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x4c, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x45, 0x0a, 0x43, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x49, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65,
	0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x52, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x46, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x3f, 0x0a,
	0x3d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61,
	0x6e, 0x20, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x5a, 0x84,
	0x02, 0x0a, 0x81, 0x02, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0xf6, 0x01, 0x08,
	0x03, 0x12, 0x7c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x78, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x20,
	0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x28,
	0x04, 0x32, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x09, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x5d, 0x0a, 0x2b, 0x0a, 0x1b, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f,
	0x66, 0x78, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0c, 0x56, 0x69, 0x65, 0x77, 0x20, 0x66, 0x78,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x2e, 0x0a, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x66, 0x78, 0x2e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x66, 0x78,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openbank_openbank_v1_fx_all_proto_rawDescOnce sync.Once
	file_github_com_openbank_openbank_v1_fx_all_proto_rawDescData = file_github_com_openbank_openbank_v1_fx_all_proto_rawDesc
)

func file_github_com_openbank_openbank_v1_fx_all_proto_rawDescGZIP() []byte {
	file_github_com_openbank_openbank_v1_fx_all_proto_rawDescOnce.Do(func() {
		file_github_com_openbank_openbank_v1_fx_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openbank_openbank_v1_fx_all_proto_rawDescData)
	})
	return file_github_com_openbank_openbank_v1_fx_all_proto_rawDescData
}

var (
	file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
	file_github_com_openbank_openbank_v1_fx_all_proto_goTypes  = []interface{}{
		(*FX)(nil),                      // 0: fx.FX
		(*CreateFXRequest)(nil),         // 1: fx.CreateFXRequest
		(*UpdateFXRequest)(nil),         // 2: fx.UpdateFXRequest
		(*GetCurrentFXRateRequest)(nil), // 3: fx.GetCurrentFXRateRequest
		(*emptypb.Empty)(nil),           // 4: google.protobuf.Empty
	}
)

var file_github_com_openbank_openbank_v1_fx_all_proto_depIdxs = []int32{
	0, // 0: fx.CreateFXRequest.FX:type_name -> fx.FX
	0, // 1: fx.UpdateFXRequest.FX:type_name -> fx.FX
	3, // 2: fx.FXService.GetCurrentFXRate:input_type -> fx.GetCurrentFXRateRequest
	1, // 3: fx.FXService.CreateFX:input_type -> fx.CreateFXRequest
	2, // 4: fx.FXService.UpdateFX:input_type -> fx.UpdateFXRequest
	0, // 5: fx.FXService.GetCurrentFXRate:output_type -> fx.FX
	0, // 6: fx.FXService.CreateFX:output_type -> fx.FX
	4, // 7: fx.FXService.UpdateFX:output_type -> google.protobuf.Empty
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_github_com_openbank_openbank_v1_fx_all_proto_init() }
func file_github_com_openbank_openbank_v1_fx_all_proto_init() {
	if File_github_com_openbank_openbank_v1_fx_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFXRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFXRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentFXRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openbank_openbank_v1_fx_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openbank_openbank_v1_fx_all_proto_goTypes,
		DependencyIndexes: file_github_com_openbank_openbank_v1_fx_all_proto_depIdxs,
		MessageInfos:      file_github_com_openbank_openbank_v1_fx_all_proto_msgTypes,
	}.Build()
	File_github_com_openbank_openbank_v1_fx_all_proto = out.File
	file_github_com_openbank_openbank_v1_fx_all_proto_rawDesc = nil
	file_github_com_openbank_openbank_v1_fx_all_proto_goTypes = nil
	file_github_com_openbank_openbank_v1_fx_all_proto_depIdxs = nil
}
