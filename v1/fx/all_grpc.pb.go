// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fx

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FXServiceClient is the client API for FXService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FXServiceClient interface {
	// GetCurrentFXRate retrieves the current foreign exchange rate of the two
	// specified currency code.
	GetCurrentFXRate(ctx context.Context, in *GetCurrentFXRateRequest, opts ...grpc.CallOption) (*FX, error)
	// CreateFX creates a new foreign exchange quote.
	CreateFX(ctx context.Context, in *CreateFXRequest, opts ...grpc.CallOption) (*FX, error)
	// UpdateFX updates a foreign exchange quote.
	UpdateFX(ctx context.Context, in *UpdateFXRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fXServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFXServiceClient(cc grpc.ClientConnInterface) FXServiceClient {
	return &fXServiceClient{cc}
}

func (c *fXServiceClient) GetCurrentFXRate(ctx context.Context, in *GetCurrentFXRateRequest, opts ...grpc.CallOption) (*FX, error) {
	out := new(FX)
	err := c.cc.Invoke(ctx, "/fx.FXService/GetCurrentFXRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fXServiceClient) CreateFX(ctx context.Context, in *CreateFXRequest, opts ...grpc.CallOption) (*FX, error) {
	out := new(FX)
	err := c.cc.Invoke(ctx, "/fx.FXService/CreateFX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fXServiceClient) UpdateFX(ctx context.Context, in *UpdateFXRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fx.FXService/UpdateFX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FXServiceServer is the server API for FXService service.
// All implementations must embed UnimplementedFXServiceServer
// for forward compatibility
type FXServiceServer interface {
	// GetCurrentFXRate retrieves the current foreign exchange rate of the two
	// specified currency code.
	GetCurrentFXRate(context.Context, *GetCurrentFXRateRequest) (*FX, error)
	// CreateFX creates a new foreign exchange quote.
	CreateFX(context.Context, *CreateFXRequest) (*FX, error)
	// UpdateFX updates a foreign exchange quote.
	UpdateFX(context.Context, *UpdateFXRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFXServiceServer()
}

// UnimplementedFXServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFXServiceServer struct{}

func (UnimplementedFXServiceServer) GetCurrentFXRate(context.Context, *GetCurrentFXRateRequest) (*FX, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentFXRate not implemented")
}

func (UnimplementedFXServiceServer) CreateFX(context.Context, *CreateFXRequest) (*FX, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFX not implemented")
}

func (UnimplementedFXServiceServer) UpdateFX(context.Context, *UpdateFXRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFX not implemented")
}
func (UnimplementedFXServiceServer) mustEmbedUnimplementedFXServiceServer() {}

// UnsafeFXServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FXServiceServer will
// result in compilation errors.
type UnsafeFXServiceServer interface {
	mustEmbedUnimplementedFXServiceServer()
}

func RegisterFXServiceServer(s grpc.ServiceRegistrar, srv FXServiceServer) {
	s.RegisterService(&FXService_ServiceDesc, srv)
}

func _FXService_GetCurrentFXRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentFXRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FXServiceServer).GetCurrentFXRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.FXService/GetCurrentFXRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FXServiceServer).GetCurrentFXRate(ctx, req.(*GetCurrentFXRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FXService_CreateFX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FXServiceServer).CreateFX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.FXService/CreateFX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FXServiceServer).CreateFX(ctx, req.(*CreateFXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FXService_UpdateFX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FXServiceServer).UpdateFX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.FXService/UpdateFX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FXServiceServer).UpdateFX(ctx, req.(*UpdateFXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FXService_ServiceDesc is the grpc.ServiceDesc for FXService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FXService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fx.FXService",
	HandlerType: (*FXServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentFXRate",
			Handler:    _FXService_GetCurrentFXRate_Handler,
		},
		{
			MethodName: "CreateFX",
			Handler:    _FXService_CreateFX_Handler,
		},
		{
			MethodName: "UpdateFX",
			Handler:    _FXService_UpdateFX_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/fx/all.proto",
}
