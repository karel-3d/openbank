// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: github.com/openbank/openbank/v1/bank/all.proto

package bank

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BankRouting holds all the details about a bank routing.
type BankRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scheme is the routing scheme.
	Scheme string `protobuf:"bytes,1,opt,name=Scheme,json=scheme,proto3" json:"scheme,omitempty"`
	// Address is the routing address.
	Address string `protobuf:"bytes,2,opt,name=Address,json=address,proto3" json:"address,omitempty"`
}

func (x *BankRouting) Reset() {
	*x = BankRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankRouting) ProtoMessage() {}

func (x *BankRouting) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankRouting.ProtoReflect.Descriptor instead.
func (*BankRouting) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP(), []int{0}
}

func (x *BankRouting) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *BankRouting) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Bank holds all details about a bank.
type Bank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is an identifier for the bank.
	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	// FullName is the full name of the bank.
	FullName string `protobuf:"bytes,2,opt,name=FullName,json=full_name,proto3" json:"full_name,omitempty"`
	// ShortName is the short name of the bank.
	ShortName string `protobuf:"bytes,3,opt,name=ShortName,json=short_name,proto3" json:"short_name,omitempty"`
	// LogoURL is the url for the bank's logo.
	LogoURL string `protobuf:"bytes,4,opt,name=LogoURL,json=logo_url,proto3" json:"logo_url,omitempty"`
	// WebsiteURL is the url for the bank's website.
	WebsiteURL string `protobuf:"bytes,5,opt,name=WebsiteURL,json=website_url,proto3" json:"website_url,omitempty"`
	// SwiftBIC is the SWIFT bank identifier code.
	SwiftBIC string `protobuf:"bytes,6,opt,name=SwiftBIC,json=swift_bic,proto3" json:"swift_bic,omitempty"`
	// NationalIdentifier is the national identifier code.
	NationalIdentifier string `protobuf:"bytes,7,opt,name=NationalIdentifier,json=national_identifier,proto3" json:"national_identifier,omitempty"`
	// BankRouting is the routing information for the bank.
	BankRouting *BankRouting `protobuf:"bytes,8,opt,name=BankRouting,json=bank_routing,proto3" json:"bank_routing,omitempty"`
}

func (x *Bank) Reset() {
	*x = Bank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bank) ProtoMessage() {}

func (x *Bank) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bank.ProtoReflect.Descriptor instead.
func (*Bank) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP(), []int{1}
}

func (x *Bank) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Bank) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Bank) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Bank) GetLogoURL() string {
	if x != nil {
		return x.LogoURL
	}
	return ""
}

func (x *Bank) GetWebsiteURL() string {
	if x != nil {
		return x.WebsiteURL
	}
	return ""
}

func (x *Bank) GetSwiftBIC() string {
	if x != nil {
		return x.SwiftBIC
	}
	return ""
}

func (x *Bank) GetNationalIdentifier() string {
	if x != nil {
		return x.NationalIdentifier
	}
	return ""
}

func (x *Bank) GetBankRouting() *BankRouting {
	if x != nil {
		return x.BankRouting
	}
	return nil
}

// TransactionType is holds the information about transaction type at a bank.
type TransactionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is an identifier for the transaction type.
	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	// BankID is an identifier for the bank for the particular transaction type.
	BankID string `protobuf:"bytes,2,opt,name=BankID,json=bankId,proto3" json:"bankId,omitempty"`
	// ShortCode is the short code of the transaction type.
	ShortCode string `protobuf:"bytes,3,opt,name=ShortCode,json=short_code,proto3" json:"short_code,omitempty"`
	// Summary is the summary of the trasnaction type.
	Summary string `protobuf:"bytes,4,opt,name=Summary,json=summary,proto3" json:"summary,omitempty"`
	// Description is the description of the transaction type.
	Description string `protobuf:"bytes,5,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	// Currency is the currency of the transaction type.
	Currency string `protobuf:"bytes,6,opt,name=Currency,json=currency,proto3" json:"currency,omitempty"`
	// Amount is the amount of the transaction type.
	Amount string `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *TransactionType) Reset() {
	*x = TransactionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionType) ProtoMessage() {}

func (x *TransactionType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionType.ProtoReflect.Descriptor instead.
func (*TransactionType) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionType) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TransactionType) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *TransactionType) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *TransactionType) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *TransactionType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TransactionType) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TransactionType) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// CreateBankRequest is a request envelope to create a bank.
type CreateBankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bank is the related information about a bank.
	Bank *Bank `protobuf:"bytes,1,opt,name=Bank,json=bank,proto3" json:"bank,omitempty"`
}

func (x *CreateBankRequest) Reset() {
	*x = CreateBankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBankRequest) ProtoMessage() {}

func (x *CreateBankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBankRequest.ProtoReflect.Descriptor instead.
func (*CreateBankRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBankRequest) GetBank() *Bank {
	if x != nil {
		return x.Bank
	}
	return nil
}

// UpdateBankRequest is the request envelope to update a bank.
type UpdateBankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bank is the related information about a bank.
	Bank *Bank `protobuf:"bytes,1,opt,name=Bank,json=bank,proto3" json:"bank,omitempty"`
}

func (x *UpdateBankRequest) Reset() {
	*x = UpdateBankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBankRequest) ProtoMessage() {}

func (x *UpdateBankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBankRequest.ProtoReflect.Descriptor instead.
func (*UpdateBankRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateBankRequest) GetBank() *Bank {
	if x != nil {
		return x.Bank
	}
	return nil
}

// DeleteBankRequest is the request envelope to delete a bank.
type DeleteBankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the bank unique identifier.
	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBankRequest) Reset() {
	*x = DeleteBankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBankRequest) ProtoMessage() {}

func (x *DeleteBankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBankRequest.ProtoReflect.Descriptor instead.
func (*DeleteBankRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteBankRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// GetBankRequest is the request envelope to get the bank data.
type GetBankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the bank unique identifier.
	ID string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	// FullName is the full name of the bank.
	FullName string `protobuf:"bytes,2,opt,name=FullName,json=full_name,proto3" json:"full_name,omitempty"`
	// ShortName is the short name of the bank.
	ShortName string `protobuf:"bytes,3,opt,name=ShortName,json=short_name,proto3" json:"short_name,omitempty"`
	// WebsiteURL is the url for the bank's website.
	WebsiteURL string `protobuf:"bytes,4,opt,name=WebsiteURL,json=website_url,proto3" json:"website_url,omitempty"`
}

func (x *GetBankRequest) Reset() {
	*x = GetBankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankRequest) ProtoMessage() {}

func (x *GetBankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankRequest.ProtoReflect.Descriptor instead.
func (*GetBankRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP(), []int{6}
}

func (x *GetBankRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetBankRequest) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *GetBankRequest) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *GetBankRequest) GetWebsiteURL() string {
	if x != nil {
		return x.WebsiteURL
	}
	return ""
}

// GetBanksResponse is the response for GetBanks
type GetBanksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Banks is the list of the banks.
	Banks []*Bank `protobuf:"bytes,1,rep,name=Banks,json=banks,proto3" json:"banks,omitempty"`
}

func (x *GetBanksResponse) Reset() {
	*x = GetBanksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanksResponse) ProtoMessage() {}

func (x *GetBanksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanksResponse.ProtoReflect.Descriptor instead.
func (*GetBanksResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP(), []int{7}
}

func (x *GetBanksResponse) GetBanks() []*Bank {
	if x != nil {
		return x.Banks
	}
	return nil
}

// CreateTransactionTypeAtBankRequest is the request envelope to create a new
// transaction type.
type CreateTransactionTypeAtBankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TransactionType is the related information about a transaction type at a bank.
	TransactionType *TransactionType `protobuf:"bytes,1,opt,name=TransactionType,json=transaction_type,proto3" json:"transaction_type,omitempty"`
}

func (x *CreateTransactionTypeAtBankRequest) Reset() {
	*x = CreateTransactionTypeAtBankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionTypeAtBankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionTypeAtBankRequest) ProtoMessage() {}

func (x *CreateTransactionTypeAtBankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionTypeAtBankRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionTypeAtBankRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTransactionTypeAtBankRequest) GetTransactionType() *TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return nil
}

var File_github_com_openbank_openbank_v1_bank_all_proto protoreflect.FileDescriptor

var file_github_com_openbank_openbank_v1_bank_all_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x5f, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x22, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xfa, 0x02, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x4c,
	0x6f, 0x67, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x0a, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x12,
	0x27, 0x0a, 0x08, 0x53, 0x77, 0x69, 0x66, 0x74, 0x42, 0x49, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73,
	0x77, 0x69, 0x66, 0x74, 0x5f, 0x62, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x12, 0x4e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0xa4, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x62, 0x61, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x47, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x42,
	0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x47, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x6b,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x37, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55,
	0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x7a, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32,
	0xd7, 0x0e, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xd1, 0x02, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x2e, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x22, 0x9f, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xff, 0x01, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x19, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x37, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6b,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x49, 0x44, 0x4a, 0x43, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3c, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x1a, 0x0a,
	0x18, 0x1a, 0x16, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x6e, 0x6b, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34,
	0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x2b, 0x0a, 0x29,
	0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1f, 0x0a, 0x1d, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d, 0x28,
	0x00, 0x30, 0x00, 0x12, 0xe4, 0x02, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa5, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8a, 0x02, 0x0a, 0x04, 0x42,
	0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6b,
	0x73, 0x1a, 0x33, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2e, 0x4a, 0x4f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x48, 0x0a,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x26, 0x0a, 0x24, 0x1a, 0x22, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a,
	0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x2b, 0x0a, 0x29, 0x0a, 0x06,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1f, 0x0a, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x30, 0x00, 0x12, 0x82, 0x02, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x17, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x22, 0xca,
	0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xac, 0x01, 0x0a, 0x04, 0x42, 0x61, 0x6e,
	0x6b, 0x12, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x62, 0x61, 0x6e, 0x6b,
	0x1a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20,
	0x62, 0x61, 0x6e, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x69, 0x74, 0x73, 0x20, 0x69, 0x64, 0x2e, 0x4a, 0x3f, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12,
	0x38, 0x0a, 0x1a, 0x42, 0x61, 0x6e, 0x6b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x1a, 0x0a,
	0x18, 0x1a, 0x16, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x6e, 0x6b, 0x62, 0x2c, 0x0a, 0x2a, 0x0a, 0x06, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x20, 0x0a, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a,
	0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12,
	0xf8, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x17,
	0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x22, 0xc0, 0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa2, 0x01,
	0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x62, 0x61, 0x6e, 0x6b, 0x1a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x62, 0x61, 0x6e, 0x6b, 0x27, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x3f, 0x0a, 0x03, 0x32, 0x30, 0x34, 0x12, 0x38, 0x0a, 0x1a, 0x42, 0x61,
	0x6e, 0x6b, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x12, 0x1a, 0x0a, 0x18, 0x1a, 0x16, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x6e, 0x6b,
	0x42, 0x61, 0x6e, 0x6b, 0x62, 0x2c, 0x0a, 0x2a, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0x20, 0x0a, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x1a, 0x09, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xe6, 0x01, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x17, 0x2e, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa4, 0x01, 0x88, 0x02, 0x00,
	0x90, 0x02, 0x00, 0x92, 0x41, 0x84, 0x01, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x0d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x1a, 0x1a, 0x50, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4a, 0x23, 0x0a, 0x03, 0x32, 0x30, 0x34, 0x12,
	0x1c, 0x0a, 0x1a, 0x42, 0x61, 0x6e, 0x6b, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x62, 0x2c, 0x0a,
	0x2a, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x20, 0x0a, 0x1e, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f,
	0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x2a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x49, 0x44,
	0x7d, 0x28, 0x00, 0x12, 0x9e, 0x03, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x42,
	0x61, 0x6e, 0x6b, 0x12, 0x28, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x89,
	0x02, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x61, 0x74, 0x20, 0x61, 0x20, 0x62, 0x61, 0x6e, 0x6b,
	0x1a, 0x53, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65,
	0x20, 0x61, 0x74, 0x20, 0x61, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4a, 0x55, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x4e, 0x0a, 0x25,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x25, 0x0a, 0x23, 0x1a, 0x21, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x62, 0x2c, 0x0a, 0x2a,
	0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x20, 0x0a, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x28, 0x00, 0x30, 0x00, 0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0xe0, 0x06, 0x0a, 0x0f, 0x74, 0x6f,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x6e, 0x6b, 0x48, 0x01, 0x50,
	0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x3b, 0x62, 0x61, 0x6e, 0x6b, 0x80, 0x01, 0x00, 0x88,
	0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02,
	0x00, 0x92, 0x41, 0x87, 0x06, 0x0a, 0x03, 0x32, 0x2e, 0x30, 0x12, 0x4c, 0x0a, 0x08, 0x42, 0x61,
	0x6e, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x12, 0x39, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x61, 0x64,
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52,
	0x5f, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x58, 0x0a, 0x56, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x4c, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x45, 0x0a, 0x43, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27,
	0x73, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x52, 0x50,
	0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x49, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x52, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x52, 0x46, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x3f, 0x0a, 0x3d, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75,
	0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2e, 0x5a, 0x8e, 0x02, 0x0a, 0x8b,
	0x02, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x80, 0x02, 0x08, 0x03, 0x12, 0x7e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x54,
	0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x28, 0x04,
	0x32, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x09, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x0a, 0x2f, 0x0a, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x20, 0x62,
	0x61, 0x6e, 0x6b, 0x20, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x32, 0x0a, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x10, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openbank_openbank_v1_bank_all_proto_rawDescOnce sync.Once
	file_github_com_openbank_openbank_v1_bank_all_proto_rawDescData = file_github_com_openbank_openbank_v1_bank_all_proto_rawDesc
)

func file_github_com_openbank_openbank_v1_bank_all_proto_rawDescGZIP() []byte {
	file_github_com_openbank_openbank_v1_bank_all_proto_rawDescOnce.Do(func() {
		file_github_com_openbank_openbank_v1_bank_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openbank_openbank_v1_bank_all_proto_rawDescData)
	})
	return file_github_com_openbank_openbank_v1_bank_all_proto_rawDescData
}

var (
	file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
	file_github_com_openbank_openbank_v1_bank_all_proto_goTypes  = []interface{}{
		(*BankRouting)(nil),                        // 0: bank.BankRouting
		(*Bank)(nil),                               // 1: bank.Bank
		(*TransactionType)(nil),                    // 2: bank.TransactionType
		(*CreateBankRequest)(nil),                  // 3: bank.CreateBankRequest
		(*UpdateBankRequest)(nil),                  // 4: bank.UpdateBankRequest
		(*DeleteBankRequest)(nil),                  // 5: bank.DeleteBankRequest
		(*GetBankRequest)(nil),                     // 6: bank.GetBankRequest
		(*GetBanksResponse)(nil),                   // 7: bank.GetBanksResponse
		(*CreateTransactionTypeAtBankRequest)(nil), // 8: bank.CreateTransactionTypeAtBankRequest
		(*emptypb.Empty)(nil),                      // 9: google.protobuf.Empty
	}
)

var file_github_com_openbank_openbank_v1_bank_all_proto_depIdxs = []int32{
	0,  // 0: bank.Bank.BankRouting:type_name -> bank.BankRouting
	1,  // 1: bank.CreateBankRequest.Bank:type_name -> bank.Bank
	1,  // 2: bank.UpdateBankRequest.Bank:type_name -> bank.Bank
	1,  // 3: bank.GetBanksResponse.Banks:type_name -> bank.Bank
	2,  // 4: bank.CreateTransactionTypeAtBankRequest.TransactionType:type_name -> bank.TransactionType
	6,  // 5: bank.BankService.GetBank:input_type -> bank.GetBankRequest
	9,  // 6: bank.BankService.GetBanks:input_type -> google.protobuf.Empty
	3,  // 7: bank.BankService.CreateBank:input_type -> bank.CreateBankRequest
	4,  // 8: bank.BankService.UpdateBank:input_type -> bank.UpdateBankRequest
	5,  // 9: bank.BankService.DeleteBank:input_type -> bank.DeleteBankRequest
	8,  // 10: bank.BankService.CreateTranscationTypeAtBank:input_type -> bank.CreateTransactionTypeAtBankRequest
	1,  // 11: bank.BankService.GetBank:output_type -> bank.Bank
	7,  // 12: bank.BankService.GetBanks:output_type -> bank.GetBanksResponse
	1,  // 13: bank.BankService.CreateBank:output_type -> bank.Bank
	1,  // 14: bank.BankService.UpdateBank:output_type -> bank.Bank
	9,  // 15: bank.BankService.DeleteBank:output_type -> google.protobuf.Empty
	2,  // 16: bank.BankService.CreateTranscationTypeAtBank:output_type -> bank.TransactionType
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_github_com_openbank_openbank_v1_bank_all_proto_init() }
func file_github_com_openbank_openbank_v1_bank_all_proto_init() {
	if File_github_com_openbank_openbank_v1_bank_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionTypeAtBankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openbank_openbank_v1_bank_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openbank_openbank_v1_bank_all_proto_goTypes,
		DependencyIndexes: file_github_com_openbank_openbank_v1_bank_all_proto_depIdxs,
		MessageInfos:      file_github_com_openbank_openbank_v1_bank_all_proto_msgTypes,
	}.Build()
	File_github_com_openbank_openbank_v1_bank_all_proto = out.File
	file_github_com_openbank_openbank_v1_bank_all_proto_rawDesc = nil
	file_github_com_openbank_openbank_v1_bank_all_proto_goTypes = nil
	file_github_com_openbank_openbank_v1_bank_all_proto_depIdxs = nil
}
