// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transactions

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// GetTransaction retrieves the detail of a transaction, selected by its id.
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	// GetTransactions returns a list containing up to 20 transactions.
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	// GetTransactionsByAccount returns a list containing up to 20 transactions.
	GetTransactionsByAccount(ctx context.Context, in *GetTransactionsByAccountRequest, opts ...grpc.CallOption) (*GetTransactionsByAccountResponse, error)
	// CreateTransaction creates a new transaction and returns its id.
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// ApprovePayment approves a pending transaction.
	ApprovePayment(ctx context.Context, in *ApprovePaymentRequest, opts ...grpc.CallOption) (*ApprovePaymentResponse, error)
	// TFA does 2FA verification for an approved transaction.
	TFA(ctx context.Context, in *TFARequest, opts ...grpc.CallOption) (*TFAResponse, error)
	// ResendTFA re-sends the verification code for the transaction
	ResendTFA(ctx context.Context, in *ResendTFARequest, opts ...grpc.CallOption) (*ResendTFAResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionsByAccount(ctx context.Context, in *GetTransactionsByAccountRequest, opts ...grpc.CallOption) (*GetTransactionsByAccountResponse, error) {
	out := new(GetTransactionsByAccountResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/GetTransactionsByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ApprovePayment(ctx context.Context, in *ApprovePaymentRequest, opts ...grpc.CallOption) (*ApprovePaymentResponse, error) {
	out := new(ApprovePaymentResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/ApprovePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) TFA(ctx context.Context, in *TFARequest, opts ...grpc.CallOption) (*TFAResponse, error) {
	out := new(TFAResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/TFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ResendTFA(ctx context.Context, in *ResendTFARequest, opts ...grpc.CallOption) (*ResendTFAResponse, error) {
	out := new(ResendTFAResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/ResendTFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility
type TransactionServiceServer interface {
	// GetTransaction retrieves the detail of a transaction, selected by its id.
	GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error)
	// GetTransactions returns a list containing up to 20 transactions.
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	// GetTransactionsByAccount returns a list containing up to 20 transactions.
	GetTransactionsByAccount(context.Context, *GetTransactionsByAccountRequest) (*GetTransactionsByAccountResponse, error)
	// CreateTransaction creates a new transaction and returns its id.
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// ApprovePayment approves a pending transaction.
	ApprovePayment(context.Context, *ApprovePaymentRequest) (*ApprovePaymentResponse, error)
	// TFA does 2FA verification for an approved transaction.
	TFA(context.Context, *TFARequest) (*TFAResponse, error)
	// ResendTFA re-sends the verification code for the transaction
	ResendTFA(context.Context, *ResendTFARequest) (*ResendTFAResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}

func (UnimplementedTransactionServiceServer) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}

func (UnimplementedTransactionServiceServer) GetTransactionsByAccount(context.Context, *GetTransactionsByAccountRequest) (*GetTransactionsByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByAccount not implemented")
}

func (UnimplementedTransactionServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}

func (UnimplementedTransactionServiceServer) ApprovePayment(context.Context, *ApprovePaymentRequest) (*ApprovePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovePayment not implemented")
}

func (UnimplementedTransactionServiceServer) TFA(context.Context, *TFARequest) (*TFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TFA not implemented")
}

func (UnimplementedTransactionServiceServer) ResendTFA(context.Context, *ResendTFARequest) (*ResendTFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendTFA not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/GetTransactionsByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionsByAccount(ctx, req.(*GetTransactionsByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ApprovePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ApprovePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/ApprovePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ApprovePayment(ctx, req.(*ApprovePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_TFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).TFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/TFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).TFA(ctx, req.(*TFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ResendTFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendTFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ResendTFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/ResendTFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ResendTFA(ctx, req.(*ResendTFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactions.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransaction",
			Handler:    _TransactionService_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _TransactionService_GetTransactions_Handler,
		},
		{
			MethodName: "GetTransactionsByAccount",
			Handler:    _TransactionService_GetTransactionsByAccount_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionService_CreateTransaction_Handler,
		},
		{
			MethodName: "ApprovePayment",
			Handler:    _TransactionService_ApprovePayment_Handler,
		},
		{
			MethodName: "TFA",
			Handler:    _TransactionService_TFA_Handler,
		},
		{
			MethodName: "ResendTFA",
			Handler:    _TransactionService_ResendTFA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/transaction/all.proto",
}
