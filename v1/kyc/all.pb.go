// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: github.com/openbank/openbank/v1/kyc/all.proto

package kyc

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddKYCCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KYCCheckID     string                 `protobuf:"bytes,1,opt,name=KYCCheckID,json=kyc_check_id,proto3" json:"kyc_check_id,omitempty"`
	CustomerID     string                 `protobuf:"bytes,2,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	CustomerNumber string                 `protobuf:"bytes,3,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Date           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Date,json=date,proto3" json:"date,omitempty"`
	How            string                 `protobuf:"bytes,5,opt,name=How,json=how,proto3" json:"how,omitempty"`
	StaffUserID    string                 `protobuf:"bytes,6,opt,name=StaffUserID,json=staff_user_id,proto3" json:"staff_user_id,omitempty"`
	StaffName      string                 `protobuf:"bytes,7,opt,name=StaffName,json=staff_name,proto3" json:"staff_name,omitempty"`
	Satisfied      bool                   `protobuf:"varint,8,opt,name=Satisfied,json=satisfied,proto3" json:"satisfied,omitempty"`
	Comments       string                 `protobuf:"bytes,9,opt,name=Comments,json=comments,proto3" json:"comments,omitempty"`
}

func (x *AddKYCCheckRequest) Reset() {
	*x = AddKYCCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKYCCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKYCCheckRequest) ProtoMessage() {}

func (x *AddKYCCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKYCCheckRequest.ProtoReflect.Descriptor instead.
func (*AddKYCCheckRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{0}
}

func (x *AddKYCCheckRequest) GetKYCCheckID() string {
	if x != nil {
		return x.KYCCheckID
	}
	return ""
}

func (x *AddKYCCheckRequest) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *AddKYCCheckRequest) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *AddKYCCheckRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *AddKYCCheckRequest) GetHow() string {
	if x != nil {
		return x.How
	}
	return ""
}

func (x *AddKYCCheckRequest) GetStaffUserID() string {
	if x != nil {
		return x.StaffUserID
	}
	return ""
}

func (x *AddKYCCheckRequest) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *AddKYCCheckRequest) GetSatisfied() bool {
	if x != nil {
		return x.Satisfied
	}
	return false
}

func (x *AddKYCCheckRequest) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type AddKYCCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID         string                 `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	CustomerID     string                 `protobuf:"bytes,2,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	ID             string                 `protobuf:"bytes,3,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	CustomerNumber string                 `protobuf:"bytes,4,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Date           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Date,json=date,proto3" json:"date,omitempty"`
	How            string                 `protobuf:"bytes,6,opt,name=How,json=how,proto3" json:"how,omitempty"`
	StaffUserID    string                 `protobuf:"bytes,7,opt,name=StaffUserID,json=staff_user_id,proto3" json:"staff_user_id,omitempty"`
	StaffName      string                 `protobuf:"bytes,8,opt,name=StaffName,json=staff_name,proto3" json:"staff_name,omitempty"`
	Satisfied      bool                   `protobuf:"varint,9,opt,name=Satisfied,json=satisfied,proto3" json:"satisfied,omitempty"`
	Comments       string                 `protobuf:"bytes,10,opt,name=Comments,json=comments,proto3" json:"comments,omitempty"`
}

func (x *AddKYCCheckResponse) Reset() {
	*x = AddKYCCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKYCCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKYCCheckResponse) ProtoMessage() {}

func (x *AddKYCCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKYCCheckResponse.ProtoReflect.Descriptor instead.
func (*AddKYCCheckResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{1}
}

func (x *AddKYCCheckResponse) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *AddKYCCheckResponse) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *AddKYCCheckResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AddKYCCheckResponse) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *AddKYCCheckResponse) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *AddKYCCheckResponse) GetHow() string {
	if x != nil {
		return x.How
	}
	return ""
}

func (x *AddKYCCheckResponse) GetStaffUserID() string {
	if x != nil {
		return x.StaffUserID
	}
	return ""
}

func (x *AddKYCCheckResponse) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *AddKYCCheckResponse) GetSatisfied() bool {
	if x != nil {
		return x.Satisfied
	}
	return false
}

func (x *AddKYCCheckResponse) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type AddKYCDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KYCDocumentID  string                 `protobuf:"bytes,1,opt,name=KYCDocumentID,json=kyc_document_id,proto3" json:"kyc_document_id,omitempty"`
	CustomerID     string                 `protobuf:"bytes,2,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	CustomerNumber string                 `protobuf:"bytes,3,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Type           string                 `protobuf:"bytes,4,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Number         string                 `protobuf:"bytes,5,opt,name=Number,json=number,proto3" json:"number,omitempty"`
	IssueDate      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=IssueDate,json=issue_date,proto3" json:"issue_date,omitempty"`
	IssuePlace     string                 `protobuf:"bytes,7,opt,name=IssuePlace,json=issue_place,proto3" json:"issue_place,omitempty"`
	ExpiryDate     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ExpiryDate,json=expiry_date,proto3" json:"expiry_date,omitempty"`
}

func (x *AddKYCDocumentRequest) Reset() {
	*x = AddKYCDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKYCDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKYCDocumentRequest) ProtoMessage() {}

func (x *AddKYCDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKYCDocumentRequest.ProtoReflect.Descriptor instead.
func (*AddKYCDocumentRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{2}
}

func (x *AddKYCDocumentRequest) GetKYCDocumentID() string {
	if x != nil {
		return x.KYCDocumentID
	}
	return ""
}

func (x *AddKYCDocumentRequest) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *AddKYCDocumentRequest) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *AddKYCDocumentRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddKYCDocumentRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *AddKYCDocumentRequest) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *AddKYCDocumentRequest) GetIssuePlace() string {
	if x != nil {
		return x.IssuePlace
	}
	return ""
}

func (x *AddKYCDocumentRequest) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

type AddKYCDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID         string                 `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	CustomerID     string                 `protobuf:"bytes,2,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	ID             string                 `protobuf:"bytes,3,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	CustomerNumber string                 `protobuf:"bytes,4,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Type           string                 `protobuf:"bytes,5,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Number         string                 `protobuf:"bytes,6,opt,name=Number,json=number,proto3" json:"number,omitempty"`
	IssueDate      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=IssueDate,json=issue_date,proto3" json:"issue_date,omitempty"`
	IssuePlace     string                 `protobuf:"bytes,8,opt,name=IssuePlace,json=issue_place,proto3" json:"issue_place,omitempty"`
	ExpiryDate     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=ExpiryDate,json=expiry_date,proto3" json:"expiry_date,omitempty"`
}

func (x *AddKYCDocumentResponse) Reset() {
	*x = AddKYCDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKYCDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKYCDocumentResponse) ProtoMessage() {}

func (x *AddKYCDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKYCDocumentResponse.ProtoReflect.Descriptor instead.
func (*AddKYCDocumentResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{3}
}

func (x *AddKYCDocumentResponse) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *AddKYCDocumentResponse) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *AddKYCDocumentResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AddKYCDocumentResponse) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *AddKYCDocumentResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddKYCDocumentResponse) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *AddKYCDocumentResponse) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *AddKYCDocumentResponse) GetIssuePlace() string {
	if x != nil {
		return x.IssuePlace
	}
	return ""
}

func (x *AddKYCDocumentResponse) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

type AddKYCMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KYCMediaID             string                 `protobuf:"bytes,1,opt,name=KYCMediaID,json=kyc_media_id,proto3" json:"kyc_media_id,omitempty"`
	CustomerID             string                 `protobuf:"bytes,2,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	CustomerNumber         string                 `protobuf:"bytes,3,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Type                   string                 `protobuf:"bytes,4,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	URL                    string                 `protobuf:"bytes,5,opt,name=URL,json=url,proto3" json:"url,omitempty"`
	Date                   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Date,json=date,proto3" json:"date,omitempty"`
	RelatesToKycDocumentID string                 `protobuf:"bytes,7,opt,name=RelatesToKycDocumentID,json=relates_to_kyc_document_id,proto3" json:"relates_to_kyc_document_id,omitempty"`
	RelatesToKycCheckID    string                 `protobuf:"bytes,8,opt,name=RelatesToKycCheckID,json=relates_to_kyc_check_id,proto3" json:"relates_to_kyc_check_id,omitempty"`
}

func (x *AddKYCMediaRequest) Reset() {
	*x = AddKYCMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKYCMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKYCMediaRequest) ProtoMessage() {}

func (x *AddKYCMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKYCMediaRequest.ProtoReflect.Descriptor instead.
func (*AddKYCMediaRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{4}
}

func (x *AddKYCMediaRequest) GetKYCMediaID() string {
	if x != nil {
		return x.KYCMediaID
	}
	return ""
}

func (x *AddKYCMediaRequest) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *AddKYCMediaRequest) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *AddKYCMediaRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddKYCMediaRequest) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *AddKYCMediaRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *AddKYCMediaRequest) GetRelatesToKycDocumentID() string {
	if x != nil {
		return x.RelatesToKycDocumentID
	}
	return ""
}

func (x *AddKYCMediaRequest) GetRelatesToKycCheckID() string {
	if x != nil {
		return x.RelatesToKycCheckID
	}
	return ""
}

type AddKYCMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID                 string                 `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	CustomerID             string                 `protobuf:"bytes,2,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	ID                     string                 `protobuf:"bytes,3,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	CustomerNumber         string                 `protobuf:"bytes,4,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Type                   string                 `protobuf:"bytes,5,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	URL                    string                 `protobuf:"bytes,6,opt,name=URL,json=url,proto3" json:"url,omitempty"`
	Date                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=Date,json=date,proto3" json:"date,omitempty"`
	RelatesToKycDocumentID string                 `protobuf:"bytes,8,opt,name=RelatesToKycDocumentID,json=relates_to_kyc_document_id,proto3" json:"relates_to_kyc_document_id,omitempty"`
	RelatesToKycCheckID    string                 `protobuf:"bytes,9,opt,name=RelatesToKycCheckID,json=relates_to_kyc_check_id,proto3" json:"relates_to_kyc_check_id,omitempty"`
}

func (x *AddKYCMediaResponse) Reset() {
	*x = AddKYCMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKYCMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKYCMediaResponse) ProtoMessage() {}

func (x *AddKYCMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKYCMediaResponse.ProtoReflect.Descriptor instead.
func (*AddKYCMediaResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{5}
}

func (x *AddKYCMediaResponse) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *AddKYCMediaResponse) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *AddKYCMediaResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AddKYCMediaResponse) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *AddKYCMediaResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddKYCMediaResponse) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *AddKYCMediaResponse) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *AddKYCMediaResponse) GetRelatesToKycDocumentID() string {
	if x != nil {
		return x.RelatesToKycDocumentID
	}
	return ""
}

func (x *AddKYCMediaResponse) GetRelatesToKycCheckID() string {
	if x != nil {
		return x.RelatesToKycCheckID
	}
	return ""
}

type AddKYCStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID     string                 `protobuf:"bytes,1,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	CustomerNumber string                 `protobuf:"bytes,2,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Ok             bool                   `protobuf:"varint,3,opt,name=Ok,json=ok,proto3" json:"ok,omitempty"`
	Date           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Date,json=date,proto3" json:"date,omitempty"`
}

func (x *AddKYCStatusRequest) Reset() {
	*x = AddKYCStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKYCStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKYCStatusRequest) ProtoMessage() {}

func (x *AddKYCStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKYCStatusRequest.ProtoReflect.Descriptor instead.
func (*AddKYCStatusRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{6}
}

func (x *AddKYCStatusRequest) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *AddKYCStatusRequest) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *AddKYCStatusRequest) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AddKYCStatusRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type AddKYCStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID     string                 `protobuf:"bytes,1,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	CustomerNumber string                 `protobuf:"bytes,2,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Ok             bool                   `protobuf:"varint,3,opt,name=Ok,json=ok,proto3" json:"ok,omitempty"`
	Date           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Date,json=date,proto3" json:"date,omitempty"`
}

func (x *AddKYCStatusResponse) Reset() {
	*x = AddKYCStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKYCStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKYCStatusResponse) ProtoMessage() {}

func (x *AddKYCStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKYCStatusResponse.ProtoReflect.Descriptor instead.
func (*AddKYCStatusResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{7}
}

func (x *AddKYCStatusResponse) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *AddKYCStatusResponse) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *AddKYCStatusResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *AddKYCStatusResponse) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type Check struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID         string                 `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	CustomerID     string                 `protobuf:"bytes,2,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	ID             string                 `protobuf:"bytes,3,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	CustomerNumber string                 `protobuf:"bytes,4,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Date           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Date,json=date,proto3" json:"date,omitempty"`
	How            string                 `protobuf:"bytes,6,opt,name=How,json=how,proto3" json:"how,omitempty"`
	StaffUserID    string                 `protobuf:"bytes,7,opt,name=StaffUserID,json=staff_user_id,proto3" json:"staff_user_id,omitempty"`
	StaffName      string                 `protobuf:"bytes,8,opt,name=StaffName,json=staff_name,proto3" json:"staff_name,omitempty"`
	Satisfied      bool                   `protobuf:"varint,9,opt,name=Satisfied,json=satisfied,proto3" json:"satisfied,omitempty"`
	Comments       string                 `protobuf:"bytes,10,opt,name=Comments,json=comments,proto3" json:"comments,omitempty"`
}

func (x *Check) Reset() {
	*x = Check{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Check) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Check) ProtoMessage() {}

func (x *Check) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Check.ProtoReflect.Descriptor instead.
func (*Check) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{8}
}

func (x *Check) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *Check) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *Check) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Check) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *Check) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Check) GetHow() string {
	if x != nil {
		return x.How
	}
	return ""
}

func (x *Check) GetStaffUserID() string {
	if x != nil {
		return x.StaffUserID
	}
	return ""
}

func (x *Check) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *Check) GetSatisfied() bool {
	if x != nil {
		return x.Satisfied
	}
	return false
}

func (x *Check) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID         string                 `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	CustomerID     string                 `protobuf:"bytes,2,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	ID             string                 `protobuf:"bytes,3,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	CustomerNumber string                 `protobuf:"bytes,4,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Type           string                 `protobuf:"bytes,5,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Number         string                 `protobuf:"bytes,6,opt,name=Number,json=number,proto3" json:"number,omitempty"`
	IssueDate      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=IssueDate,json=issue_date,proto3" json:"issue_date,omitempty"`
	IssuePlace     string                 `protobuf:"bytes,8,opt,name=IssuePlace,json=issue_place,proto3" json:"issue_place,omitempty"`
	ExpiryDate     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=ExpiryDate,json=expiry_date,proto3" json:"expiry_date,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{9}
}

func (x *Document) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *Document) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *Document) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Document) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *Document) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Document) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Document) GetIssueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueDate
	}
	return nil
}

func (x *Document) GetIssuePlace() string {
	if x != nil {
		return x.IssuePlace
	}
	return ""
}

func (x *Document) GetExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryDate
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID     string                 `protobuf:"bytes,1,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	CustomerNumber string                 `protobuf:"bytes,2,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Ok             bool                   `protobuf:"varint,3,opt,name=Ok,json=ok,proto3" json:"ok,omitempty"`
	Date           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Date,json=date,proto3" json:"date,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{10}
}

func (x *Status) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *Status) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *Status) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *Status) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID                 string                 `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	CustomerID             string                 `protobuf:"bytes,2,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
	ID                     string                 `protobuf:"bytes,3,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	CustomerNumber         string                 `protobuf:"bytes,4,opt,name=CustomerNumber,json=customer_number,proto3" json:"customer_number,omitempty"`
	Type                   string                 `protobuf:"bytes,5,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	URL                    string                 `protobuf:"bytes,6,opt,name=URL,json=url,proto3" json:"url,omitempty"`
	Date                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=Date,json=date,proto3" json:"date,omitempty"`
	RelatesToKycDocumentID string                 `protobuf:"bytes,8,opt,name=RelatesToKycDocumentID,json=relates_to_kyc_document_id,proto3" json:"relates_to_kyc_document_id,omitempty"`
	RelatesToKycCheckID    string                 `protobuf:"bytes,9,opt,name=RelatesToKycCheckID,json=relates_to_kyc_check_id,proto3" json:"relates_to_kyc_check_id,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{11}
}

func (x *Media) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *Media) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

func (x *Media) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Media) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *Media) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Media) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *Media) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Media) GetRelatesToKycDocumentID() string {
	if x != nil {
		return x.RelatesToKycDocumentID
	}
	return ""
}

func (x *Media) GetRelatesToKycCheckID() string {
	if x != nil {
		return x.RelatesToKycCheckID
	}
	return ""
}

type GetCustomerKYCCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID string `protobuf:"bytes,1,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
}

func (x *GetCustomerKYCCheckRequest) Reset() {
	*x = GetCustomerKYCCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerKYCCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerKYCCheckRequest) ProtoMessage() {}

func (x *GetCustomerKYCCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerKYCCheckRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerKYCCheckRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{12}
}

func (x *GetCustomerKYCCheckRequest) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

type GetCustomerKYCCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checks []*Check `protobuf:"bytes,1,rep,name=Checks,json=checks,proto3" json:"checks,omitempty"`
}

func (x *GetCustomerKYCCheckResponse) Reset() {
	*x = GetCustomerKYCCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerKYCCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerKYCCheckResponse) ProtoMessage() {}

func (x *GetCustomerKYCCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerKYCCheckResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerKYCCheckResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{13}
}

func (x *GetCustomerKYCCheckResponse) GetChecks() []*Check {
	if x != nil {
		return x.Checks
	}
	return nil
}

type GetCustomerKYCDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID string `protobuf:"bytes,1,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
}

func (x *GetCustomerKYCDocumentRequest) Reset() {
	*x = GetCustomerKYCDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerKYCDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerKYCDocumentRequest) ProtoMessage() {}

func (x *GetCustomerKYCDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerKYCDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerKYCDocumentRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{14}
}

func (x *GetCustomerKYCDocumentRequest) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

type GetCustomerKYCDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents []*Document `protobuf:"bytes,1,rep,name=Documents,json=documents,proto3" json:"documents,omitempty"`
}

func (x *GetCustomerKYCDocumentResponse) Reset() {
	*x = GetCustomerKYCDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerKYCDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerKYCDocumentResponse) ProtoMessage() {}

func (x *GetCustomerKYCDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerKYCDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerKYCDocumentResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{15}
}

func (x *GetCustomerKYCDocumentResponse) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

type GetCustomerKYCStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID string `protobuf:"bytes,1,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
}

func (x *GetCustomerKYCStatusRequest) Reset() {
	*x = GetCustomerKYCStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerKYCStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerKYCStatusRequest) ProtoMessage() {}

func (x *GetCustomerKYCStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerKYCStatusRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerKYCStatusRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{16}
}

func (x *GetCustomerKYCStatusRequest) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

type GetCustomerKYCStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []*Status `protobuf:"bytes,1,rep,name=Statuses,json=statuses,proto3" json:"statuses,omitempty"`
}

func (x *GetCustomerKYCStatusResponse) Reset() {
	*x = GetCustomerKYCStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerKYCStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerKYCStatusResponse) ProtoMessage() {}

func (x *GetCustomerKYCStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerKYCStatusResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerKYCStatusResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{17}
}

func (x *GetCustomerKYCStatusResponse) GetStatuses() []*Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type GetKYCMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID string `protobuf:"bytes,1,opt,name=CustomerID,json=customer_id,proto3" json:"customer_id,omitempty"`
}

func (x *GetKYCMediaRequest) Reset() {
	*x = GetKYCMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKYCMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKYCMediaRequest) ProtoMessage() {}

func (x *GetKYCMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKYCMediaRequest.ProtoReflect.Descriptor instead.
func (*GetKYCMediaRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{18}
}

func (x *GetKYCMediaRequest) GetCustomerID() string {
	if x != nil {
		return x.CustomerID
	}
	return ""
}

type GetKYCMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Medias []*Media `protobuf:"bytes,1,rep,name=Medias,json=medias,proto3" json:"medias,omitempty"`
}

func (x *GetKYCMediaResponse) Reset() {
	*x = GetKYCMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKYCMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKYCMediaResponse) ProtoMessage() {}

func (x *GetKYCMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKYCMediaResponse.ProtoReflect.Descriptor instead.
func (*GetKYCMediaResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP(), []int{19}
}

func (x *GetKYCMediaResponse) GetMedias() []*Media {
	if x != nil {
		return x.Medias
	}
	return nil
}

var File_github_com_openbank_openbank_v1_kyc_all_proto protoreflect.FileDescriptor

var file_github_com_openbank_openbank_v1_kyc_all_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x6b, 0x79, 0x63, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6b, 0x79, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x03, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x4b, 0x59,
	0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x6b, 0x79, 0x63, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x48, 0x6f, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x03, 0x68, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x66, 0x66, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x09, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xc7, 0x03, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x4b, 0x59, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x33, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x03, 0x48, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x68, 0x6f, 0x77, 0x12, 0x2e,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x66, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x53, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xb6, 0x03, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x0d, 0x4b, 0x59, 0x43, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0f, 0x6b, 0x79, 0x63, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xc4, 0x03, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0xb0, 0x03, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x4b, 0x59,
	0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x6b, 0x79, 0x63, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54,
	0x6f, 0x4b, 0x79, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x79, 0x63,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x13,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x4b, 0x79, 0x63, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xc4, 0x03, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4b, 0x59,
	0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x3a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x16, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x4b, 0x79, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f,
	0x4b, 0x79, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd7, 0x01,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x3a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4b,
	0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x33, 0x0a,
	0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x3a,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0xb9, 0x03, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x06,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x48,
	0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x68, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x09, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb6,
	0x03, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xca, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12,
	0x33, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x6f, 0x6b,
	0x12, 0x3a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0xb6, 0x03, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x23,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x3a, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x16, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x4b, 0x79, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x54, 0x6f,
	0x4b, 0x79, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x17, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x79, 0x63, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x51, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x55, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b,
	0x59, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x54, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x61, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x52, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b,
	0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x5b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x49, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4b, 0x59, 0x43, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4d, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4b, 0x59, 0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0xf7, 0x15, 0x0a, 0x0a,
	0x4b, 0x59, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xca, 0x02, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x4b, 0x59, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x6b, 0x79, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x02,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xbd, 0x01, 0x0a, 0x03, 0x4b, 0x59, 0x43, 0x12,
	0x0d, 0x41, 0x64, 0x64, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x28,
	0x41, 0x64, 0x64, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x50, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12,
	0x49, 0x0a, 0x1d, 0x4b, 0x59, 0x43, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x12, 0x28, 0x0a, 0x26, 0x1a, 0x24, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x79, 0x63, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x2b, 0x0a, 0x29, 0x0a, 0x06,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1f, 0x0a, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x6b, 0x79,
	0x63, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a,
	0x1a, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6b, 0x79, 0x63,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x7b, 0x4b, 0x59, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xe2, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4b,
	0x59, 0x43, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x6b, 0x79, 0x63,
	0x2e, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x41, 0x64, 0x64,
	0x4b, 0x59, 0x43, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x92, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc9, 0x01,
	0x0a, 0x03, 0x4b, 0x59, 0x43, 0x12, 0x10, 0x41, 0x64, 0x64, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x2b, 0x41, 0x64, 0x64, 0x20, 0x4b, 0x59, 0x43,
	0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4a, 0x56, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x4f, 0x0a, 0x20, 0x4b,
	0x59, 0x43, 0x20, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x2b, 0x0a, 0x29, 0x1a, 0x27, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6b, 0x79, 0x63, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x2b, 0x0a, 0x29,
	0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1f, 0x0a, 0x1d, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f,
	0x6b, 0x79, 0x63, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a,
	0x01, 0x2a, 0x1a, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6b,
	0x79, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x7b, 0x4b, 0x59, 0x43, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xcd, 0x02, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x17, 0x2e, 0x6b,
	0x79, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x4b,
	0x59, 0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x86, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc0, 0x01, 0x0a, 0x03, 0x4b, 0x59,
	0x43, 0x12, 0x0d, 0x41, 0x64, 0x64, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x1a, 0x28, 0x41, 0x64, 0x64, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x53, 0x0a, 0x03, 0x32, 0x30,
	0x31, 0x12, 0x4c, 0x0a, 0x1d, 0x4b, 0x59, 0x43, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x20, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x2e, 0x12, 0x2b, 0x0a, 0x29, 0x1a, 0x27, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x79, 0x63, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62,
	0x2b, 0x0a, 0x29, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1f, 0x0a, 0x1d, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e,
	0x74, 0x6f, 0x2f, 0x6b, 0x79, 0x63, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x3a, 0x01, 0x2a, 0x1a, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x2f, 0x6b, 0x79, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x7b, 0x4b, 0x59, 0x43,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44, 0x7d, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc7, 0x02, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e,
	0x6b, 0x79, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x41, 0x64,
	0x64, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xfd, 0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc1, 0x01, 0x0a,
	0x03, 0x4b, 0x59, 0x43, 0x12, 0x0e, 0x41, 0x64, 0x64, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x29, 0x41, 0x64, 0x64, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a,
	0x52, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x4b, 0x0a, 0x1e, 0x4b, 0x59, 0x43, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x29, 0x0a, 0x27, 0x1a, 0x25, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x79, 0x63, 0x41,
	0x64, 0x64, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x62, 0x2b, 0x0a, 0x29, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12,
	0x1f, 0x0a, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x6b, 0x79, 0x63, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x1a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6b, 0x79, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xe3, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1f,
	0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4b, 0x59, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4b, 0x59, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x84, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xcd, 0x01, 0x0a, 0x03,
	0x4b, 0x59, 0x43, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x27, 0x47, 0x65, 0x74,
	0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x20, 0x66, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4a, 0x59, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x52, 0x0a, 0x1e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x30, 0x0a,
	0x2e, 0x1a, 0x2c, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6b, 0x79, 0x63, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b,
	0x59, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62,
	0x2a, 0x0a, 0x28, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1e, 0x0a, 0x1c, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e,
	0x74, 0x6f, 0x2f, 0x6b, 0x79, 0x63, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6b, 0x79,
	0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xfa, 0x02, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x79,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x92, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xd8, 0x01, 0x0a, 0x03, 0x4b,
	0x59, 0x43, 0x12, 0x1a, 0x47, 0x65, 0x74, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x20, 0x4b, 0x59, 0x43, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x2b,
	0x47, 0x65, 0x74, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x4b, 0x59, 0x43,
	0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4a, 0x5c, 0x0a, 0x03, 0x32,
	0x30, 0x31, 0x12, 0x55, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x33, 0x0a, 0x31, 0x1a, 0x2f, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x79, 0x63, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x2a, 0x0a, 0x28, 0x0a, 0x06, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1e, 0x0a, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x6b, 0x79, 0x63,
	0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6b, 0x79, 0x63, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xef, 0x02, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00,
	0x92, 0x41, 0xd4, 0x01, 0x0a, 0x03, 0x4b, 0x59, 0x43, 0x12, 0x19, 0x47, 0x65, 0x74, 0x20, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x1a, 0x2a, 0x47, 0x65, 0x74, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x20,
	0x66, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4a, 0x5a, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x53, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x31, 0x0a, 0x2f, 0x1a, 0x2d, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x79, 0x63,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x59, 0x43, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x2a, 0x0a, 0x28,
	0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x1e, 0x0a, 0x1c, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f,
	0x6b, 0x79, 0x63, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6b, 0x79, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xc2, 0x02, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4b, 0x59, 0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x17, 0x2e, 0x6b, 0x79,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x59, 0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6b, 0x79, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x59,
	0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfb,
	0x01, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc5, 0x01, 0x0a, 0x03, 0x4b, 0x59, 0x43,
	0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x4b,
	0x59, 0x43, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x27, 0x47, 0x65, 0x74, 0x20, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x20, 0x66, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4a, 0x51, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x4a, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x28, 0x0a, 0x26, 0x1a, 0x24,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x79,
	0x63, 0x47, 0x65, 0x74, 0x4b, 0x59, 0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x62, 0x2a, 0x0a, 0x28, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0x1e, 0x0a, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x6b, 0x79, 0x63, 0x2e, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x44, 0x7d, 0x2f, 0x6b, 0x79, 0x63, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x28, 0x00, 0x30, 0x00,
	0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0xd6, 0x06, 0x0a, 0x0e, 0x74, 0x6f, 0x2e, 0x62, 0x6e, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x79, 0x63, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x27, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e,
	0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x79,
	0x63, 0x3b, 0x6b, 0x79, 0x63, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01,
	0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0x80, 0x06, 0x0a, 0x03,
	0x32, 0x2e, 0x30, 0x12, 0x4a, 0x0a, 0x07, 0x4b, 0x59, 0x43, 0x20, 0x41, 0x50, 0x49, 0x12, 0x38,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4b, 0x59, 0x43, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x2a,
	0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x5f, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x58, 0x0a,
	0x56, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20,
	0x69, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x20,
	0x6f, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x4c, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x45,
	0x0a, 0x43, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x49, 0x0a, 0x47,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a,
	0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x46, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x3f, 0x0a, 0x3d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x64, 0x20, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64,
	0x65, 0x2e, 0x5a, 0x89, 0x02, 0x0a, 0x86, 0x02, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0xfb, 0x01, 0x08, 0x03, 0x12, 0x7d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x6b, 0x79, 0x63, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x20, 0x69,
	0x73, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x28, 0x04, 0x32, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x3a, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x0a, 0x2d, 0x0a,
	0x1c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e,
	0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x6b, 0x79, 0x63, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x0d, 0x56,
	0x69, 0x65, 0x77, 0x20, 0x6b, 0x79, 0x63, 0x20, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x30, 0x0a, 0x1d,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b,
	0x2e, 0x74, 0x6f, 0x2f, 0x6b, 0x79, 0x63, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0f, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x6b, 0x79, 0x63, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescOnce sync.Once
	file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescData = file_github_com_openbank_openbank_v1_kyc_all_proto_rawDesc
)

func file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescGZIP() []byte {
	file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescOnce.Do(func() {
		file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescData)
	})
	return file_github_com_openbank_openbank_v1_kyc_all_proto_rawDescData
}

var (
	file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
	file_github_com_openbank_openbank_v1_kyc_all_proto_goTypes  = []interface{}{
		(*AddKYCCheckRequest)(nil),             // 0: kyc.AddKYCCheckRequest
		(*AddKYCCheckResponse)(nil),            // 1: kyc.AddKYCCheckResponse
		(*AddKYCDocumentRequest)(nil),          // 2: kyc.AddKYCDocumentRequest
		(*AddKYCDocumentResponse)(nil),         // 3: kyc.AddKYCDocumentResponse
		(*AddKYCMediaRequest)(nil),             // 4: kyc.AddKYCMediaRequest
		(*AddKYCMediaResponse)(nil),            // 5: kyc.AddKYCMediaResponse
		(*AddKYCStatusRequest)(nil),            // 6: kyc.AddKYCStatusRequest
		(*AddKYCStatusResponse)(nil),           // 7: kyc.AddKYCStatusResponse
		(*Check)(nil),                          // 8: kyc.Check
		(*Document)(nil),                       // 9: kyc.Document
		(*Status)(nil),                         // 10: kyc.Status
		(*Media)(nil),                          // 11: kyc.Media
		(*GetCustomerKYCCheckRequest)(nil),     // 12: kyc.GetCustomerKYCCheckRequest
		(*GetCustomerKYCCheckResponse)(nil),    // 13: kyc.GetCustomerKYCCheckResponse
		(*GetCustomerKYCDocumentRequest)(nil),  // 14: kyc.GetCustomerKYCDocumentRequest
		(*GetCustomerKYCDocumentResponse)(nil), // 15: kyc.GetCustomerKYCDocumentResponse
		(*GetCustomerKYCStatusRequest)(nil),    // 16: kyc.GetCustomerKYCStatusRequest
		(*GetCustomerKYCStatusResponse)(nil),   // 17: kyc.GetCustomerKYCStatusResponse
		(*GetKYCMediaRequest)(nil),             // 18: kyc.GetKYCMediaRequest
		(*GetKYCMediaResponse)(nil),            // 19: kyc.GetKYCMediaResponse
		(*timestamppb.Timestamp)(nil),          // 20: google.protobuf.Timestamp
	}
)

var file_github_com_openbank_openbank_v1_kyc_all_proto_depIdxs = []int32{
	20, // 0: kyc.AddKYCCheckRequest.Date:type_name -> google.protobuf.Timestamp
	20, // 1: kyc.AddKYCCheckResponse.Date:type_name -> google.protobuf.Timestamp
	20, // 2: kyc.AddKYCDocumentRequest.IssueDate:type_name -> google.protobuf.Timestamp
	20, // 3: kyc.AddKYCDocumentRequest.ExpiryDate:type_name -> google.protobuf.Timestamp
	20, // 4: kyc.AddKYCDocumentResponse.IssueDate:type_name -> google.protobuf.Timestamp
	20, // 5: kyc.AddKYCDocumentResponse.ExpiryDate:type_name -> google.protobuf.Timestamp
	20, // 6: kyc.AddKYCMediaRequest.Date:type_name -> google.protobuf.Timestamp
	20, // 7: kyc.AddKYCMediaResponse.Date:type_name -> google.protobuf.Timestamp
	20, // 8: kyc.AddKYCStatusRequest.Date:type_name -> google.protobuf.Timestamp
	20, // 9: kyc.AddKYCStatusResponse.Date:type_name -> google.protobuf.Timestamp
	20, // 10: kyc.Check.Date:type_name -> google.protobuf.Timestamp
	20, // 11: kyc.Document.IssueDate:type_name -> google.protobuf.Timestamp
	20, // 12: kyc.Document.ExpiryDate:type_name -> google.protobuf.Timestamp
	20, // 13: kyc.Status.Date:type_name -> google.protobuf.Timestamp
	20, // 14: kyc.Media.Date:type_name -> google.protobuf.Timestamp
	8,  // 15: kyc.GetCustomerKYCCheckResponse.Checks:type_name -> kyc.Check
	9,  // 16: kyc.GetCustomerKYCDocumentResponse.Documents:type_name -> kyc.Document
	10, // 17: kyc.GetCustomerKYCStatusResponse.Statuses:type_name -> kyc.Status
	11, // 18: kyc.GetKYCMediaResponse.Medias:type_name -> kyc.Media
	0,  // 19: kyc.KYCService.AddKYCCheck:input_type -> kyc.AddKYCCheckRequest
	2,  // 20: kyc.KYCService.AddKYCDocument:input_type -> kyc.AddKYCDocumentRequest
	4,  // 21: kyc.KYCService.AddKYCMedia:input_type -> kyc.AddKYCMediaRequest
	6,  // 22: kyc.KYCService.AddKYCStatus:input_type -> kyc.AddKYCStatusRequest
	12, // 23: kyc.KYCService.GetCustomerKYCCheck:input_type -> kyc.GetCustomerKYCCheckRequest
	14, // 24: kyc.KYCService.GetCustomerKYCDocument:input_type -> kyc.GetCustomerKYCDocumentRequest
	16, // 25: kyc.KYCService.GetCustomerKYCStatus:input_type -> kyc.GetCustomerKYCStatusRequest
	18, // 26: kyc.KYCService.GetKYCMedia:input_type -> kyc.GetKYCMediaRequest
	1,  // 27: kyc.KYCService.AddKYCCheck:output_type -> kyc.AddKYCCheckResponse
	3,  // 28: kyc.KYCService.AddKYCDocument:output_type -> kyc.AddKYCDocumentResponse
	5,  // 29: kyc.KYCService.AddKYCMedia:output_type -> kyc.AddKYCMediaResponse
	7,  // 30: kyc.KYCService.AddKYCStatus:output_type -> kyc.AddKYCStatusResponse
	13, // 31: kyc.KYCService.GetCustomerKYCCheck:output_type -> kyc.GetCustomerKYCCheckResponse
	15, // 32: kyc.KYCService.GetCustomerKYCDocument:output_type -> kyc.GetCustomerKYCDocumentResponse
	17, // 33: kyc.KYCService.GetCustomerKYCStatus:output_type -> kyc.GetCustomerKYCStatusResponse
	19, // 34: kyc.KYCService.GetKYCMedia:output_type -> kyc.GetKYCMediaResponse
	27, // [27:35] is the sub-list for method output_type
	19, // [19:27] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_github_com_openbank_openbank_v1_kyc_all_proto_init() }
func file_github_com_openbank_openbank_v1_kyc_all_proto_init() {
	if File_github_com_openbank_openbank_v1_kyc_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKYCCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKYCCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKYCDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKYCDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKYCMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKYCMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKYCStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKYCStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Check); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerKYCCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerKYCCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerKYCDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerKYCDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerKYCStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerKYCStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKYCMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKYCMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openbank_openbank_v1_kyc_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openbank_openbank_v1_kyc_all_proto_goTypes,
		DependencyIndexes: file_github_com_openbank_openbank_v1_kyc_all_proto_depIdxs,
		MessageInfos:      file_github_com_openbank_openbank_v1_kyc_all_proto_msgTypes,
	}.Build()
	File_github_com_openbank_openbank_v1_kyc_all_proto = out.File
	file_github_com_openbank_openbank_v1_kyc_all_proto_rawDesc = nil
	file_github_com_openbank_openbank_v1_kyc_all_proto_goTypes = nil
	file_github_com_openbank_openbank_v1_kyc_all_proto_depIdxs = nil
}
