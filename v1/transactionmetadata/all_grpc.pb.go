// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transactionmetadata

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionMetadataServiceClient is the client API for TransactionMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionMetadataServiceClient interface {
	// CreateTag creates a new tag and returns its tag response.
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	// GetTag retrieves a tag.
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*Tag, error)
	// GetTags retrieves all tags.
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	// UpdateTag updates the tag.
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	// DeleteTag deletes the tag.
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateImage creates a new image and returns its image response.
	CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*Image, error)
	// GetImage retrieves a image.
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*Image, error)
	// GetImages retrieves all images.
	GetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error)
	// UpdateImage updates the image.
	UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*Image, error)
	// DeleteImage deletes the image.
	DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateComment creates a new comment and returns its comment response.
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	// GetComment retrieves a comment.
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	// GetComments retrieves all comments.
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	// UpdateComment updates the comment.
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	// DeleteComment deletes the comment.
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateNarrative creates a new narrative and returns its narrative response.
	CreateNarrative(ctx context.Context, in *CreateNarrativeRequest, opts ...grpc.CallOption) (*Narrative, error)
	// GetNarrative retrieves a narrative.
	GetNarrative(ctx context.Context, in *GetNarrativeRequest, opts ...grpc.CallOption) (*Narrative, error)
	// GetNarratives retrieves all narratives.
	GetNarratives(ctx context.Context, in *GetNarrativesRequest, opts ...grpc.CallOption) (*GetNarrativesResponse, error)
	// UpdateNarrative updates the narrative.
	UpdateNarrative(ctx context.Context, in *UpdateNarrativeRequest, opts ...grpc.CallOption) (*Narrative, error)
	// DeleteNarrative deletes the narrative.
	DeleteNarrative(ctx context.Context, in *DeleteNarrativeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateWhereTag creates a new where tag and returns its where tag response.
	CreateWhereTag(ctx context.Context, in *CreateWhereTagRequest, opts ...grpc.CallOption) (*WhereTag, error)
	// GetWhereTag retrieves a where tag.
	GetWhereTag(ctx context.Context, in *GetWhereTagRequest, opts ...grpc.CallOption) (*WhereTag, error)
	// GetWhereTags retrieves all where tags.
	GetWhereTags(ctx context.Context, in *GetWhereTagsRequest, opts ...grpc.CallOption) (*GetWhereTagsResponse, error)
	// UpdateWhereTag updates the where tag.
	UpdateWhereTag(ctx context.Context, in *UpdateWhereTagRequest, opts ...grpc.CallOption) (*WhereTag, error)
	// DeleteWhereTag deletes the where tag.
	DeleteWhereTag(ctx context.Context, in *DeleteWhereTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type transactionMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionMetadataServiceClient(cc grpc.ClientConnInterface) TransactionMetadataServiceClient {
	return &transactionMetadataServiceClient{cc}
}

func (c *transactionMetadataServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/CreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetImages(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error) {
	out := new(GetImagesResponse)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/UpdateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) DeleteImage(ctx context.Context, in *DeleteImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) CreateNarrative(ctx context.Context, in *CreateNarrativeRequest, opts ...grpc.CallOption) (*Narrative, error) {
	out := new(Narrative)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/CreateNarrative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetNarrative(ctx context.Context, in *GetNarrativeRequest, opts ...grpc.CallOption) (*Narrative, error) {
	out := new(Narrative)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetNarrative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetNarratives(ctx context.Context, in *GetNarrativesRequest, opts ...grpc.CallOption) (*GetNarrativesResponse, error) {
	out := new(GetNarrativesResponse)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetNarratives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) UpdateNarrative(ctx context.Context, in *UpdateNarrativeRequest, opts ...grpc.CallOption) (*Narrative, error) {
	out := new(Narrative)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/UpdateNarrative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) DeleteNarrative(ctx context.Context, in *DeleteNarrativeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/DeleteNarrative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) CreateWhereTag(ctx context.Context, in *CreateWhereTagRequest, opts ...grpc.CallOption) (*WhereTag, error) {
	out := new(WhereTag)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/CreateWhereTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetWhereTag(ctx context.Context, in *GetWhereTagRequest, opts ...grpc.CallOption) (*WhereTag, error) {
	out := new(WhereTag)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetWhereTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) GetWhereTags(ctx context.Context, in *GetWhereTagsRequest, opts ...grpc.CallOption) (*GetWhereTagsResponse, error) {
	out := new(GetWhereTagsResponse)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/GetWhereTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) UpdateWhereTag(ctx context.Context, in *UpdateWhereTagRequest, opts ...grpc.CallOption) (*WhereTag, error) {
	out := new(WhereTag)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/UpdateWhereTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionMetadataServiceClient) DeleteWhereTag(ctx context.Context, in *DeleteWhereTagRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/transactionmetadata.TransactionMetadataService/DeleteWhereTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionMetadataServiceServer is the server API for TransactionMetadataService service.
// All implementations must embed UnimplementedTransactionMetadataServiceServer
// for forward compatibility
type TransactionMetadataServiceServer interface {
	// CreateTag creates a new tag and returns its tag response.
	CreateTag(context.Context, *CreateTagRequest) (*Tag, error)
	// GetTag retrieves a tag.
	GetTag(context.Context, *GetTagRequest) (*Tag, error)
	// GetTags retrieves all tags.
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	// UpdateTag updates the tag.
	UpdateTag(context.Context, *UpdateTagRequest) (*Tag, error)
	// DeleteTag deletes the tag.
	DeleteTag(context.Context, *DeleteTagRequest) (*emptypb.Empty, error)
	// CreateImage creates a new image and returns its image response.
	CreateImage(context.Context, *CreateImageRequest) (*Image, error)
	// GetImage retrieves a image.
	GetImage(context.Context, *GetImageRequest) (*Image, error)
	// GetImages retrieves all images.
	GetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error)
	// UpdateImage updates the image.
	UpdateImage(context.Context, *UpdateImageRequest) (*Image, error)
	// DeleteImage deletes the image.
	DeleteImage(context.Context, *DeleteImageRequest) (*emptypb.Empty, error)
	// CreateComment creates a new comment and returns its comment response.
	CreateComment(context.Context, *CreateCommentRequest) (*Comment, error)
	// GetComment retrieves a comment.
	GetComment(context.Context, *GetCommentRequest) (*Comment, error)
	// GetComments retrieves all comments.
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	// UpdateComment updates the comment.
	UpdateComment(context.Context, *UpdateCommentRequest) (*Comment, error)
	// DeleteComment deletes the comment.
	DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error)
	// CreateNarrative creates a new narrative and returns its narrative response.
	CreateNarrative(context.Context, *CreateNarrativeRequest) (*Narrative, error)
	// GetNarrative retrieves a narrative.
	GetNarrative(context.Context, *GetNarrativeRequest) (*Narrative, error)
	// GetNarratives retrieves all narratives.
	GetNarratives(context.Context, *GetNarrativesRequest) (*GetNarrativesResponse, error)
	// UpdateNarrative updates the narrative.
	UpdateNarrative(context.Context, *UpdateNarrativeRequest) (*Narrative, error)
	// DeleteNarrative deletes the narrative.
	DeleteNarrative(context.Context, *DeleteNarrativeRequest) (*emptypb.Empty, error)
	// CreateWhereTag creates a new where tag and returns its where tag response.
	CreateWhereTag(context.Context, *CreateWhereTagRequest) (*WhereTag, error)
	// GetWhereTag retrieves a where tag.
	GetWhereTag(context.Context, *GetWhereTagRequest) (*WhereTag, error)
	// GetWhereTags retrieves all where tags.
	GetWhereTags(context.Context, *GetWhereTagsRequest) (*GetWhereTagsResponse, error)
	// UpdateWhereTag updates the where tag.
	UpdateWhereTag(context.Context, *UpdateWhereTagRequest) (*WhereTag, error)
	// DeleteWhereTag deletes the where tag.
	DeleteWhereTag(context.Context, *DeleteWhereTagRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTransactionMetadataServiceServer()
}

// UnimplementedTransactionMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionMetadataServiceServer struct{}

func (UnimplementedTransactionMetadataServiceServer) CreateTag(context.Context, *CreateTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetTag(context.Context, *GetTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) CreateImage(context.Context, *CreateImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetImage(context.Context, *GetImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetImages(context.Context, *GetImagesRequest) (*GetImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImages not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) UpdateImage(context.Context, *UpdateImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) DeleteImage(context.Context, *DeleteImageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetComment(context.Context, *GetCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) CreateNarrative(context.Context, *CreateNarrativeRequest) (*Narrative, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNarrative not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetNarrative(context.Context, *GetNarrativeRequest) (*Narrative, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNarrative not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetNarratives(context.Context, *GetNarrativesRequest) (*GetNarrativesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNarratives not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) UpdateNarrative(context.Context, *UpdateNarrativeRequest) (*Narrative, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNarrative not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) DeleteNarrative(context.Context, *DeleteNarrativeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNarrative not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) CreateWhereTag(context.Context, *CreateWhereTagRequest) (*WhereTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWhereTag not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetWhereTag(context.Context, *GetWhereTagRequest) (*WhereTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhereTag not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) GetWhereTags(context.Context, *GetWhereTagsRequest) (*GetWhereTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhereTags not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) UpdateWhereTag(context.Context, *UpdateWhereTagRequest) (*WhereTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWhereTag not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) DeleteWhereTag(context.Context, *DeleteWhereTagRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWhereTag not implemented")
}

func (UnimplementedTransactionMetadataServiceServer) mustEmbedUnimplementedTransactionMetadataServiceServer() {
}

// UnsafeTransactionMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionMetadataServiceServer will
// result in compilation errors.
type UnsafeTransactionMetadataServiceServer interface {
	mustEmbedUnimplementedTransactionMetadataServiceServer()
}

func RegisterTransactionMetadataServiceServer(s grpc.ServiceRegistrar, srv TransactionMetadataServiceServer) {
	s.RegisterService(&TransactionMetadataService_ServiceDesc, srv)
}

func _TransactionMetadataService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/CreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).CreateImage(ctx, req.(*CreateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetImages(ctx, req.(*GetImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/UpdateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).UpdateImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).DeleteImage(ctx, req.(*DeleteImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_CreateNarrative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNarrativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).CreateNarrative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/CreateNarrative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).CreateNarrative(ctx, req.(*CreateNarrativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetNarrative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNarrativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetNarrative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetNarrative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetNarrative(ctx, req.(*GetNarrativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetNarratives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNarrativesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetNarratives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetNarratives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetNarratives(ctx, req.(*GetNarrativesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_UpdateNarrative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNarrativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).UpdateNarrative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/UpdateNarrative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).UpdateNarrative(ctx, req.(*UpdateNarrativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_DeleteNarrative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNarrativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).DeleteNarrative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/DeleteNarrative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).DeleteNarrative(ctx, req.(*DeleteNarrativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_CreateWhereTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWhereTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).CreateWhereTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/CreateWhereTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).CreateWhereTag(ctx, req.(*CreateWhereTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetWhereTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhereTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetWhereTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetWhereTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetWhereTag(ctx, req.(*GetWhereTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_GetWhereTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhereTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).GetWhereTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/GetWhereTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).GetWhereTags(ctx, req.(*GetWhereTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_UpdateWhereTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWhereTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).UpdateWhereTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/UpdateWhereTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).UpdateWhereTag(ctx, req.(*UpdateWhereTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionMetadataService_DeleteWhereTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWhereTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionMetadataServiceServer).DeleteWhereTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionmetadata.TransactionMetadataService/DeleteWhereTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionMetadataServiceServer).DeleteWhereTag(ctx, req.(*DeleteWhereTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionMetadataService_ServiceDesc is the grpc.ServiceDesc for TransactionMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactionmetadata.TransactionMetadataService",
	HandlerType: (*TransactionMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTag",
			Handler:    _TransactionMetadataService_CreateTag_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _TransactionMetadataService_GetTag_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _TransactionMetadataService_GetTags_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _TransactionMetadataService_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _TransactionMetadataService_DeleteTag_Handler,
		},
		{
			MethodName: "CreateImage",
			Handler:    _TransactionMetadataService_CreateImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _TransactionMetadataService_GetImage_Handler,
		},
		{
			MethodName: "GetImages",
			Handler:    _TransactionMetadataService_GetImages_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _TransactionMetadataService_UpdateImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _TransactionMetadataService_DeleteImage_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _TransactionMetadataService_CreateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _TransactionMetadataService_GetComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _TransactionMetadataService_GetComments_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _TransactionMetadataService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _TransactionMetadataService_DeleteComment_Handler,
		},
		{
			MethodName: "CreateNarrative",
			Handler:    _TransactionMetadataService_CreateNarrative_Handler,
		},
		{
			MethodName: "GetNarrative",
			Handler:    _TransactionMetadataService_GetNarrative_Handler,
		},
		{
			MethodName: "GetNarratives",
			Handler:    _TransactionMetadataService_GetNarratives_Handler,
		},
		{
			MethodName: "UpdateNarrative",
			Handler:    _TransactionMetadataService_UpdateNarrative_Handler,
		},
		{
			MethodName: "DeleteNarrative",
			Handler:    _TransactionMetadataService_DeleteNarrative_Handler,
		},
		{
			MethodName: "CreateWhereTag",
			Handler:    _TransactionMetadataService_CreateWhereTag_Handler,
		},
		{
			MethodName: "GetWhereTag",
			Handler:    _TransactionMetadataService_GetWhereTag_Handler,
		},
		{
			MethodName: "GetWhereTags",
			Handler:    _TransactionMetadataService_GetWhereTags_Handler,
		},
		{
			MethodName: "UpdateWhereTag",
			Handler:    _TransactionMetadataService_UpdateWhereTag_Handler,
		},
		{
			MethodName: "DeleteWhereTag",
			Handler:    _TransactionMetadataService_DeleteWhereTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/transactionmetadata/all.proto",
}
