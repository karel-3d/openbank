// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: github.com/openbank/openbank/v1/types/all.proto

package types

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MajorType describes the type of the account.
type MajorType int32

const (
	MajorType_UnknownMajorType MajorType = 0
	// MajorType_Checking account.
	MajorType_Checking MajorType = 1
	// MajorType_Saving account.
	MajorType_Saving MajorType = 2
	// MajorType_TimeDeposit for a time deposit account.
	MajorType_TimeDeposit MajorType = 3
	// MajorType_CommercialLoan for a business loan account.
	MajorType_CommercialLoan MajorType = 4
	// MajorType_MortgageLoan for a home loan account.
	MajorType_MortgageLoan MajorType = 5
	// MajorType_ConsumerLoan for a consumer loan account.
	MajorType_ConsumerLoan MajorType = 6
)

// Enum value maps for MajorType.
var (
	MajorType_name = map[int32]string{
		0: "UnknownMajorType",
		1: "Checking",
		2: "Saving",
		3: "TimeDeposit",
		4: "CommercialLoan",
		5: "MortgageLoan",
		6: "ConsumerLoan",
	}
	MajorType_value = map[string]int32{
		"UnknownMajorType": 0,
		"Checking":         1,
		"Saving":           2,
		"TimeDeposit":      3,
		"CommercialLoan":   4,
		"MortgageLoan":     5,
		"ConsumerLoan":     6,
	}
)

func (x MajorType) Enum() *MajorType {
	p := new(MajorType)
	*p = x
	return p
}

func (x MajorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MajorType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[0].Descriptor()
}

func (MajorType) Type() protoreflect.EnumType {
	return &file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[0]
}

func (x MajorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MajorType.Descriptor instead.
func (MajorType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{0}
}

// MajorCategory describes the category of the account.
type MajorCategory int32

const (
	MajorCategory_UnknownMajorCategory MajorCategory = 0
	// MajorCategory_Dep for deposit category.
	MajorCategory_Dep MajorCategory = 1
	// MajorCategory_Loan for loan category.
	MajorCategory_Loan MajorCategory = 2
)

// Enum value maps for MajorCategory.
var (
	MajorCategory_name = map[int32]string{
		0: "UnknownMajorCategory",
		1: "Dep",
		2: "Loan",
	}
	MajorCategory_value = map[string]int32{
		"UnknownMajorCategory": 0,
		"Dep":                  1,
		"Loan":                 2,
	}
)

func (x MajorCategory) Enum() *MajorCategory {
	p := new(MajorCategory)
	*p = x
	return p
}

func (x MajorCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MajorCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[1].Descriptor()
}

func (MajorCategory) Type() protoreflect.EnumType {
	return &file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[1]
}

func (x MajorCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MajorCategory.Descriptor instead.
func (MajorCategory) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{1}
}

// DEPRECIATED: BankCode indicates which bank to use; these should be a list of banks
// that we are currently integrated with
// This is the updated list of banks per January 2018
type BankCode int32

const (
	BankCode_UnknownBankCode              BankCode = 0
	BankCode_Mandiri                      BankCode = 1
	BankCode_Bca                          BankCode = 2
	BankCode_Bni                          BankCode = 3
	BankCode_Bri                          BankCode = 4
	BankCode_DummyBank                    BankCode = 5
	BankCode_Bdo                          BankCode = 6
	BankCode_Bpi                          BankCode = 7
	BankCode_Aceh                         BankCode = 8
	BankCode_Agris                        BankCode = 9
	BankCode_Agroniaga                    BankCode = 10
	BankCode_AmarIndonesia                BankCode = 11
	BankCode_Andara                       BankCode = 12
	BankCode_Antardaerah                  BankCode = 13
	BankCode_AnzIndonesia                 BankCode = 14
	BankCode_Arthagraha                   BankCode = 15
	BankCode_Artos                        BankCode = 16
	BankCode_BangkokIndonesia             BankCode = 17
	BankCode_BarclaysIndonesia            BankCode = 18
	BankCode_BcaSyariah                   BankCode = 19
	BankCode_Bi                           BankCode = 20
	BankCode_BisnisInternasional          BankCode = 21
	BankCode_BniSyariah                   BankCode = 22
	BankCode_BriSyariah                   BankCode = 23
	BankCode_Btpn                         BankCode = 24
	BankCode_BtpnSyariah                  BankCode = 25
	BankCode_Bukopin                      BankCode = 26
	BankCode_BukopinSyariah               BankCode = 27
	BankCode_BumiArta                     BankCode = 28
	BankCode_CapitalIndonesia             BankCode = 29
	BankCode_CentratamaNasional           BankCode = 30
	BankCode_CtbcIndonesia                BankCode = 31
	BankCode_Danamon                      BankCode = 32
	BankCode_Danpac                       BankCode = 33
	BankCode_DinarIndonesia               BankCode = 34
	BankCode_Dki                          BankCode = 35
	BankCode_DkiSyariah                   BankCode = 36
	BankCode_EkonomiRaharja               BankCode = 37
	BankCode_Fama                         BankCode = 38
	BankCode_Ganesha                      BankCode = 39
	BankCode_Harda                        BankCode = 40
	BankCode_IcbcIndonesia                BankCode = 41
	BankCode_InaPerdana                   BankCode = 42
	BankCode_IndexSelindo                 BankCode = 43
	BankCode_Jabar                        BankCode = 44
	BankCode_JabarSyariah                 BankCode = 45
	BankCode_JasaJakarta                  BankCode = 46
	BankCode_Jatim                        BankCode = 47
	BankCode_JatimSyariah                 BankCode = 48
	BankCode_KebHana                      BankCode = 49
	BankCode_KesejahteraanEkonomi         BankCode = 50
	BankCode_MandiriSyariah               BankCode = 51
	BankCode_MaspionIndonesia             BankCode = 52
	BankCode_Mayapada                     BankCode = 53
	BankCode_Maybank                      BankCode = 54
	BankCode_MaybankSyariahIndonesia      BankCode = 55
	BankCode_Mayora                       BankCode = 56
	BankCode_Mega                         BankCode = 57
	BankCode_MegaSyariah                  BankCode = 58
	BankCode_MestikaDharma                BankCode = 59
	BankCode_MetroExpress                 BankCode = 60
	BankCode_Mitraniaga                   BankCode = 61
	BankCode_MizuhoIndonesia              BankCode = 62
	BankCode_MncInternational             BankCode = 63
	BankCode_MuamalatIndonesia            BankCode = 64
	BankCode_MultiArta                    BankCode = 65
	BankCode_Mutiara                      BankCode = 66
	BankCode_NusantaraParahyangan         BankCode = 67
	BankCode_OcbcNisp                     BankCode = 68
	BankCode_OcbcNispSyariah              BankCode = 69
	BankCode_BankOfAmericaIndonesia       BankCode = 70
	BankCode_BankOfChinaIndonesia         BankCode = 71
	BankCode_BankOfIndiaIndonesia         BankCode = 72
	BankCode_Pikko                        BankCode = 73
	BankCode_PrimaMaster                  BankCode = 74
	BankCode_PundiIndonesia               BankCode = 75
	BankCode_QnbIndonesia                 BankCode = 76
	BankCode_RoyalIndonesia               BankCode = 77
	BankCode_SahabatSampoerna             BankCode = 78
	BankCode_SbiIndonesia                 BankCode = 79
	BankCode_SinarHarapan                 BankCode = 80
	BankCode_Sinarmas                     BankCode = 81
	BankCode_Btn                          BankCode = 82
	BankCode_BtnSyariah                   BankCode = 83
	BankCode_UobIndonesia                 BankCode = 84
	BankCode_Victoria                     BankCode = 85
	BankCode_VictoriaSyariah              BankCode = 86
	BankCode_WinduKentjana                BankCode = 87
	BankCode_WooriSaudaraIndonesia        BankCode = 88
	BankCode_YudhaBakti                   BankCode = 89
	BankCode_BnpParibasIndonesia          BankCode = 90
	BankCode_BpdAcehSyariah               BankCode = 91
	BankCode_BpdBali                      BankCode = 92
	BankCode_BpdBengkulu                  BankCode = 93
	BankCode_BpdJambi                     BankCode = 94
	BankCode_BpdJawaTengah                BankCode = 95
	BankCode_BpdKalimantanBarat           BankCode = 96
	BankCode_BpdKalimantanBaratSyariah    BankCode = 97
	BankCode_BpdKalimantanTengah          BankCode = 98
	BankCode_BpdKalimantanTimur           BankCode = 99
	BankCode_BpdKalimantanTimurSyariah    BankCode = 100
	BankCode_BpdKalimantanSelatan         BankCode = 101
	BankCode_BpdKalimantanSelatanSyariah  BankCode = 102
	BankCode_BpdLampung                   BankCode = 103
	BankCode_BpdMaluku                    BankCode = 104
	BankCode_BpdNtb                       BankCode = 105
	BankCode_BpdNtt                       BankCode = 106
	BankCode_BpdPapua                     BankCode = 107
	BankCode_BpdRiauKepri                 BankCode = 108
	BankCode_BpdSulawesiSelatanBarat      BankCode = 109
	BankCode_BpdSulawesiTengah            BankCode = 110
	BankCode_BpdSulawesiTenggara          BankCode = 111
	BankCode_BpdSulawesiUtara             BankCode = 112
	BankCode_BpdSumateraBarat             BankCode = 113
	BankCode_BpdSumateraBaratSyariah      BankCode = 114
	BankCode_BpdSumateraSelatan           BankCode = 115
	BankCode_BpdSumateraSelatanBabel      BankCode = 116
	BankCode_BpdSumateraSelatanSyariah    BankCode = 117
	BankCode_BpdSumateraSelatanUus        BankCode = 118
	BankCode_BpdSumateraUtara             BankCode = 119
	BankCode_BpdSumateraUtaraSyariah      BankCode = 120
	BankCode_BpdYogyakarta                BankCode = 121
	BankCode_BpdYogyakartaSyariah         BankCode = 122
	BankCode_CimbNiaga                    BankCode = 123
	BankCode_CimbNiagaSyariah             BankCode = 124
	BankCode_CitibankIndonesia            BankCode = 125
	BankCode_CommonwealthIndonesia        BankCode = 126
	BankCode_DanamonSyariah               BankCode = 127
	BankCode_DbsIndonesia                 BankCode = 128
	BankCode_DeutscheAgIndonesia          BankCode = 129
	BankCode_NobuIndonesia                BankCode = 130
	BankCode_Panin                        BankCode = 131
	BankCode_PaninSyariah                 BankCode = 132
	BankCode_RaboIndonesia                BankCode = 133
	BankCode_ResonaPerdania               BankCode = 134
	BankCode_StandardCharteredIndonesia   BankCode = 135
	BankCode_SumitomoMitsuiIndonesia      BankCode = 136
	BankCode_BankOfTokyoIndonesia         BankCode = 137
	BankCode_RoyalBankOfScotlandIndonesia BankCode = 138
	BankCode_Permata                      BankCode = 139
	BankCode_PermataSyariah               BankCode = 140
	BankCode_SinarmasSyariah              BankCode = 141
	BankCode_MandiriTaspen                BankCode = 142
	BankCode_Banten                       BankCode = 143
	BankCode_Bei                          BankCode = 144
	BankCode_ChaseIndonesia               BankCode = 145
	BankCode_CcbIndonesia                 BankCode = 146
	BankCode_JtrustIndonesia              BankCode = 147
	BankCode_Transferwise                 BankCode = 148
)

// Enum value maps for BankCode.
var (
	BankCode_name = map[int32]string{
		0:   "UnknownBankCode",
		1:   "Mandiri",
		2:   "Bca",
		3:   "Bni",
		4:   "Bri",
		5:   "DummyBank",
		6:   "Bdo",
		7:   "Bpi",
		8:   "Aceh",
		9:   "Agris",
		10:  "Agroniaga",
		11:  "AmarIndonesia",
		12:  "Andara",
		13:  "Antardaerah",
		14:  "AnzIndonesia",
		15:  "Arthagraha",
		16:  "Artos",
		17:  "BangkokIndonesia",
		18:  "BarclaysIndonesia",
		19:  "BcaSyariah",
		20:  "Bi",
		21:  "BisnisInternasional",
		22:  "BniSyariah",
		23:  "BriSyariah",
		24:  "Btpn",
		25:  "BtpnSyariah",
		26:  "Bukopin",
		27:  "BukopinSyariah",
		28:  "BumiArta",
		29:  "CapitalIndonesia",
		30:  "CentratamaNasional",
		31:  "CtbcIndonesia",
		32:  "Danamon",
		33:  "Danpac",
		34:  "DinarIndonesia",
		35:  "Dki",
		36:  "DkiSyariah",
		37:  "EkonomiRaharja",
		38:  "Fama",
		39:  "Ganesha",
		40:  "Harda",
		41:  "IcbcIndonesia",
		42:  "InaPerdana",
		43:  "IndexSelindo",
		44:  "Jabar",
		45:  "JabarSyariah",
		46:  "JasaJakarta",
		47:  "Jatim",
		48:  "JatimSyariah",
		49:  "KebHana",
		50:  "KesejahteraanEkonomi",
		51:  "MandiriSyariah",
		52:  "MaspionIndonesia",
		53:  "Mayapada",
		54:  "Maybank",
		55:  "MaybankSyariahIndonesia",
		56:  "Mayora",
		57:  "Mega",
		58:  "MegaSyariah",
		59:  "MestikaDharma",
		60:  "MetroExpress",
		61:  "Mitraniaga",
		62:  "MizuhoIndonesia",
		63:  "MncInternational",
		64:  "MuamalatIndonesia",
		65:  "MultiArta",
		66:  "Mutiara",
		67:  "NusantaraParahyangan",
		68:  "OcbcNisp",
		69:  "OcbcNispSyariah",
		70:  "BankOfAmericaIndonesia",
		71:  "BankOfChinaIndonesia",
		72:  "BankOfIndiaIndonesia",
		73:  "Pikko",
		74:  "PrimaMaster",
		75:  "PundiIndonesia",
		76:  "QnbIndonesia",
		77:  "RoyalIndonesia",
		78:  "SahabatSampoerna",
		79:  "SbiIndonesia",
		80:  "SinarHarapan",
		81:  "Sinarmas",
		82:  "Btn",
		83:  "BtnSyariah",
		84:  "UobIndonesia",
		85:  "Victoria",
		86:  "VictoriaSyariah",
		87:  "WinduKentjana",
		88:  "WooriSaudaraIndonesia",
		89:  "YudhaBakti",
		90:  "BnpParibasIndonesia",
		91:  "BpdAcehSyariah",
		92:  "BpdBali",
		93:  "BpdBengkulu",
		94:  "BpdJambi",
		95:  "BpdJawaTengah",
		96:  "BpdKalimantanBarat",
		97:  "BpdKalimantanBaratSyariah",
		98:  "BpdKalimantanTengah",
		99:  "BpdKalimantanTimur",
		100: "BpdKalimantanTimurSyariah",
		101: "BpdKalimantanSelatan",
		102: "BpdKalimantanSelatanSyariah",
		103: "BpdLampung",
		104: "BpdMaluku",
		105: "BpdNtb",
		106: "BpdNtt",
		107: "BpdPapua",
		108: "BpdRiauKepri",
		109: "BpdSulawesiSelatanBarat",
		110: "BpdSulawesiTengah",
		111: "BpdSulawesiTenggara",
		112: "BpdSulawesiUtara",
		113: "BpdSumateraBarat",
		114: "BpdSumateraBaratSyariah",
		115: "BpdSumateraSelatan",
		116: "BpdSumateraSelatanBabel",
		117: "BpdSumateraSelatanSyariah",
		118: "BpdSumateraSelatanUus",
		119: "BpdSumateraUtara",
		120: "BpdSumateraUtaraSyariah",
		121: "BpdYogyakarta",
		122: "BpdYogyakartaSyariah",
		123: "CimbNiaga",
		124: "CimbNiagaSyariah",
		125: "CitibankIndonesia",
		126: "CommonwealthIndonesia",
		127: "DanamonSyariah",
		128: "DbsIndonesia",
		129: "DeutscheAgIndonesia",
		130: "NobuIndonesia",
		131: "Panin",
		132: "PaninSyariah",
		133: "RaboIndonesia",
		134: "ResonaPerdania",
		135: "StandardCharteredIndonesia",
		136: "SumitomoMitsuiIndonesia",
		137: "BankOfTokyoIndonesia",
		138: "RoyalBankOfScotlandIndonesia",
		139: "Permata",
		140: "PermataSyariah",
		141: "SinarmasSyariah",
		142: "MandiriTaspen",
		143: "Banten",
		144: "Bei",
		145: "ChaseIndonesia",
		146: "CcbIndonesia",
		147: "JtrustIndonesia",
		148: "Transferwise",
	}
	BankCode_value = map[string]int32{
		"UnknownBankCode":              0,
		"Mandiri":                      1,
		"Bca":                          2,
		"Bni":                          3,
		"Bri":                          4,
		"DummyBank":                    5,
		"Bdo":                          6,
		"Bpi":                          7,
		"Aceh":                         8,
		"Agris":                        9,
		"Agroniaga":                    10,
		"AmarIndonesia":                11,
		"Andara":                       12,
		"Antardaerah":                  13,
		"AnzIndonesia":                 14,
		"Arthagraha":                   15,
		"Artos":                        16,
		"BangkokIndonesia":             17,
		"BarclaysIndonesia":            18,
		"BcaSyariah":                   19,
		"Bi":                           20,
		"BisnisInternasional":          21,
		"BniSyariah":                   22,
		"BriSyariah":                   23,
		"Btpn":                         24,
		"BtpnSyariah":                  25,
		"Bukopin":                      26,
		"BukopinSyariah":               27,
		"BumiArta":                     28,
		"CapitalIndonesia":             29,
		"CentratamaNasional":           30,
		"CtbcIndonesia":                31,
		"Danamon":                      32,
		"Danpac":                       33,
		"DinarIndonesia":               34,
		"Dki":                          35,
		"DkiSyariah":                   36,
		"EkonomiRaharja":               37,
		"Fama":                         38,
		"Ganesha":                      39,
		"Harda":                        40,
		"IcbcIndonesia":                41,
		"InaPerdana":                   42,
		"IndexSelindo":                 43,
		"Jabar":                        44,
		"JabarSyariah":                 45,
		"JasaJakarta":                  46,
		"Jatim":                        47,
		"JatimSyariah":                 48,
		"KebHana":                      49,
		"KesejahteraanEkonomi":         50,
		"MandiriSyariah":               51,
		"MaspionIndonesia":             52,
		"Mayapada":                     53,
		"Maybank":                      54,
		"MaybankSyariahIndonesia":      55,
		"Mayora":                       56,
		"Mega":                         57,
		"MegaSyariah":                  58,
		"MestikaDharma":                59,
		"MetroExpress":                 60,
		"Mitraniaga":                   61,
		"MizuhoIndonesia":              62,
		"MncInternational":             63,
		"MuamalatIndonesia":            64,
		"MultiArta":                    65,
		"Mutiara":                      66,
		"NusantaraParahyangan":         67,
		"OcbcNisp":                     68,
		"OcbcNispSyariah":              69,
		"BankOfAmericaIndonesia":       70,
		"BankOfChinaIndonesia":         71,
		"BankOfIndiaIndonesia":         72,
		"Pikko":                        73,
		"PrimaMaster":                  74,
		"PundiIndonesia":               75,
		"QnbIndonesia":                 76,
		"RoyalIndonesia":               77,
		"SahabatSampoerna":             78,
		"SbiIndonesia":                 79,
		"SinarHarapan":                 80,
		"Sinarmas":                     81,
		"Btn":                          82,
		"BtnSyariah":                   83,
		"UobIndonesia":                 84,
		"Victoria":                     85,
		"VictoriaSyariah":              86,
		"WinduKentjana":                87,
		"WooriSaudaraIndonesia":        88,
		"YudhaBakti":                   89,
		"BnpParibasIndonesia":          90,
		"BpdAcehSyariah":               91,
		"BpdBali":                      92,
		"BpdBengkulu":                  93,
		"BpdJambi":                     94,
		"BpdJawaTengah":                95,
		"BpdKalimantanBarat":           96,
		"BpdKalimantanBaratSyariah":    97,
		"BpdKalimantanTengah":          98,
		"BpdKalimantanTimur":           99,
		"BpdKalimantanTimurSyariah":    100,
		"BpdKalimantanSelatan":         101,
		"BpdKalimantanSelatanSyariah":  102,
		"BpdLampung":                   103,
		"BpdMaluku":                    104,
		"BpdNtb":                       105,
		"BpdNtt":                       106,
		"BpdPapua":                     107,
		"BpdRiauKepri":                 108,
		"BpdSulawesiSelatanBarat":      109,
		"BpdSulawesiTengah":            110,
		"BpdSulawesiTenggara":          111,
		"BpdSulawesiUtara":             112,
		"BpdSumateraBarat":             113,
		"BpdSumateraBaratSyariah":      114,
		"BpdSumateraSelatan":           115,
		"BpdSumateraSelatanBabel":      116,
		"BpdSumateraSelatanSyariah":    117,
		"BpdSumateraSelatanUus":        118,
		"BpdSumateraUtara":             119,
		"BpdSumateraUtaraSyariah":      120,
		"BpdYogyakarta":                121,
		"BpdYogyakartaSyariah":         122,
		"CimbNiaga":                    123,
		"CimbNiagaSyariah":             124,
		"CitibankIndonesia":            125,
		"CommonwealthIndonesia":        126,
		"DanamonSyariah":               127,
		"DbsIndonesia":                 128,
		"DeutscheAgIndonesia":          129,
		"NobuIndonesia":                130,
		"Panin":                        131,
		"PaninSyariah":                 132,
		"RaboIndonesia":                133,
		"ResonaPerdania":               134,
		"StandardCharteredIndonesia":   135,
		"SumitomoMitsuiIndonesia":      136,
		"BankOfTokyoIndonesia":         137,
		"RoyalBankOfScotlandIndonesia": 138,
		"Permata":                      139,
		"PermataSyariah":               140,
		"SinarmasSyariah":              141,
		"MandiriTaspen":                142,
		"Banten":                       143,
		"Bei":                          144,
		"ChaseIndonesia":               145,
		"CcbIndonesia":                 146,
		"JtrustIndonesia":              147,
		"Transferwise":                 148,
	}
)

func (x BankCode) Enum() *BankCode {
	p := new(BankCode)
	*p = x
	return p
}

func (x BankCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankCode) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[2].Descriptor()
}

func (BankCode) Type() protoreflect.EnumType {
	return &file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[2]
}

func (x BankCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankCode.Descriptor instead.
func (BankCode) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{2}
}

type CardStatus int32

const (
	CardStatus_UnknownCardStatus CardStatus = 0
	// CardStatus_Lock is the lock status for a card.
	CardStatus_Lock CardStatus = 1
	// CardStatus_Unlock is the unlock status for a card.
	CardStatus_Unlock CardStatus = 2
	// CardStatus_Active is the active status for a card.
	CardStatus_Active CardStatus = 3
)

// Enum value maps for CardStatus.
var (
	CardStatus_name = map[int32]string{
		0: "UnknownCardStatus",
		1: "Lock",
		2: "Unlock",
		3: "Active",
	}
	CardStatus_value = map[string]int32{
		"UnknownCardStatus": 0,
		"Lock":              1,
		"Unlock":            2,
		"Active":            3,
	}
)

func (x CardStatus) Enum() *CardStatus {
	p := new(CardStatus)
	*p = x
	return p
}

func (x CardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[3].Descriptor()
}

func (CardStatus) Type() protoreflect.EnumType {
	return &file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[3]
}

func (x CardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardStatus.Descriptor instead.
func (CardStatus) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{3}
}

type CardAccessStatus int32

const (
	CardAccessStatus_UnknownCardAccessStatus CardAccessStatus = 0
	// CardAccessStatus_Often indicates a card is used often.
	CardAccessStatus_Often CardAccessStatus = 1
	// CardAccessStatus_Rare indicates a card is used rarely.
	CardAccessStatus_Rare CardAccessStatus = 2
)

// Enum value maps for CardAccessStatus.
var (
	CardAccessStatus_name = map[int32]string{
		0: "UnknownCardAccessStatus",
		1: "Often",
		2: "Rare",
	}
	CardAccessStatus_value = map[string]int32{
		"UnknownCardAccessStatus": 0,
		"Often":                   1,
		"Rare":                    2,
	}
)

func (x CardAccessStatus) Enum() *CardAccessStatus {
	p := new(CardAccessStatus)
	*p = x
	return p
}

func (x CardAccessStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardAccessStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[4].Descriptor()
}

func (CardAccessStatus) Type() protoreflect.EnumType {
	return &file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[4]
}

func (x CardAccessStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardAccessStatus.Descriptor instead.
func (CardAccessStatus) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{4}
}

type SortDirection int32

const (
	SortDirection_UnknownSortDirection SortDirection = 0
	// SortDirection_ASC indicates ascending sort.
	SortDirection_ASC SortDirection = 1
	// SortDirection_DESC indicates descending sort.
	SortDirection_DESC SortDirection = 2
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "UnknownSortDirection",
		1: "ASC",
		2: "DESC",
	}
	SortDirection_value = map[string]int32{
		"UnknownSortDirection": 0,
		"ASC":                  1,
		"DESC":                 2,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[5].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_github_com_openbank_openbank_v1_types_all_proto_enumTypes[5]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{5}
}

// Amount defines a transaction amount.
type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cur is the currency of the amount.
	Cur string `protobuf:"bytes,1,opt,name=Cur,json=cur,proto3" json:"cur,omitempty"`
	// Num is the value of the amount.
	Num string `protobuf:"bytes,2,opt,name=Num,json=num,proto3" json:"num,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{0}
}

func (x *Amount) GetCur() string {
	if x != nil {
		return x.Cur
	}
	return ""
}

func (x *Amount) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

// Address hold all details about Address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CountryName holds the country name information.
	CountryName string `protobuf:"bytes,1,opt,name=CountryName,json=country_name,proto3" json:"country_name,omitempty"`
	// CityName holds the city name information.
	CityName string `protobuf:"bytes,2,opt,name=CityName,json=city_name,proto3" json:"city_name,omitempty"`
	// State holds the state information.
	State string `protobuf:"bytes,3,opt,name=State,json=state,proto3" json:"state,omitempty"`
	// Street holds the street information.
	Street string `protobuf:"bytes,4,opt,name=Street,json=line_1,proto3" json:"line_1,omitempty"`
	// PostalCode holds the postal code information.
	PostalCode string `protobuf:"bytes,5,opt,name=PostalCode,json=postal_code,proto3" json:"postal_code,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *Address) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

// Location is An object representing a latitude/longitude pair. This is expressed as a pair
// of doubles representing degrees latitude and degrees longitude.
// Values must be within normalized ranges.
// Refer to https://godoc.org/google.golang.org/genproto/googleapis/type/latlng.
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latitude in degrees. It must be in the range [-90.0, +90.0].
	Latitude float64 `protobuf:"fixed64,1,opt,name=Latitude,json=latitude,proto3" json:"latitude,omitempty"`
	// The longitude in degrees. It must be in the range [-180.0, +180.0]
	Longitude float64 `protobuf:"fixed64,2,opt,name=Longitude,json=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{2}
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type OfflineUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserID
	UserID string `protobuf:"bytes,1,opt,name=UserID,json=user_id,proto3" json:"user_id,omitempty"`
	// FirstName of the person
	FirstName string `protobuf:"bytes,2,opt,name=FirstName,json=first_name,proto3" json:"first_name,omitempty"`
	// MiddleName or middle names (space separated) of the person
	MiddleName string `protobuf:"bytes,3,opt,name=MiddleName,json=middle_name,proto3" json:"middle_name,omitempty"`
	// LastName or last names (space separated) of the person
	LastName string `protobuf:"bytes,4,opt,name=LastName,json=last_name,proto3" json:"last_name,omitempty"`
	// MobileNo contact of the person
	MobileNo string `protobuf:"bytes,5,opt,name=MobileNo,json=mobile_no,proto3" json:"mobile_no,omitempty"`
	// Location is the physical location of the interaction.
	Location *Location `protobuf:"bytes,6,opt,name=Location,json=location,proto3" json:"location,omitempty"`
}

func (x *OfflineUserInfo) Reset() {
	*x = OfflineUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineUserInfo) ProtoMessage() {}

func (x *OfflineUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineUserInfo.ProtoReflect.Descriptor instead.
func (*OfflineUserInfo) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{3}
}

func (x *OfflineUserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OfflineUserInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *OfflineUserInfo) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *OfflineUserInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *OfflineUserInfo) GetMobileNo() string {
	if x != nil {
		return x.MobileNo
	}
	return ""
}

func (x *OfflineUserInfo) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// Structure of account information
type ProfileAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bank code
	BankCode string `protobuf:"bytes,1,opt,name=BankCode,json=bank_code,proto3" json:"bank_code,omitempty"`
	// Account identifier
	AccountID string `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	// Account identifier
	ProfileID string `protobuf:"bytes,3,opt,name=ProfileID,json=profile_id,proto3" json:"profile_id,omitempty"`
}

func (x *ProfileAccountInfo) Reset() {
	*x = ProfileAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileAccountInfo) ProtoMessage() {}

func (x *ProfileAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileAccountInfo.ProtoReflect.Descriptor instead.
func (*ProfileAccountInfo) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{4}
}

func (x *ProfileAccountInfo) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *ProfileAccountInfo) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ProfileAccountInfo) GetProfileID() string {
	if x != nil {
		return x.ProfileID
	}
	return ""
}

// Structure of credit rating information
type CreditRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rating string `protobuf:"bytes,1,opt,name=Rating,json=rating,proto3" json:"rating,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=Source,json=source,proto3" json:"source,omitempty"`
}

func (x *CreditRating) Reset() {
	*x = CreditRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditRating) ProtoMessage() {}

func (x *CreditRating) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditRating.ProtoReflect.Descriptor instead.
func (*CreditRating) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{5}
}

func (x *CreditRating) GetRating() string {
	if x != nil {
		return x.Rating
	}
	return ""
}

func (x *CreditRating) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// Structure of customer profile information
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProfileID is the unique identifier of a profile.
	ProfileID string `protobuf:"bytes,1,opt,name=ProfileID,json=profile_id,proto3" json:"profile_id,omitempty"`
	// Full name
	FullName string `protobuf:"bytes,2,opt,name=FullName,json=fullname,proto3" json:"fullname,omitempty"`
	// User name
	UserName string `protobuf:"bytes,3,opt,name=UserName,json=username,proto3" json:"username,omitempty"`
	// Birth date
	BirthDate string `protobuf:"bytes,4,opt,name=BirthDate,json=birthdate,proto3" json:"birthdate,omitempty"`
	// Language code used
	Language string `protobuf:"bytes,5,opt,name=Language,json=language,proto3" json:"language,omitempty"`
	// User country code (VN, US, ID, SG, ...).
	Country string `protobuf:"bytes,6,opt,name=Country,json=country,proto3" json:"country,omitempty"`
	// User email address
	Email string `protobuf:"bytes,7,opt,name=Email,json=email,proto3" json:"email,omitempty"`
	// True if email is verified, otherwise False
	EmailVefified bool `protobuf:"varint,8,opt,name=EmailVefified,json=email_verified,proto3" json:"email_verified,omitempty"`
	// Mobile number
	Mobile string `protobuf:"bytes,9,opt,name=Mobile,json=mobile,proto3" json:"mobile,omitempty"`
	// User profile photo url
	Photo string `protobuf:"bytes,10,opt,name=Photo,json=photo,proto3" json:"photo,omitempty"`
	// Title
	Title string `protobuf:"bytes,11,opt,name=Title,json=title,proto3" json:"title,omitempty"`
	// Permanent address
	PermanentAddress *Address `protobuf:"bytes,12,opt,name=PermanentAddress,json=permanent_address,proto3" json:"permanent_address,omitempty"`
	// Contact address
	ContactAddress *Address `protobuf:"bytes,13,opt,name=ContactAddress,json=contact_address,proto3" json:"contact_address,omitempty"`
	// profile number
	ProfileNumber string `protobuf:"bytes,14,opt,name=ProfileNumber,json=profile_number,proto3" json:"profile_number,omitempty"`
	// Face image of the customer
	FaceImageUrl string `protobuf:"bytes,15,opt,name=FaceImageUrl,json=face_image_url,proto3" json:"face_image_url,omitempty"`
	// Date when the face image was added/updated
	FaceImageDate string `protobuf:"bytes,16,opt,name=FaceImageDate,json=face_image_date,proto3" json:"face_image_date,omitempty"`
	// RelationshipStatus. Ex: Single | Married
	RelationshipStatus string `protobuf:"bytes,17,opt,name=RelationshipStatus,json=relationship_status,proto3" json:"relationship_status,omitempty"`
	// Number of dependents
	Dependents int32 `protobuf:"varint,18,opt,name=Dependents,json=dependents,proto3" json:"dependents,omitempty"`
	// Date of birth of dependents
	DobOfDependents []*timestamppb.Timestamp `protobuf:"bytes,19,rep,name=DobOfDependents,json=dob_of_dependents,proto3" json:"dob_of_dependents,omitempty"`
	// Credit rating
	CreditRating *CreditRating `protobuf:"bytes,20,opt,name=CreditRating,json=credit_rating,proto3" json:"credit_rating,omitempty"`
	// Credit Limit
	CreditLimit *Amount `protobuf:"bytes,21,opt,name=CreditLimit,json=credit_limit,proto3" json:"credit_limit,omitempty"`
	// Highest education such as bachelor, masters etc
	HighestEducationAttained string `protobuf:"bytes,22,opt,name=HighestEducationAttained,json=highest_education_attained,proto3" json:"highest_education_attained,omitempty"`
	// Current employment status
	EmploymentStatus string `protobuf:"bytes,23,opt,name=EmploymentStatus,json=employment_status,proto3" json:"employment_status,omitempty"`
	// Know Your Customer status
	KycStatus bool `protobuf:"varint,24,opt,name=KycStatus,json=kyc_status,proto3" json:"kyc_status,omitempty"`
	// Branch Identifier
	BranchID string `protobuf:"bytes,25,opt,name=BranchID,json=branchId,proto3" json:"branchId,omitempty"`
	// Name suffix
	NameSuffix string `protobuf:"bytes,26,opt,name=NameSuffix,json=nameSuffix,proto3" json:"nameSuffix,omitempty"`
	// FirstName of the person
	FirstName string `protobuf:"bytes,27,opt,name=FirstName,json=first_name,proto3" json:"first_name,omitempty"`
	// MiddleName or middle names (space separated) of the person
	MiddleName string `protobuf:"bytes,28,opt,name=MiddleName,json=middle_name,proto3" json:"middle_name,omitempty"`
	// LastName or last names (space separated) of the person
	LastName string `protobuf:"bytes,29,opt,name=LastName,json=last_name,proto3" json:"last_name,omitempty"`
	// Contact number
	ContactNumber string `protobuf:"bytes,30,opt,name=ContactNumber,json=contact_number,proto3" json:"contact_number,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP(), []int{6}
}

func (x *Profile) GetProfileID() string {
	if x != nil {
		return x.ProfileID
	}
	return ""
}

func (x *Profile) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Profile) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Profile) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *Profile) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Profile) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Profile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Profile) GetEmailVefified() bool {
	if x != nil {
		return x.EmailVefified
	}
	return false
}

func (x *Profile) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *Profile) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *Profile) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Profile) GetPermanentAddress() *Address {
	if x != nil {
		return x.PermanentAddress
	}
	return nil
}

func (x *Profile) GetContactAddress() *Address {
	if x != nil {
		return x.ContactAddress
	}
	return nil
}

func (x *Profile) GetProfileNumber() string {
	if x != nil {
		return x.ProfileNumber
	}
	return ""
}

func (x *Profile) GetFaceImageUrl() string {
	if x != nil {
		return x.FaceImageUrl
	}
	return ""
}

func (x *Profile) GetFaceImageDate() string {
	if x != nil {
		return x.FaceImageDate
	}
	return ""
}

func (x *Profile) GetRelationshipStatus() string {
	if x != nil {
		return x.RelationshipStatus
	}
	return ""
}

func (x *Profile) GetDependents() int32 {
	if x != nil {
		return x.Dependents
	}
	return 0
}

func (x *Profile) GetDobOfDependents() []*timestamppb.Timestamp {
	if x != nil {
		return x.DobOfDependents
	}
	return nil
}

func (x *Profile) GetCreditRating() *CreditRating {
	if x != nil {
		return x.CreditRating
	}
	return nil
}

func (x *Profile) GetCreditLimit() *Amount {
	if x != nil {
		return x.CreditLimit
	}
	return nil
}

func (x *Profile) GetHighestEducationAttained() string {
	if x != nil {
		return x.HighestEducationAttained
	}
	return ""
}

func (x *Profile) GetEmploymentStatus() string {
	if x != nil {
		return x.EmploymentStatus
	}
	return ""
}

func (x *Profile) GetKycStatus() bool {
	if x != nil {
		return x.KycStatus
	}
	return false
}

func (x *Profile) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *Profile) GetNameSuffix() string {
	if x != nil {
		return x.NameSuffix
	}
	return ""
}

func (x *Profile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Profile) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *Profile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Profile) GetContactNumber() string {
	if x != nil {
		return x.ContactNumber
	}
	return ""
}

var File_github_com_openbank_openbank_v1_types_all_proto protoreflect.FileDescriptor

var file_github_com_openbank_openbank_v1_types_all_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x43, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x63, 0x75,
	0x72, 0x12, 0x1c, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xdc, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x43, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x31, 0x12, 0x2b, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x64, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa1, 0x02, 0x0a,
	0x0f, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x12,
	0x37, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0x9b, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x5e,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xdf,
	0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x31, 0x0a, 0x0d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x66, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x50, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0c, 0x46,
	0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a,
	0x0d, 0x46, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x44, 0x6f,
	0x62, 0x4f, 0x66, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x11, 0x64, 0x6f, 0x62,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x48, 0x0a, 0x18, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x45, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x1a, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x10,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x11, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x4b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6b, 0x79, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x12, 0x29, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x2a, 0xa4, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x53, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x54, 0x69,
	0x6d, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x16, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x61,
	0x6e, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x4d, 0x6f, 0x72, 0x74, 0x67,
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x6e, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x6e, 0x10, 0x06, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x4c, 0x0a, 0x0d, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x14, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x44, 0x65, 0x70, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x6e, 0x10, 0x02, 0x1a, 0x02, 0x08,
	0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0xd0, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x4d,
	0x61, 0x6e, 0x64, 0x69, 0x72, 0x69, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03,
	0x42, 0x63, 0x61, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x42, 0x6e, 0x69,
	0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x42, 0x72, 0x69, 0x10, 0x04, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x10, 0x05, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x42, 0x64, 0x6f, 0x10, 0x06, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x42, 0x70, 0x69, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x0c, 0x0a, 0x04, 0x41, 0x63, 0x65, 0x68, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d,
	0x0a, 0x05, 0x41, 0x67, 0x72, 0x69, 0x73, 0x10, 0x09, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a,
	0x09, 0x41, 0x67, 0x72, 0x6f, 0x6e, 0x69, 0x61, 0x67, 0x61, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x15, 0x0a, 0x0d, 0x41, 0x6d, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69,
	0x61, 0x10, 0x0b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x41, 0x6e, 0x64, 0x61, 0x72,
	0x61, 0x10, 0x0c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x41, 0x6e, 0x74, 0x61, 0x72,
	0x64, 0x61, 0x65, 0x72, 0x61, 0x68, 0x10, 0x0d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c,
	0x41, 0x6e, 0x7a, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x0e, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x68, 0x61, 0x67, 0x72, 0x61, 0x68, 0x61,
	0x10, 0x0f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x41, 0x72, 0x74, 0x6f, 0x73, 0x10,
	0x10, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x67, 0x6b, 0x6f, 0x6b,
	0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x11, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x19, 0x0a, 0x11, 0x42, 0x61, 0x72, 0x63, 0x6c, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x64, 0x6f, 0x6e,
	0x65, 0x73, 0x69, 0x61, 0x10, 0x12, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x42, 0x63,
	0x61, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x13, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0a,
	0x0a, 0x02, 0x42, 0x69, 0x10, 0x14, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x42, 0x69,
	0x73, 0x6e, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x10, 0x15, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x42, 0x6e, 0x69, 0x53, 0x79,
	0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x16, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x42,
	0x72, 0x69, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x17, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0c, 0x0a, 0x04, 0x42, 0x74, 0x70, 0x6e, 0x10, 0x18, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a,
	0x0b, 0x42, 0x74, 0x70, 0x6e, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x19, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x42, 0x75, 0x6b, 0x6f, 0x70, 0x69, 0x6e, 0x10, 0x1a, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x42, 0x75, 0x6b, 0x6f, 0x70, 0x69, 0x6e, 0x53, 0x79,
	0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x1b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x42,
	0x75, 0x6d, 0x69, 0x41, 0x72, 0x74, 0x61, 0x10, 0x1c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a,
	0x10, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69,
	0x61, 0x10, 0x1d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x43, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x61, 0x6d, 0x61, 0x4e, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x1e, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x43, 0x74, 0x62, 0x63, 0x49, 0x6e, 0x64, 0x6f, 0x6e,
	0x65, 0x73, 0x69, 0x61, 0x10, 0x1f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x44, 0x61,
	0x6e, 0x61, 0x6d, 0x6f, 0x6e, 0x10, 0x20, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0e, 0x0a, 0x06, 0x44,
	0x61, 0x6e, 0x70, 0x61, 0x63, 0x10, 0x21, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x44,
	0x69, 0x6e, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x22, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x44, 0x6b, 0x69, 0x10, 0x23, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x12, 0x0a, 0x0a, 0x44, 0x6b, 0x69, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x24,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x45, 0x6b, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x52,
	0x61, 0x68, 0x61, 0x72, 0x6a, 0x61, 0x10, 0x25, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04,
	0x46, 0x61, 0x6d, 0x61, 0x10, 0x26, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x47, 0x61,
	0x6e, 0x65, 0x73, 0x68, 0x61, 0x10, 0x27, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x48,
	0x61, 0x72, 0x64, 0x61, 0x10, 0x28, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x49, 0x63,
	0x62, 0x63, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x29, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x12, 0x0a, 0x0a, 0x49, 0x6e, 0x61, 0x50, 0x65, 0x72, 0x64, 0x61, 0x6e, 0x61, 0x10,
	0x2a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65,
	0x6c, 0x69, 0x6e, 0x64, 0x6f, 0x10, 0x2b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x4a,
	0x61, 0x62, 0x61, 0x72, 0x10, 0x2c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x4a, 0x61,
	0x62, 0x61, 0x72, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x2d, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x13, 0x0a, 0x0b, 0x4a, 0x61, 0x73, 0x61, 0x4a, 0x61, 0x6b, 0x61, 0x72, 0x74, 0x61, 0x10,
	0x2e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x4a, 0x61, 0x74, 0x69, 0x6d, 0x10, 0x2f,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x4a, 0x61, 0x74, 0x69, 0x6d, 0x53, 0x79, 0x61,
	0x72, 0x69, 0x61, 0x68, 0x10, 0x30, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x4b, 0x65,
	0x62, 0x48, 0x61, 0x6e, 0x61, 0x10, 0x31, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x4b,
	0x65, 0x73, 0x65, 0x6a, 0x61, 0x68, 0x74, 0x65, 0x72, 0x61, 0x61, 0x6e, 0x45, 0x6b, 0x6f, 0x6e,
	0x6f, 0x6d, 0x69, 0x10, 0x32, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x4d, 0x61, 0x6e,
	0x64, 0x69, 0x72, 0x69, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x33, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x18, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x6f,
	0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x34, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x4d,
	0x61, 0x79, 0x61, 0x70, 0x61, 0x64, 0x61, 0x10, 0x35, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a,
	0x07, 0x4d, 0x61, 0x79, 0x62, 0x61, 0x6e, 0x6b, 0x10, 0x36, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f,
	0x0a, 0x17, 0x4d, 0x61, 0x79, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68,
	0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x37, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0e, 0x0a, 0x06, 0x4d, 0x61, 0x79, 0x6f, 0x72, 0x61, 0x10, 0x38, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0c, 0x0a, 0x04, 0x4d, 0x65, 0x67, 0x61, 0x10, 0x39, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a,
	0x0b, 0x4d, 0x65, 0x67, 0x61, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x3a, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x74, 0x69, 0x6b, 0x61, 0x44, 0x68, 0x61,
	0x72, 0x6d, 0x61, 0x10, 0x3b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x4d, 0x65, 0x74,
	0x72, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x10, 0x3c, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x12, 0x0a, 0x0a, 0x4d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x69, 0x61, 0x67, 0x61, 0x10, 0x3d, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x4d, 0x69, 0x7a, 0x75, 0x68, 0x6f, 0x49, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x3e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10,
	0x4d, 0x6e, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x10, 0x3f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x4d, 0x75, 0x61, 0x6d, 0x61, 0x6c,
	0x61, 0x74, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x40, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x11, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x74, 0x61, 0x10, 0x41,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x07, 0x4d, 0x75, 0x74, 0x69, 0x61, 0x72, 0x61, 0x10,
	0x42, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x4e, 0x75, 0x73, 0x61, 0x6e, 0x74, 0x61,
	0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x68, 0x79, 0x61, 0x6e, 0x67, 0x61, 0x6e, 0x10, 0x43, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x4f, 0x63, 0x62, 0x63, 0x4e, 0x69, 0x73, 0x70, 0x10,
	0x44, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x4f, 0x63, 0x62, 0x63, 0x4e, 0x69, 0x73,
	0x70, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x45, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1e,
	0x0a, 0x16, 0x42, 0x61, 0x6e, 0x6b, 0x4f, 0x66, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x49,
	0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x46, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c,
	0x0a, 0x14, 0x42, 0x61, 0x6e, 0x6b, 0x4f, 0x66, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x49, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x47, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14,
	0x42, 0x61, 0x6e, 0x6b, 0x4f, 0x66, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x64, 0x6f, 0x6e,
	0x65, 0x73, 0x69, 0x61, 0x10, 0x48, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x50, 0x69,
	0x6b, 0x6b, 0x6f, 0x10, 0x49, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x4a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16,
	0x0a, 0x0e, 0x50, 0x75, 0x6e, 0x64, 0x69, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61,
	0x10, 0x4b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x51, 0x6e, 0x62, 0x49, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x4c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e,
	0x52, 0x6f, 0x79, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x4d,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x53, 0x61, 0x68, 0x61, 0x62, 0x61, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6f, 0x65, 0x72, 0x6e, 0x61, 0x10, 0x4e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14,
	0x0a, 0x0c, 0x53, 0x62, 0x69, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x4f,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x53, 0x69, 0x6e, 0x61, 0x72, 0x48, 0x61, 0x72,
	0x61, 0x70, 0x61, 0x6e, 0x10, 0x50, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x53, 0x69,
	0x6e, 0x61, 0x72, 0x6d, 0x61, 0x73, 0x10, 0x51, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03,
	0x42, 0x74, 0x6e, 0x10, 0x52, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x42, 0x74, 0x6e,
	0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x53, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x14, 0x0a,
	0x0c, 0x55, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x54, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x10,
	0x55, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0f, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x56, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15,
	0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x64, 0x75, 0x4b, 0x65, 0x6e, 0x74, 0x6a, 0x61, 0x6e, 0x61, 0x10,
	0x57, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x57, 0x6f, 0x6f, 0x72, 0x69, 0x53, 0x61,
	0x75, 0x64, 0x61, 0x72, 0x61, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x58,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x59, 0x75, 0x64, 0x68, 0x61, 0x42, 0x61, 0x6b,
	0x74, 0x69, 0x10, 0x59, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x42, 0x6e, 0x70, 0x50,
	0x61, 0x72, 0x69, 0x62, 0x61, 0x73, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10,
	0x5a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0e, 0x42, 0x70, 0x64, 0x41, 0x63, 0x65, 0x68,
	0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x5b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a,
	0x07, 0x42, 0x70, 0x64, 0x42, 0x61, 0x6c, 0x69, 0x10, 0x5c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x13,
	0x0a, 0x0b, 0x42, 0x70, 0x64, 0x42, 0x65, 0x6e, 0x67, 0x6b, 0x75, 0x6c, 0x75, 0x10, 0x5d, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x08, 0x42, 0x70, 0x64, 0x4a, 0x61, 0x6d, 0x62, 0x69, 0x10,
	0x5e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0d, 0x42, 0x70, 0x64, 0x4a, 0x61, 0x77, 0x61,
	0x54, 0x65, 0x6e, 0x67, 0x61, 0x68, 0x10, 0x5f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12,
	0x42, 0x70, 0x64, 0x4b, 0x61, 0x6c, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x42, 0x61, 0x72,
	0x61, 0x74, 0x10, 0x60, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x42, 0x70, 0x64, 0x4b,
	0x61, 0x6c, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x42, 0x61, 0x72, 0x61, 0x74, 0x53, 0x79,
	0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x61, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x42,
	0x70, 0x64, 0x4b, 0x61, 0x6c, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x54, 0x65, 0x6e, 0x67,
	0x61, 0x68, 0x10, 0x62, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x42, 0x70, 0x64, 0x4b,
	0x61, 0x6c, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x75, 0x72, 0x10, 0x63,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x42, 0x70, 0x64, 0x4b, 0x61, 0x6c, 0x69, 0x6d,
	0x61, 0x6e, 0x74, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x75, 0x72, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61,
	0x68, 0x10, 0x64, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x42, 0x70, 0x64, 0x4b, 0x61,
	0x6c, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x61, 0x74, 0x61, 0x6e, 0x10,
	0x65, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1b, 0x42, 0x70, 0x64, 0x4b, 0x61, 0x6c, 0x69,
	0x6d, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x61, 0x74, 0x61, 0x6e, 0x53, 0x79, 0x61,
	0x72, 0x69, 0x61, 0x68, 0x10, 0x66, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x12, 0x0a, 0x0a, 0x42, 0x70,
	0x64, 0x4c, 0x61, 0x6d, 0x70, 0x75, 0x6e, 0x67, 0x10, 0x67, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11,
	0x0a, 0x09, 0x42, 0x70, 0x64, 0x4d, 0x61, 0x6c, 0x75, 0x6b, 0x75, 0x10, 0x68, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0e, 0x0a, 0x06, 0x42, 0x70, 0x64, 0x4e, 0x74, 0x62, 0x10, 0x69, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0e, 0x0a, 0x06, 0x42, 0x70, 0x64, 0x4e, 0x74, 0x74, 0x10, 0x6a, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x10, 0x0a, 0x08, 0x42, 0x70, 0x64, 0x50, 0x61, 0x70, 0x75, 0x61, 0x10, 0x6b, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x14, 0x0a, 0x0c, 0x42, 0x70, 0x64, 0x52, 0x69, 0x61, 0x75, 0x4b, 0x65,
	0x70, 0x72, 0x69, 0x10, 0x6c, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x42, 0x70, 0x64,
	0x53, 0x75, 0x6c, 0x61, 0x77, 0x65, 0x73, 0x69, 0x53, 0x65, 0x6c, 0x61, 0x74, 0x61, 0x6e, 0x42,
	0x61, 0x72, 0x61, 0x74, 0x10, 0x6d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x42, 0x70,
	0x64, 0x53, 0x75, 0x6c, 0x61, 0x77, 0x65, 0x73, 0x69, 0x54, 0x65, 0x6e, 0x67, 0x61, 0x68, 0x10,
	0x6e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1b, 0x0a, 0x13, 0x42, 0x70, 0x64, 0x53, 0x75, 0x6c, 0x61,
	0x77, 0x65, 0x73, 0x69, 0x54, 0x65, 0x6e, 0x67, 0x67, 0x61, 0x72, 0x61, 0x10, 0x6f, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x42, 0x70, 0x64, 0x53, 0x75, 0x6c, 0x61, 0x77, 0x65, 0x73,
	0x69, 0x55, 0x74, 0x61, 0x72, 0x61, 0x10, 0x70, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10,
	0x42, 0x70, 0x64, 0x53, 0x75, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x61, 0x42, 0x61, 0x72, 0x61, 0x74,
	0x10, 0x71, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x42, 0x70, 0x64, 0x53, 0x75, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x42, 0x61, 0x72, 0x61, 0x74, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61,
	0x68, 0x10, 0x72, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x42, 0x70, 0x64, 0x53, 0x75,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x61, 0x74, 0x61, 0x6e, 0x10, 0x73, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x42, 0x70, 0x64, 0x53, 0x75, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x53, 0x65, 0x6c, 0x61, 0x74, 0x61, 0x6e, 0x42, 0x61, 0x62, 0x65, 0x6c, 0x10, 0x74,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x21, 0x0a, 0x19, 0x42, 0x70, 0x64, 0x53, 0x75, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x61, 0x74, 0x61, 0x6e, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61,
	0x68, 0x10, 0x75, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d, 0x0a, 0x15, 0x42, 0x70, 0x64, 0x53, 0x75,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x61, 0x53, 0x65, 0x6c, 0x61, 0x74, 0x61, 0x6e, 0x55, 0x75, 0x73,
	0x10, 0x76, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x42, 0x70, 0x64, 0x53, 0x75, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x55, 0x74, 0x61, 0x72, 0x61, 0x10, 0x77, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x1f, 0x0a, 0x17, 0x42, 0x70, 0x64, 0x53, 0x75, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x61, 0x55,
	0x74, 0x61, 0x72, 0x61, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x78, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x15, 0x0a, 0x0d, 0x42, 0x70, 0x64, 0x59, 0x6f, 0x67, 0x79, 0x61, 0x6b, 0x61, 0x72,
	0x74, 0x61, 0x10, 0x79, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x42, 0x70, 0x64, 0x59,
	0x6f, 0x67, 0x79, 0x61, 0x6b, 0x61, 0x72, 0x74, 0x61, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68,
	0x10, 0x7a, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x43, 0x69, 0x6d, 0x62, 0x4e, 0x69,
	0x61, 0x67, 0x61, 0x10, 0x7b, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x10, 0x43, 0x69, 0x6d,
	0x62, 0x4e, 0x69, 0x61, 0x67, 0x61, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x7c, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x19, 0x0a, 0x11, 0x43, 0x69, 0x74, 0x69, 0x62, 0x61, 0x6e, 0x6b, 0x49,
	0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x7d, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1d,
	0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x77, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x49, 0x6e,
	0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x7e, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a,
	0x0e, 0x44, 0x61, 0x6e, 0x61, 0x6d, 0x6f, 0x6e, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10,
	0x7f, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0c, 0x44, 0x62, 0x73, 0x49, 0x6e, 0x64, 0x6f,
	0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x80, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x1c, 0x0a, 0x13,
	0x44, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x65, 0x41, 0x67, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65,
	0x73, 0x69, 0x61, 0x10, 0x81, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0d, 0x4e, 0x6f,
	0x62, 0x75, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x82, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x0e, 0x0a, 0x05, 0x50, 0x61, 0x6e, 0x69, 0x6e, 0x10, 0x83, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x15, 0x0a, 0x0c, 0x50, 0x61, 0x6e, 0x69, 0x6e, 0x53, 0x79, 0x61, 0x72, 0x69,
	0x61, 0x68, 0x10, 0x84, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0d, 0x52, 0x61, 0x62,
	0x6f, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x85, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x17, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x61, 0x50, 0x65, 0x72, 0x64, 0x61,
	0x6e, 0x69, 0x61, 0x10, 0x86, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x23, 0x0a, 0x1a, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x65, 0x72, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x87, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x20, 0x0a, 0x17, 0x53, 0x75, 0x6d, 0x69, 0x74, 0x6f, 0x6d, 0x6f, 0x4d, 0x69, 0x74, 0x73, 0x75,
	0x69, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x88, 0x01, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x1d, 0x0a, 0x14, 0x42, 0x61, 0x6e, 0x6b, 0x4f, 0x66, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x89, 0x01, 0x1a, 0x02, 0x08, 0x00,
	0x12, 0x25, 0x0a, 0x1c, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x4f, 0x66, 0x53,
	0x63, 0x6f, 0x74, 0x6c, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61,
	0x10, 0x8a, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x10, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x6d, 0x61,
	0x74, 0x61, 0x10, 0x8b, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0e, 0x50, 0x65, 0x72,
	0x6d, 0x61, 0x74, 0x61, 0x53, 0x79, 0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x8c, 0x01, 0x1a, 0x02,
	0x08, 0x00, 0x12, 0x18, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x61, 0x72, 0x6d, 0x61, 0x73, 0x53, 0x79,
	0x61, 0x72, 0x69, 0x61, 0x68, 0x10, 0x8d, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x16, 0x0a, 0x0d,
	0x4d, 0x61, 0x6e, 0x64, 0x69, 0x72, 0x69, 0x54, 0x61, 0x73, 0x70, 0x65, 0x6e, 0x10, 0x8e, 0x01,
	0x1a, 0x02, 0x08, 0x00, 0x12, 0x0f, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x10, 0x8f,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x03, 0x42, 0x65, 0x69, 0x10, 0x90, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x17, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x6f,
	0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x91, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a, 0x0c,
	0x43, 0x63, 0x62, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x92, 0x01, 0x1a,
	0x02, 0x08, 0x00, 0x12, 0x18, 0x0a, 0x0f, 0x4a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x10, 0x93, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x15, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x10, 0x94, 0x01,
	0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x59, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08,
	0x00, 0x12, 0x0c, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0e, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x00, 0x12,
	0x0e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x00, 0x1a,
	0x02, 0x18, 0x00, 0x2a, 0x54, 0x0a, 0x10, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x17, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0d, 0x0a, 0x05, 0x4f, 0x66, 0x74, 0x65,
	0x6e, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x52, 0x61, 0x72, 0x65, 0x10,
	0x02, 0x1a, 0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x2a, 0x4c, 0x0a, 0x0d, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x14, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0b, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x1a,
	0x02, 0x08, 0x00, 0x1a, 0x02, 0x18, 0x00, 0x42, 0x58, 0x0a, 0x10, 0x74, 0x6f, 0x2e, 0x62, 0x6e,
	0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x48, 0x01, 0x50, 0x01, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x80, 0x01, 0x00, 0x88,
	0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01, 0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02,
	0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openbank_openbank_v1_types_all_proto_rawDescOnce sync.Once
	file_github_com_openbank_openbank_v1_types_all_proto_rawDescData = file_github_com_openbank_openbank_v1_types_all_proto_rawDesc
)

func file_github_com_openbank_openbank_v1_types_all_proto_rawDescGZIP() []byte {
	file_github_com_openbank_openbank_v1_types_all_proto_rawDescOnce.Do(func() {
		file_github_com_openbank_openbank_v1_types_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openbank_openbank_v1_types_all_proto_rawDescData)
	})
	return file_github_com_openbank_openbank_v1_types_all_proto_rawDescData
}

var (
	file_github_com_openbank_openbank_v1_types_all_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
	file_github_com_openbank_openbank_v1_types_all_proto_msgTypes  = make([]protoimpl.MessageInfo, 7)
	file_github_com_openbank_openbank_v1_types_all_proto_goTypes   = []interface{}{
		(MajorType)(0),                // 0: types.MajorType
		(MajorCategory)(0),            // 1: types.MajorCategory
		(BankCode)(0),                 // 2: types.BankCode
		(CardStatus)(0),               // 3: types.CardStatus
		(CardAccessStatus)(0),         // 4: types.CardAccessStatus
		(SortDirection)(0),            // 5: types.SortDirection
		(*Amount)(nil),                // 6: types.Amount
		(*Address)(nil),               // 7: types.Address
		(*Location)(nil),              // 8: types.Location
		(*OfflineUserInfo)(nil),       // 9: types.OfflineUserInfo
		(*ProfileAccountInfo)(nil),    // 10: types.ProfileAccountInfo
		(*CreditRating)(nil),          // 11: types.CreditRating
		(*Profile)(nil),               // 12: types.Profile
		(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	}
)

var file_github_com_openbank_openbank_v1_types_all_proto_depIdxs = []int32{
	8,  // 0: types.OfflineUserInfo.Location:type_name -> types.Location
	7,  // 1: types.Profile.PermanentAddress:type_name -> types.Address
	7,  // 2: types.Profile.ContactAddress:type_name -> types.Address
	13, // 3: types.Profile.DobOfDependents:type_name -> google.protobuf.Timestamp
	11, // 4: types.Profile.CreditRating:type_name -> types.CreditRating
	6,  // 5: types.Profile.CreditLimit:type_name -> types.Amount
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_github_com_openbank_openbank_v1_types_all_proto_init() }
func file_github_com_openbank_openbank_v1_types_all_proto_init() {
	if File_github_com_openbank_openbank_v1_types_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_types_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openbank_openbank_v1_types_all_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_openbank_openbank_v1_types_all_proto_goTypes,
		DependencyIndexes: file_github_com_openbank_openbank_v1_types_all_proto_depIdxs,
		EnumInfos:         file_github_com_openbank_openbank_v1_types_all_proto_enumTypes,
		MessageInfos:      file_github_com_openbank_openbank_v1_types_all_proto_msgTypes,
	}.Build()
	File_github_com_openbank_openbank_v1_types_all_proto = out.File
	file_github_com_openbank_openbank_v1_types_all_proto_rawDesc = nil
	file_github_com_openbank_openbank_v1_types_all_proto_goTypes = nil
	file_github_com_openbank_openbank_v1_types_all_proto_depIdxs = nil
}
