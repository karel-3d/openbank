// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: github.com/openbank/openbank/v1/transactionrequest/all.proto

package transactionrequest

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	types "github.com/openbank/openbank/v1/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID      string        `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	AccountID   string        `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	To          *BankAccount  `protobuf:"bytes,3,opt,name=To,json=to_bank,proto3" json:"to_bank,omitempty"`
	Amount      *types.Amount `protobuf:"bytes,4,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	Description string        `protobuf:"bytes,5,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *TransactionRequest) Reset() {
	*x = TransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequest) ProtoMessage() {}

func (x *TransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequest.ProtoReflect.Descriptor instead.
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *TransactionRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *TransactionRequest) GetTo() *BankAccount {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *TransactionRequest) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransactionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BankAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID    string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	AccountID string `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *BankAccount) Reset() {
	*x = BankAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankAccount) ProtoMessage() {}

func (x *BankAccount) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankAccount.ProtoReflect.Descriptor instead.
func (*BankAccount) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{1}
}

func (x *BankAccount) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *BankAccount) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type TransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Type           string                 `protobuf:"bytes,2,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	From           *BankAccount           `protobuf:"bytes,3,opt,name=From,json=from,proto3" json:"from,omitempty"`
	Details        *Details               `protobuf:"bytes,4,opt,name=Details,json=details,proto3" json:"details,omitempty"`
	TransactionIds []string               `protobuf:"bytes,5,rep,name=TransactionIds,json=transaction_ids,proto3" json:"transaction_ids,omitempty"`
	Status         string                 `protobuf:"bytes,6,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	Challenge      *Challenge             `protobuf:"bytes,9,opt,name=Challenge,json=challenge,proto3" json:"challenge,omitempty"`
	Charge         *Charge                `protobuf:"bytes,10,opt,name=Charge,json=charge,proto3" json:"charge,omitempty"`
}

func (x *TransactionResponse) Reset() {
	*x = TransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResponse) ProtoMessage() {}

func (x *TransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResponse.ProtoReflect.Descriptor instead.
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TransactionResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionResponse) GetFrom() *BankAccount {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TransactionResponse) GetDetails() *Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TransactionResponse) GetTransactionIds() []string {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

func (x *TransactionResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransactionResponse) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *TransactionResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *TransactionResponse) GetChallenge() *Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *TransactionResponse) GetCharge() *Charge {
	if x != nil {
		return x.Charge
	}
	return nil
}

type ToSepa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iban string `protobuf:"bytes,1,opt,name=Iban,json=iban,proto3" json:"iban,omitempty"`
}

func (x *ToSepa) Reset() {
	*x = ToSepa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToSepa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToSepa) ProtoMessage() {}

func (x *ToSepa) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToSepa.ProtoReflect.Descriptor instead.
func (*ToSepa) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{3}
}

func (x *ToSepa) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

type ToCounterparty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterpartyID string `protobuf:"bytes,1,opt,name=CounterpartyID,json=counterparty_id,proto3" json:"counterparty_id,omitempty"`
}

func (x *ToCounterparty) Reset() {
	*x = ToCounterparty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToCounterparty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToCounterparty) ProtoMessage() {}

func (x *ToCounterparty) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToCounterparty.ProtoReflect.Descriptor instead.
func (*ToCounterparty) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{4}
}

func (x *ToCounterparty) GetCounterpartyID() string {
	if x != nil {
		return x.CounterpartyID
	}
	return ""
}

type ToTransferToPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      *types.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	Description string        `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	Message     string        `protobuf:"bytes,3,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	From        *FromPhone    `protobuf:"bytes,4,opt,name=From,json=from,proto3" json:"from,omitempty"`
	To          *ToPhone      `protobuf:"bytes,5,opt,name=To,json=to,proto3" json:"to,omitempty"`
}

func (x *ToTransferToPhone) Reset() {
	*x = ToTransferToPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToTransferToPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToTransferToPhone) ProtoMessage() {}

func (x *ToTransferToPhone) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToTransferToPhone.ProtoReflect.Descriptor instead.
func (*ToTransferToPhone) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{5}
}

func (x *ToTransferToPhone) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ToTransferToPhone) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ToTransferToPhone) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ToTransferToPhone) GetFrom() *FromPhone {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ToTransferToPhone) GetTo() *ToPhone {
	if x != nil {
		return x.To
	}
	return nil
}

type FromPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MobilePhoneNumber string `protobuf:"bytes,1,opt,name=MobilePhoneNumber,json=mobile_phone_number,proto3" json:"mobile_phone_number,omitempty"`
	Nickname          string `protobuf:"bytes,2,opt,name=Nickname,json=nickname,proto3" json:"nickname,omitempty"`
}

func (x *FromPhone) Reset() {
	*x = FromPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromPhone) ProtoMessage() {}

func (x *FromPhone) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromPhone.ProtoReflect.Descriptor instead.
func (*FromPhone) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{6}
}

func (x *FromPhone) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *FromPhone) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type ToPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MobilePhoneNumber string `protobuf:"bytes,1,opt,name=MobilePhoneNumber,json=mobile_phone_number,proto3" json:"mobile_phone_number,omitempty"`
}

func (x *ToPhone) Reset() {
	*x = ToPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToPhone) ProtoMessage() {}

func (x *ToPhone) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToPhone.ProtoReflect.Descriptor instead.
func (*ToPhone) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{7}
}

func (x *ToPhone) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

type KycDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	Number string `protobuf:"bytes,2,opt,name=Number,json=number,proto3" json:"number,omitempty"`
}

func (x *KycDocument) Reset() {
	*x = KycDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KycDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KycDocument) ProtoMessage() {}

func (x *KycDocument) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KycDocument.ProtoReflect.Descriptor instead.
func (*KycDocument) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{8}
}

func (x *KycDocument) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KycDocument) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type To struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegalName         string       `protobuf:"bytes,1,opt,name=LegalName,json=legal_name,proto3" json:"legal_name,omitempty"`
	DateOfBirth       string       `protobuf:"bytes,2,opt,name=DateOfBirth,json=date_of_birth,proto3" json:"date_of_birth,omitempty"`
	MobilePhoneNumber string       `protobuf:"bytes,3,opt,name=MobilePhoneNumber,json=mobile_phone_number,proto3" json:"mobile_phone_number,omitempty"`
	KycDocument       *KycDocument `protobuf:"bytes,4,opt,name=KycDocument,json=kyc_document,proto3" json:"kyc_document,omitempty"`
}

func (x *To) Reset() {
	*x = To{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *To) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*To) ProtoMessage() {}

func (x *To) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use To.ProtoReflect.Descriptor instead.
func (*To) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{9}
}

func (x *To) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *To) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *To) GetMobilePhoneNumber() string {
	if x != nil {
		return x.MobilePhoneNumber
	}
	return ""
}

func (x *To) GetKycDocument() *KycDocument {
	if x != nil {
		return x.KycDocument
	}
	return nil
}

type ToTransferToAtm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      *types.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	Description string        `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	Message     string        `protobuf:"bytes,3,opt,name=Message,json=message,proto3" json:"message,omitempty"`
	From        *FromPhone    `protobuf:"bytes,4,opt,name=From,json=from,proto3" json:"from,omitempty"`
	To          *ToPhone      `protobuf:"bytes,5,opt,name=To,json=to,proto3" json:"to,omitempty"`
}

func (x *ToTransferToAtm) Reset() {
	*x = ToTransferToAtm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToTransferToAtm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToTransferToAtm) ProtoMessage() {}

func (x *ToTransferToAtm) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToTransferToAtm.ProtoReflect.Descriptor instead.
func (*ToTransferToAtm) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{10}
}

func (x *ToTransferToAtm) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ToTransferToAtm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ToTransferToAtm) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ToTransferToAtm) GetFrom() *FromPhone {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ToTransferToAtm) GetTo() *ToPhone {
	if x != nil {
		return x.To
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string `protobuf:"bytes,1,opt,name=Number,json=number,proto3" json:"number,omitempty"`
	Iban   string `protobuf:"bytes,2,opt,name=Iban,json=iban,proto3" json:"iban,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{11}
}

func (x *Account) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Account) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

type ToAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=Name,json=name,proto3" json:"name,omitempty"`
	BankCode     string   `protobuf:"bytes,2,opt,name=BankCode,json=bank_code,proto3" json:"bank_code,omitempty"`
	BranchNumber string   `protobuf:"bytes,3,opt,name=BranchNumber,json=branch_number,proto3" json:"branch_number,omitempty"`
	Account      *Account `protobuf:"bytes,4,opt,name=Account,json=account,proto3" json:"account,omitempty"`
}

func (x *ToAccount) Reset() {
	*x = ToAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToAccount) ProtoMessage() {}

func (x *ToAccount) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToAccount.ProtoReflect.Descriptor instead.
func (*ToAccount) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{12}
}

func (x *ToAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToAccount) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *ToAccount) GetBranchNumber() string {
	if x != nil {
		return x.BranchNumber
	}
	return ""
}

func (x *ToAccount) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type ToTransferToAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       *types.Amount `protobuf:"bytes,1,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	Description  string        `protobuf:"bytes,2,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	TransferType string        `protobuf:"bytes,3,opt,name=TransferType,json=transfer_type,proto3" json:"transfer_type,omitempty"`
	FutureDate   string        `protobuf:"bytes,4,opt,name=FutureDate,json=future_date,proto3" json:"future_date,omitempty"`
	To           *To           `protobuf:"bytes,5,opt,name=To,json=to,proto3" json:"to,omitempty"`
}

func (x *ToTransferToAccount) Reset() {
	*x = ToTransferToAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToTransferToAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToTransferToAccount) ProtoMessage() {}

func (x *ToTransferToAccount) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToTransferToAccount.ProtoReflect.Descriptor instead.
func (*ToTransferToAccount) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{13}
}

func (x *ToTransferToAccount) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ToTransferToAccount) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ToTransferToAccount) GetTransferType() string {
	if x != nil {
		return x.TransferType
	}
	return ""
}

func (x *ToTransferToAccount) GetFutureDate() string {
	if x != nil {
		return x.FutureDate
	}
	return ""
}

func (x *ToTransferToAccount) GetTo() *To {
	if x != nil {
		return x.To
	}
	return nil
}

type DebtorAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iban string `protobuf:"bytes,1,opt,name=Iban,json=iban,proto3" json:"iban,omitempty"`
}

func (x *DebtorAccount) Reset() {
	*x = DebtorAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebtorAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebtorAccount) ProtoMessage() {}

func (x *DebtorAccount) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebtorAccount.ProtoReflect.Descriptor instead.
func (*DebtorAccount) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{14}
}

func (x *DebtorAccount) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

type CreditorAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iban string `protobuf:"bytes,1,opt,name=Iban,json=iban,proto3" json:"iban,omitempty"`
}

func (x *CreditorAccount) Reset() {
	*x = CreditorAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditorAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditorAccount) ProtoMessage() {}

func (x *CreditorAccount) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditorAccount.ProtoReflect.Descriptor instead.
func (*CreditorAccount) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{15}
}

func (x *CreditorAccount) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

type ToSepaCreditTransfers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebtorAccount    *DebtorAccount   `protobuf:"bytes,1,opt,name=DebtorAccount,json=debtor_account,proto3" json:"debtor_account,omitempty"`
	InstructedAmount *types.Amount    `protobuf:"bytes,2,opt,name=InstructedAmount,json=instructed_amount,proto3" json:"instructed_amount,omitempty"`
	CreditorAccount  *CreditorAccount `protobuf:"bytes,3,opt,name=CreditorAccount,json=creditor_account,proto3" json:"creditor_account,omitempty"`
	CreditorName     string           `protobuf:"bytes,4,opt,name=CreditorName,json=creditor_name,proto3" json:"creditor_name,omitempty"`
}

func (x *ToSepaCreditTransfers) Reset() {
	*x = ToSepaCreditTransfers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToSepaCreditTransfers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToSepaCreditTransfers) ProtoMessage() {}

func (x *ToSepaCreditTransfers) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToSepaCreditTransfers.ProtoReflect.Descriptor instead.
func (*ToSepaCreditTransfers) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{16}
}

func (x *ToSepaCreditTransfers) GetDebtorAccount() *DebtorAccount {
	if x != nil {
		return x.DebtorAccount
	}
	return nil
}

func (x *ToSepaCreditTransfers) GetInstructedAmount() *types.Amount {
	if x != nil {
		return x.InstructedAmount
	}
	return nil
}

func (x *ToSepaCreditTransfers) GetCreditorAccount() *CreditorAccount {
	if x != nil {
		return x.CreditorAccount
	}
	return nil
}

func (x *ToSepaCreditTransfers) GetCreditorName() string {
	if x != nil {
		return x.CreditorName
	}
	return ""
}

type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToSandboxTan          *BankAccount           `protobuf:"bytes,1,opt,name=ToSandboxTan,json=to_sandbox_tan,proto3" json:"to_sandbox_tan,omitempty"`
	ToSepa                *ToSepa                `protobuf:"bytes,2,opt,name=ToSepa,json=to_sepa,proto3" json:"to_sepa,omitempty"`
	ToCounterparty        *ToCounterparty        `protobuf:"bytes,3,opt,name=ToCounterparty,json=to_counterparty,proto3" json:"to_counterparty,omitempty"`
	ToTransferToPhone     *ToTransferToPhone     `protobuf:"bytes,4,opt,name=ToTransferToPhone,json=to_transfer_to_phone,proto3" json:"to_transfer_to_phone,omitempty"`
	ToTransferToAtm       *ToTransferToAtm       `protobuf:"bytes,5,opt,name=ToTransferToAtm,json=to_transfer_to_atm,proto3" json:"to_transfer_to_atm,omitempty"`
	ToTransferToAccount   *ToTransferToAccount   `protobuf:"bytes,6,opt,name=ToTransferToAccount,json=to_transfer_to_account,proto3" json:"to_transfer_to_account,omitempty"`
	ToSepaCreditTransfers *ToSepaCreditTransfers `protobuf:"bytes,7,opt,name=ToSepaCreditTransfers,json=to_sepa_credit_transfers,proto3" json:"to_sepa_credit_transfers,omitempty"`
	Amount                *types.Amount          `protobuf:"bytes,8,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	Description           string                 `protobuf:"bytes,9,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{17}
}

func (x *Details) GetToSandboxTan() *BankAccount {
	if x != nil {
		return x.ToSandboxTan
	}
	return nil
}

func (x *Details) GetToSepa() *ToSepa {
	if x != nil {
		return x.ToSepa
	}
	return nil
}

func (x *Details) GetToCounterparty() *ToCounterparty {
	if x != nil {
		return x.ToCounterparty
	}
	return nil
}

func (x *Details) GetToTransferToPhone() *ToTransferToPhone {
	if x != nil {
		return x.ToTransferToPhone
	}
	return nil
}

func (x *Details) GetToTransferToAtm() *ToTransferToAtm {
	if x != nil {
		return x.ToTransferToAtm
	}
	return nil
}

func (x *Details) GetToTransferToAccount() *ToTransferToAccount {
	if x != nil {
		return x.ToTransferToAccount
	}
	return nil
}

func (x *Details) GetToSepaCreditTransfers() *ToSepaCreditTransfers {
	if x != nil {
		return x.ToSepaCreditTransfers
	}
	return nil
}

func (x *Details) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Details) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	AllowedAttempts int32  `protobuf:"varint,2,opt,name=AllowedAttempts,json=allowed_attempts,proto3" json:"allowed_attempts,omitempty"`
	ChallengeType   string `protobuf:"bytes,3,opt,name=ChallengeType,json=challenge_type,proto3" json:"challenge_type,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{18}
}

func (x *Challenge) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Challenge) GetAllowedAttempts() int32 {
	if x != nil {
		return x.AllowedAttempts
	}
	return 0
}

func (x *Challenge) GetChallengeType() string {
	if x != nil {
		return x.ChallengeType
	}
	return ""
}

type Charge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary string        `protobuf:"bytes,1,opt,name=Summary,json=summary,proto3" json:"summary,omitempty"`
	Amount  *types.Amount `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
}

func (x *Charge) Reset() {
	*x = Charge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Charge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Charge) ProtoMessage() {}

func (x *Charge) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Charge.ProtoReflect.Descriptor instead.
func (*Charge) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{19}
}

func (x *Charge) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Charge) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type CounterPartyTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID       string          `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	AccountID    string          `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	To           *ToCounterparty `protobuf:"bytes,3,opt,name=To,json=to,proto3" json:"to,omitempty"`
	Amount       *types.Amount   `protobuf:"bytes,4,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	Description  string          `protobuf:"bytes,5,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	ChargePolicy string          `protobuf:"bytes,6,opt,name=ChargePolicy,json=charge_policy,proto3" json:"charge_policy,omitempty"`
	FutureDate   string          `protobuf:"bytes,7,opt,name=FutureDate,json=future_date,proto3" json:"future_date,omitempty"`
}

func (x *CounterPartyTransactionRequest) Reset() {
	*x = CounterPartyTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterPartyTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterPartyTransactionRequest) ProtoMessage() {}

func (x *CounterPartyTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterPartyTransactionRequest.ProtoReflect.Descriptor instead.
func (*CounterPartyTransactionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{20}
}

func (x *CounterPartyTransactionRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CounterPartyTransactionRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CounterPartyTransactionRequest) GetTo() *ToCounterparty {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CounterPartyTransactionRequest) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *CounterPartyTransactionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CounterPartyTransactionRequest) GetChargePolicy() string {
	if x != nil {
		return x.ChargePolicy
	}
	return ""
}

func (x *CounterPartyTransactionRequest) GetFutureDate() string {
	if x != nil {
		return x.FutureDate
	}
	return ""
}

type FreeFormTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID      string        `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	AccountID   string        `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	Amount      *types.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	Description string        `protobuf:"bytes,4,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *FreeFormTransactionRequest) Reset() {
	*x = FreeFormTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeFormTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeFormTransactionRequest) ProtoMessage() {}

func (x *FreeFormTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeFormTransactionRequest.ProtoReflect.Descriptor instead.
func (*FreeFormTransactionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{21}
}

func (x *FreeFormTransactionRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *FreeFormTransactionRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *FreeFormTransactionRequest) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *FreeFormTransactionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SEPATransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID       string        `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	AccountID    string        `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	Amount       *types.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	To           *ToSepa       `protobuf:"bytes,4,opt,name=To,json=to,proto3" json:"to,omitempty"`
	Description  string        `protobuf:"bytes,5,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	ChargePolicy string        `protobuf:"bytes,6,opt,name=ChargePolicy,json=charge_policy,proto3" json:"charge_policy,omitempty"`
	FutureDate   string        `protobuf:"bytes,7,opt,name=FutureDate,json=future_date,proto3" json:"future_date,omitempty"`
}

func (x *SEPATransactionRequest) Reset() {
	*x = SEPATransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SEPATransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SEPATransactionRequest) ProtoMessage() {}

func (x *SEPATransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SEPATransactionRequest.ProtoReflect.Descriptor instead.
func (*SEPATransactionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{22}
}

func (x *SEPATransactionRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *SEPATransactionRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *SEPATransactionRequest) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *SEPATransactionRequest) GetTo() *ToSepa {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SEPATransactionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SEPATransactionRequest) GetChargePolicy() string {
	if x != nil {
		return x.ChargePolicy
	}
	return ""
}

func (x *SEPATransactionRequest) GetFutureDate() string {
	if x != nil {
		return x.FutureDate
	}
	return ""
}

type GetTransactionRequestTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID    string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	AccountID string `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *GetTransactionRequestTypesRequest) Reset() {
	*x = GetTransactionRequestTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequestTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequestTypesRequest) ProtoMessage() {}

func (x *GetTransactionRequestTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequestTypesRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequestTypesRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{23}
}

func (x *GetTransactionRequestTypesRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *GetTransactionRequestTypesRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type GetTransactionRequestTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionRequestTypes []*TransactionRequestType `protobuf:"bytes,1,rep,name=TransactionRequestTypes,json=transaction_request_types,proto3" json:"transaction_request_types,omitempty"`
}

func (x *GetTransactionRequestTypesResponse) Reset() {
	*x = GetTransactionRequestTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequestTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequestTypesResponse) ProtoMessage() {}

func (x *GetTransactionRequestTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequestTypesResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionRequestTypesResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{24}
}

func (x *GetTransactionRequestTypesResponse) GetTransactionRequestTypes() []*TransactionRequestType {
	if x != nil {
		return x.TransactionRequestTypes
	}
	return nil
}

type TransactionRequestType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  string  `protobuf:"bytes,1,opt,name=Value,json=value,proto3" json:"value,omitempty"`
	Charge *Charge `protobuf:"bytes,2,opt,name=Charge,json=charge,proto3" json:"charge,omitempty"`
}

func (x *TransactionRequestType) Reset() {
	*x = TransactionRequestType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRequestType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequestType) ProtoMessage() {}

func (x *TransactionRequestType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequestType.ProtoReflect.Descriptor instead.
func (*TransactionRequestType) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{25}
}

func (x *TransactionRequestType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TransactionRequestType) GetCharge() *Charge {
	if x != nil {
		return x.Charge
	}
	return nil
}

type GetTransactionRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID    string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	AccountID string `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
}

func (x *GetTransactionRequestsRequest) Reset() {
	*x = GetTransactionRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequestsRequest) ProtoMessage() {}

func (x *GetTransactionRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequestsRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequestsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{26}
}

func (x *GetTransactionRequestsRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *GetTransactionRequestsRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type GetTransactionRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionRequestsWithCharges []*TransactionRequestsWithCharges `protobuf:"bytes,1,rep,name=TransactionRequestsWithCharges,json=transaction_requests_with_charges,proto3" json:"transaction_requests_with_charges,omitempty"`
}

func (x *GetTransactionRequestsResponse) Reset() {
	*x = GetTransactionRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequestsResponse) ProtoMessage() {}

func (x *GetTransactionRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequestsResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionRequestsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{27}
}

func (x *GetTransactionRequestsResponse) GetTransactionRequestsWithCharges() []*TransactionRequestsWithCharges {
	if x != nil {
		return x.TransactionRequestsWithCharges
	}
	return nil
}

type TransactionRequestsWithCharges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Type           string                 `protobuf:"bytes,2,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	From           *FromPhone             `protobuf:"bytes,3,opt,name=From,json=from,proto3" json:"from,omitempty"`
	Details        *Details               `protobuf:"bytes,4,opt,name=Details,json=details,proto3" json:"details,omitempty"`
	TransactionIds []string               `protobuf:"bytes,5,rep,name=TransactionIds,json=transaction_ids,proto3" json:"transaction_ids,omitempty"`
	Status         string                 `protobuf:"bytes,6,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	Challenge      *Challenge             `protobuf:"bytes,9,opt,name=Challenge,json=challenge,proto3" json:"challenge,omitempty"`
	Charge         *Charge                `protobuf:"bytes,10,opt,name=Charge,json=charge,proto3" json:"charge,omitempty"`
}

func (x *TransactionRequestsWithCharges) Reset() {
	*x = TransactionRequestsWithCharges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRequestsWithCharges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRequestsWithCharges) ProtoMessage() {}

func (x *TransactionRequestsWithCharges) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRequestsWithCharges.ProtoReflect.Descriptor instead.
func (*TransactionRequestsWithCharges) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{28}
}

func (x *TransactionRequestsWithCharges) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TransactionRequestsWithCharges) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TransactionRequestsWithCharges) GetFrom() *FromPhone {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TransactionRequestsWithCharges) GetDetails() *Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TransactionRequestsWithCharges) GetTransactionIds() []string {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

func (x *TransactionRequestsWithCharges) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TransactionRequestsWithCharges) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *TransactionRequestsWithCharges) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *TransactionRequestsWithCharges) GetChallenge() *Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *TransactionRequestsWithCharges) GetCharge() *Charge {
	if x != nil {
		return x.Charge
	}
	return nil
}

type GetSupportedTransactionRequestTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
}

func (x *GetSupportedTransactionRequestTypesRequest) Reset() {
	*x = GetSupportedTransactionRequestTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportedTransactionRequestTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedTransactionRequestTypesRequest) ProtoMessage() {}

func (x *GetSupportedTransactionRequestTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedTransactionRequestTypesRequest.ProtoReflect.Descriptor instead.
func (*GetSupportedTransactionRequestTypesRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{29}
}

func (x *GetSupportedTransactionRequestTypesRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

type GetSupportedTransactionRequestTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionRequestTypes []*TransactionRequestType `protobuf:"bytes,1,rep,name=TransactionRequestTypes,json=transaction_request_types,proto3" json:"transaction_request_types,omitempty"`
}

func (x *GetSupportedTransactionRequestTypesResponse) Reset() {
	*x = GetSupportedTransactionRequestTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportedTransactionRequestTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedTransactionRequestTypesResponse) ProtoMessage() {}

func (x *GetSupportedTransactionRequestTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedTransactionRequestTypesResponse.ProtoReflect.Descriptor instead.
func (*GetSupportedTransactionRequestTypesResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{30}
}

func (x *GetSupportedTransactionRequestTypesResponse) GetTransactionRequestTypes() []*TransactionRequestType {
	if x != nil {
		return x.TransactionRequestTypes
	}
	return nil
}

type AnswerTransactionRequestChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID                 string `protobuf:"bytes,1,opt,name=BankID,json=bank_id,proto3" json:"bank_id,omitempty"`
	AccountID              string `protobuf:"bytes,2,opt,name=AccountID,json=account_id,proto3" json:"account_id,omitempty"`
	TransactionRequestType string `protobuf:"bytes,3,opt,name=TransactionRequestType,json=transaction_request_type,proto3" json:"transaction_request_type,omitempty"`
	TransactionRequestID   string `protobuf:"bytes,4,opt,name=TransactionRequestID,json=transaction_request_id,proto3" json:"transaction_request_id,omitempty"`
	ID                     string `protobuf:"bytes,5,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Answer                 string `protobuf:"bytes,6,opt,name=Answer,json=answer,proto3" json:"answer,omitempty"`
}

func (x *AnswerTransactionRequestChallengeRequest) Reset() {
	*x = AnswerTransactionRequestChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerTransactionRequestChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerTransactionRequestChallengeRequest) ProtoMessage() {}

func (x *AnswerTransactionRequestChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerTransactionRequestChallengeRequest.ProtoReflect.Descriptor instead.
func (*AnswerTransactionRequestChallengeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{31}
}

func (x *AnswerTransactionRequestChallengeRequest) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *AnswerTransactionRequestChallengeRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *AnswerTransactionRequestChallengeRequest) GetTransactionRequestType() string {
	if x != nil {
		return x.TransactionRequestType
	}
	return ""
}

func (x *AnswerTransactionRequestChallengeRequest) GetTransactionRequestID() string {
	if x != nil {
		return x.TransactionRequestID
	}
	return ""
}

func (x *AnswerTransactionRequestChallengeRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AnswerTransactionRequestChallengeRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type AnswerTransactionRequestChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id,omitempty"`
	Type           string                 `protobuf:"bytes,2,opt,name=Type,json=type,proto3" json:"type,omitempty"`
	From           *BankAccount           `protobuf:"bytes,3,opt,name=From,json=from,proto3" json:"from,omitempty"`
	Details        *ChallengeDetails      `protobuf:"bytes,4,opt,name=Details,json=details,proto3" json:"details,omitempty"`
	TransactionIds string                 `protobuf:"bytes,5,opt,name=TransactionIds,json=transaction_ids,proto3" json:"transaction_ids,omitempty"`
	Status         string                 `protobuf:"bytes,6,opt,name=Status,json=status,proto3" json:"status,omitempty"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StartDate,json=start_date,proto3" json:"start_date,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=EndDate,json=end_date,proto3" json:"end_date,omitempty"`
	Challenge      *Challenge             `protobuf:"bytes,9,opt,name=Challenge,json=challenge,proto3" json:"challenge,omitempty"`
	Charge         *Charge                `protobuf:"bytes,10,opt,name=Charge,json=charge,proto3" json:"charge,omitempty"`
}

func (x *AnswerTransactionRequestChallengeResponse) Reset() {
	*x = AnswerTransactionRequestChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerTransactionRequestChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerTransactionRequestChallengeResponse) ProtoMessage() {}

func (x *AnswerTransactionRequestChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerTransactionRequestChallengeResponse.ProtoReflect.Descriptor instead.
func (*AnswerTransactionRequestChallengeResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{32}
}

func (x *AnswerTransactionRequestChallengeResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AnswerTransactionRequestChallengeResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AnswerTransactionRequestChallengeResponse) GetFrom() *BankAccount {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *AnswerTransactionRequestChallengeResponse) GetDetails() *ChallengeDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *AnswerTransactionRequestChallengeResponse) GetTransactionIds() string {
	if x != nil {
		return x.TransactionIds
	}
	return ""
}

func (x *AnswerTransactionRequestChallengeResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AnswerTransactionRequestChallengeResponse) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *AnswerTransactionRequestChallengeResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *AnswerTransactionRequestChallengeResponse) GetChallenge() *Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *AnswerTransactionRequestChallengeResponse) GetCharge() *Charge {
	if x != nil {
		return x.Charge
	}
	return nil
}

type ChallengeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To          *BankAccount  `protobuf:"bytes,1,opt,name=To,json=to,proto3" json:"to,omitempty"`
	Amount      *types.Amount `protobuf:"bytes,2,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	Description string        `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"description,omitempty"`
}

func (x *ChallengeDetails) Reset() {
	*x = ChallengeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDetails) ProtoMessage() {}

func (x *ChallengeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDetails.ProtoReflect.Descriptor instead.
func (*ChallengeDetails) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{33}
}

func (x *ChallengeDetails) GetTo() *BankAccount {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ChallengeDetails) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ChallengeDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type HistoricTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From                   *BankAccount           `protobuf:"bytes,1,opt,name=From,json=from,proto3" json:"from,omitempty"`
	To                     *BankAccount           `protobuf:"bytes,2,opt,name=To,json=to,proto3" json:"to,omitempty"`
	Amount                 *types.Amount          `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"amount,omitempty"`
	Description            string                 `protobuf:"bytes,4,opt,name=Description,json=description,proto3" json:"description,omitempty"`
	Posted                 *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Posted,json=posted,proto3" json:"posted,omitempty"`
	Completed              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Completed,json=completed,proto3" json:"completed,omitempty"`
	TransactionRequestType string                 `protobuf:"bytes,7,opt,name=TransactionRequestType,json=transaction_request_type,proto3" json:"transaction_request_type,omitempty"`
	ChargePolicy           string                 `protobuf:"bytes,8,opt,name=ChargePolicy,json=charge_policy,proto3" json:"charge_policy,omitempty"`
}

func (x *HistoricTransaction) Reset() {
	*x = HistoricTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricTransaction) ProtoMessage() {}

func (x *HistoricTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricTransaction.ProtoReflect.Descriptor instead.
func (*HistoricTransaction) Descriptor() ([]byte, []int) {
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP(), []int{34}
}

func (x *HistoricTransaction) GetFrom() *BankAccount {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *HistoricTransaction) GetTo() *BankAccount {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *HistoricTransaction) GetAmount() *types.Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *HistoricTransaction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HistoricTransaction) GetPosted() *timestamppb.Timestamp {
	if x != nil {
		return x.Posted
	}
	return nil
}

func (x *HistoricTransaction) GetCompleted() *timestamppb.Timestamp {
	if x != nil {
		return x.Completed
	}
	return nil
}

func (x *HistoricTransaction) GetTransactionRequestType() string {
	if x != nil {
		return x.TransactionRequestType
	}
	return ""
}

func (x *HistoricTransaction) GetChargePolicy() string {
	if x != nil {
		return x.ChargePolicy
	}
	return ""
}

var File_github_com_openbank_openbank_v1_transactionrequest_all_proto protoreflect.FileDescriptor

var file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x02, 0x54, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00,
	0x10, 0x00, 0x18, 0x00, 0x22, 0x65, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xc9, 0x04, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x41, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x30, 0x0a, 0x06, 0x54, 0x6f, 0x53, 0x65, 0x70,
	0x61, 0x12, 0x1e, 0x0a, 0x04, 0x49, 0x62, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x69, 0x62, 0x61,
	0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4d, 0x0a, 0x0e, 0x54, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x9a, 0x02, 0x0a, 0x11, 0x54, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x37, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x74, 0x6f, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x77, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x4d,
	0x0a, 0x07, 0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x59, 0x0a,
	0x0b, 0x4b, 0x79, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf3, 0x01, 0x0a, 0x02, 0x54, 0x6f, 0x12,
	0x29, 0x0a, 0x09, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x44, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x11, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0b, 0x4b, 0x79, 0x63, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4b, 0x79, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0c, 0x6b, 0x79, 0x63, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x98,
	0x02, 0x0a, 0x0f, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x41,
	0x74, 0x6d, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x37, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x74,
	0x6f, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x55, 0x0a, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x49, 0x62, 0x61, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00,
	0x22, 0xd0, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10,
	0x00, 0x18, 0x00, 0x22, 0x90, 0x02, 0x0a, 0x13, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x0a, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x02, 0x54, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x74, 0x6f, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x37, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x49, 0x62, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22,
	0x39, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x49, 0x62, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x69, 0x62,
	0x61, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xca, 0x02, 0x0a, 0x15, 0x54,
	0x6f, 0x53, 0x65, 0x70, 0x61, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x62, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x3a,
	0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xfb, 0x05, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x54, 0x6f, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x54, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x5f, 0x74, 0x61, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x54, 0x6f, 0x53, 0x65, 0x70, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x53, 0x65,
	0x70, 0x61, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07,
	0x74, 0x6f, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x12, 0x57, 0x0a, 0x0e, 0x54, 0x6f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x0f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x62, 0x0a, 0x11, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x14,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x6f, 0x41, 0x74, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x41,
	0x74, 0x6d, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x12,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x74, 0x6d, 0x12, 0x68, 0x0a, 0x13, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x15,
	0x54, 0x6f, 0x53, 0x65, 0x70, 0x61, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x6f, 0x53, 0x65, 0x70, 0x61, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x18, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x35, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0x69, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf7, 0x02, 0x0a,
	0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x3e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x31, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x2b, 0x0a, 0x0a, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd5, 0x01, 0x0a, 0x1a, 0x46, 0x72, 0x65, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe7,
	0x02, 0x0a, 0x16, 0x53, 0x45, 0x50, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x02,
	0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f,
	0x53, 0x65, 0x70, 0x61, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x0a, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30,
	0x00, 0x50, 0x00, 0x52, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x7b, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08,
	0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08,
	0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa0, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0x77, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xb4, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xd2, 0x04,
	0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00,
	0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x04,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x41, 0x0a, 0x07, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x47, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00,
	0x18, 0x00, 0x22, 0x59, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xa9, 0x01,
	0x0a, 0x2b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a,
	0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xca, 0x02, 0x0a, 0x28, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00,
	0x50, 0x00, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x3a, 0x06,
	0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xe8, 0x04, 0x0a, 0x29, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x4a, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00,
	0x30, 0x00, 0x50, 0x00, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x47, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18,
	0x00, 0x22, 0xb8, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18,
	0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x22, 0xf9, 0x03, 0x0a,
	0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00,
	0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x16, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28,
	0x00, 0x30, 0x00, 0x50, 0x00, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2f, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x08, 0x00, 0x18, 0x00, 0x28, 0x00, 0x30, 0x00, 0x50,
	0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x3a, 0x06, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x32, 0x8a, 0x2a, 0x0a, 0x19, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf6, 0x04, 0x0a, 0x21, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcf, 0x03, 0x88, 0x02, 0x00, 0x90,
	0x02, 0x00, 0x92, 0x41, 0xaa, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x65, 0x75, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0x28, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4a,
	0x82, 0x01, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x7b, 0x0a, 0x2a, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x4b, 0x1a, 0x49, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x62, 0x3a, 0x0a, 0x38, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0x2e, 0x0a, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x94, 0x01, 0x3a, 0x01, 0x2a, 0x22, 0x8e, 0x01, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x7d, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x7b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x28, 0x00, 0x30, 0x00, 0x12,
	0xfb, 0x03, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x03,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x98, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4a, 0x73, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x6c, 0x0a, 0x31, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x37, 0x0a,
	0x35, 0x1a, 0x33, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x3a, 0x0a, 0x38, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x12, 0x2e, 0x0a, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x61, 0x3a, 0x01, 0x2a, 0x22, 0x5c, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x7d, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0x8e, 0x04,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x54, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99,
	0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xa4, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x20, 0x6f, 0x74, 0x70, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x6f, 0x74, 0x70, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x77, 0x0a, 0x03, 0x32, 0x30,
	0x31, 0x12, 0x70, 0x0a, 0x35, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x4f, 0x54, 0x50,
	0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x37, 0x0a, 0x35, 0x1a, 0x33,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x62, 0x3a, 0x0a, 0x38, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12,
	0x2e, 0x0a, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x65, 0x3a, 0x01, 0x2a, 0x22, 0x60, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61,
	0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x54, 0x50, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xa3,
	0x04, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x03,
	0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xaa, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x79, 0x0a,
	0x03, 0x32, 0x30, 0x31, 0x12, 0x72, 0x0a, 0x37, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x3a, 0x0a, 0x38, 0x0a, 0x06, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x12, 0x2e, 0x0a, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x3a, 0x01, 0x2a, 0x22, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44,
	0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x41, 0x52, 0x54, 0x59, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x28, 0x00, 0x30, 0x00, 0x12, 0x8c, 0x04, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x03, 0x88, 0x02,
	0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x9e, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4a, 0x75, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x6e, 0x0a, 0x33, 0x46, 0x72,
	0x65, 0x65, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x12, 0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x3a, 0x0a, 0x38, 0x0a, 0x06,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x2e, 0x0a, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x63, 0x3a, 0x01, 0x2a, 0x22,
	0x5e, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28,
	0x00, 0x30, 0x00, 0x12, 0xf0, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x45,
	0x50, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x45, 0x50, 0x41, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xfd, 0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x8f, 0x02, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x20,
	0x73, 0x65, 0x70, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x73, 0x65, 0x70, 0x61, 0x20, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4a, 0x70, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x69, 0x0a, 0x2e, 0x53, 0x45, 0x50, 0x41, 0x20,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23,
	0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x62, 0x3a, 0x0a, 0x38, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x2e,
	0x0a, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62,
	0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x5e, 0x3a, 0x01, 0x2a, 0x22, 0x59, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e,
	0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x53, 0x45, 0x50, 0x41, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb4, 0x04, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xcf,
	0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x1a, 0x3d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x4a, 0x6f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x68, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x46, 0x0a, 0x44, 0x1a, 0x42,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4a, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x39, 0x0a, 0x37, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x12, 0x2d, 0x0a, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b,
	0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x28, 0x00, 0x30, 0x00, 0x12, 0xb1, 0x04,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92,
	0x41, 0xc6, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x2b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x4a, 0x78, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x71, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x4f, 0x0a, 0x4d, 0x1a, 0x4b,
	0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x31, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x39,
	0x0a, 0x37, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x2d, 0x0a, 0x2b, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12,
	0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x28, 0x00, 0x30,
	0x00, 0x12, 0x9c, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x96, 0x03, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0xc9, 0x02,
	0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x1a, 0x38, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x4a, 0x6b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x64, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12, 0x42, 0x0a, 0x40, 0x1a, 0x3e, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x31, 0x0a, 0x03, 0x34,
	0x30, 0x34, 0x12, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x62, 0x39,
	0x0a, 0x37, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x2d, 0x0a, 0x2b, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12,
	0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x2f, 0x7b, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x44, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x28, 0x00, 0x30, 0x00,
	0x12, 0xad, 0x03, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb,
	0x02, 0x88, 0x02, 0x00, 0x90, 0x02, 0x00, 0x92, 0x41, 0x89, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x61, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x61, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x78,
	0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x71, 0x0a, 0x36, 0x41, 0x20, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e, 0x12,
	0x37, 0x0a, 0x35, 0x1a, 0x33, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x3a, 0x0a, 0x38, 0x0a, 0x06, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x12, 0x2e, 0x0a, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x28, 0x00, 0x30, 0x00,
	0x1a, 0x03, 0x88, 0x02, 0x00, 0x42, 0xe5, 0x07, 0x0a, 0x1d, 0x74, 0x6f, 0x2e, 0x62, 0x6e, 0x6b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x80, 0x01, 0x00, 0x88, 0x01, 0x00, 0x90, 0x01, 0x00, 0xb8, 0x01, 0x00, 0xd8, 0x01,
	0x00, 0xf8, 0x01, 0x01, 0xd0, 0x02, 0x00, 0x92, 0x41, 0xe2, 0x06, 0x0a, 0x03, 0x32, 0x2e, 0x30,
	0x12, 0x5e, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x6f, 0x6e, 0x20, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x41, 0x50, 0x49, 0x12, 0x3d, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x73, 0x20, 0x43, 0x52, 0x55, 0x44, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30,
	0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x5f, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x58,
	0x0a, 0x56, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62, 0x6f, 0x64, 0x79,
	0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x4c, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x45, 0x0a, 0x43, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x6f, 0x65,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x49, 0x0a,
	0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x31, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12,
	0x2a, 0x0a, 0x28, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x46, 0x0a, 0x03, 0x35,
	0x30, 0x30, 0x12, 0x3f, 0x0a, 0x3d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x65, 0x64, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69,
	0x64, 0x65, 0x2e, 0x5a, 0xd7, 0x02, 0x0a, 0xd4, 0x02, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x12, 0xc9, 0x02, 0x08, 0x03, 0x12, 0x8d, 0x01, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65,
	0x20, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x28, 0x04, 0x32, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x3a, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x9d, 0x01,
	0x0a, 0x4b, 0x0a, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x62, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x1c, 0x56, 0x69, 0x65, 0x77, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x4e, 0x0a,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x62, 0x6e,
	0x6b, 0x2e, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescOnce sync.Once
	file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescData = file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDesc
)

func file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescGZIP() []byte {
	file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescOnce.Do(func() {
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescData)
	})
	return file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDescData
}

var (
	file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
	file_github_com_openbank_openbank_v1_transactionrequest_all_proto_goTypes  = []interface{}{
		(*TransactionRequest)(nil),                          // 0: transactionrequest.TransactionRequest
		(*BankAccount)(nil),                                 // 1: transactionrequest.BankAccount
		(*TransactionResponse)(nil),                         // 2: transactionrequest.TransactionResponse
		(*ToSepa)(nil),                                      // 3: transactionrequest.ToSepa
		(*ToCounterparty)(nil),                              // 4: transactionrequest.ToCounterparty
		(*ToTransferToPhone)(nil),                           // 5: transactionrequest.ToTransferToPhone
		(*FromPhone)(nil),                                   // 6: transactionrequest.FromPhone
		(*ToPhone)(nil),                                     // 7: transactionrequest.ToPhone
		(*KycDocument)(nil),                                 // 8: transactionrequest.KycDocument
		(*To)(nil),                                          // 9: transactionrequest.To
		(*ToTransferToAtm)(nil),                             // 10: transactionrequest.ToTransferToAtm
		(*Account)(nil),                                     // 11: transactionrequest.Account
		(*ToAccount)(nil),                                   // 12: transactionrequest.ToAccount
		(*ToTransferToAccount)(nil),                         // 13: transactionrequest.ToTransferToAccount
		(*DebtorAccount)(nil),                               // 14: transactionrequest.DebtorAccount
		(*CreditorAccount)(nil),                             // 15: transactionrequest.CreditorAccount
		(*ToSepaCreditTransfers)(nil),                       // 16: transactionrequest.ToSepaCreditTransfers
		(*Details)(nil),                                     // 17: transactionrequest.Details
		(*Challenge)(nil),                                   // 18: transactionrequest.Challenge
		(*Charge)(nil),                                      // 19: transactionrequest.Charge
		(*CounterPartyTransactionRequest)(nil),              // 20: transactionrequest.CounterPartyTransactionRequest
		(*FreeFormTransactionRequest)(nil),                  // 21: transactionrequest.FreeFormTransactionRequest
		(*SEPATransactionRequest)(nil),                      // 22: transactionrequest.SEPATransactionRequest
		(*GetTransactionRequestTypesRequest)(nil),           // 23: transactionrequest.GetTransactionRequestTypesRequest
		(*GetTransactionRequestTypesResponse)(nil),          // 24: transactionrequest.GetTransactionRequestTypesResponse
		(*TransactionRequestType)(nil),                      // 25: transactionrequest.TransactionRequestType
		(*GetTransactionRequestsRequest)(nil),               // 26: transactionrequest.GetTransactionRequestsRequest
		(*GetTransactionRequestsResponse)(nil),              // 27: transactionrequest.GetTransactionRequestsResponse
		(*TransactionRequestsWithCharges)(nil),              // 28: transactionrequest.TransactionRequestsWithCharges
		(*GetSupportedTransactionRequestTypesRequest)(nil),  // 29: transactionrequest.GetSupportedTransactionRequestTypesRequest
		(*GetSupportedTransactionRequestTypesResponse)(nil), // 30: transactionrequest.GetSupportedTransactionRequestTypesResponse
		(*AnswerTransactionRequestChallengeRequest)(nil),    // 31: transactionrequest.AnswerTransactionRequestChallengeRequest
		(*AnswerTransactionRequestChallengeResponse)(nil),   // 32: transactionrequest.AnswerTransactionRequestChallengeResponse
		(*ChallengeDetails)(nil),                            // 33: transactionrequest.ChallengeDetails
		(*HistoricTransaction)(nil),                         // 34: transactionrequest.HistoricTransaction
		(*types.Amount)(nil),                                // 35: types.Amount
		(*timestamppb.Timestamp)(nil),                       // 36: google.protobuf.Timestamp
	}
)

var file_github_com_openbank_openbank_v1_transactionrequest_all_proto_depIdxs = []int32{
	1,  // 0: transactionrequest.TransactionRequest.To:type_name -> transactionrequest.BankAccount
	35, // 1: transactionrequest.TransactionRequest.Amount:type_name -> types.Amount
	1,  // 2: transactionrequest.TransactionResponse.From:type_name -> transactionrequest.BankAccount
	17, // 3: transactionrequest.TransactionResponse.Details:type_name -> transactionrequest.Details
	36, // 4: transactionrequest.TransactionResponse.StartDate:type_name -> google.protobuf.Timestamp
	36, // 5: transactionrequest.TransactionResponse.EndDate:type_name -> google.protobuf.Timestamp
	18, // 6: transactionrequest.TransactionResponse.Challenge:type_name -> transactionrequest.Challenge
	19, // 7: transactionrequest.TransactionResponse.Charge:type_name -> transactionrequest.Charge
	35, // 8: transactionrequest.ToTransferToPhone.Amount:type_name -> types.Amount
	6,  // 9: transactionrequest.ToTransferToPhone.From:type_name -> transactionrequest.FromPhone
	7,  // 10: transactionrequest.ToTransferToPhone.To:type_name -> transactionrequest.ToPhone
	8,  // 11: transactionrequest.To.KycDocument:type_name -> transactionrequest.KycDocument
	35, // 12: transactionrequest.ToTransferToAtm.Amount:type_name -> types.Amount
	6,  // 13: transactionrequest.ToTransferToAtm.From:type_name -> transactionrequest.FromPhone
	7,  // 14: transactionrequest.ToTransferToAtm.To:type_name -> transactionrequest.ToPhone
	11, // 15: transactionrequest.ToAccount.Account:type_name -> transactionrequest.Account
	35, // 16: transactionrequest.ToTransferToAccount.Amount:type_name -> types.Amount
	9,  // 17: transactionrequest.ToTransferToAccount.To:type_name -> transactionrequest.To
	14, // 18: transactionrequest.ToSepaCreditTransfers.DebtorAccount:type_name -> transactionrequest.DebtorAccount
	35, // 19: transactionrequest.ToSepaCreditTransfers.InstructedAmount:type_name -> types.Amount
	15, // 20: transactionrequest.ToSepaCreditTransfers.CreditorAccount:type_name -> transactionrequest.CreditorAccount
	1,  // 21: transactionrequest.Details.ToSandboxTan:type_name -> transactionrequest.BankAccount
	3,  // 22: transactionrequest.Details.ToSepa:type_name -> transactionrequest.ToSepa
	4,  // 23: transactionrequest.Details.ToCounterparty:type_name -> transactionrequest.ToCounterparty
	5,  // 24: transactionrequest.Details.ToTransferToPhone:type_name -> transactionrequest.ToTransferToPhone
	10, // 25: transactionrequest.Details.ToTransferToAtm:type_name -> transactionrequest.ToTransferToAtm
	13, // 26: transactionrequest.Details.ToTransferToAccount:type_name -> transactionrequest.ToTransferToAccount
	16, // 27: transactionrequest.Details.ToSepaCreditTransfers:type_name -> transactionrequest.ToSepaCreditTransfers
	35, // 28: transactionrequest.Details.Amount:type_name -> types.Amount
	35, // 29: transactionrequest.Charge.Amount:type_name -> types.Amount
	4,  // 30: transactionrequest.CounterPartyTransactionRequest.To:type_name -> transactionrequest.ToCounterparty
	35, // 31: transactionrequest.CounterPartyTransactionRequest.Amount:type_name -> types.Amount
	35, // 32: transactionrequest.FreeFormTransactionRequest.Amount:type_name -> types.Amount
	35, // 33: transactionrequest.SEPATransactionRequest.Amount:type_name -> types.Amount
	3,  // 34: transactionrequest.SEPATransactionRequest.To:type_name -> transactionrequest.ToSepa
	25, // 35: transactionrequest.GetTransactionRequestTypesResponse.TransactionRequestTypes:type_name -> transactionrequest.TransactionRequestType
	19, // 36: transactionrequest.TransactionRequestType.Charge:type_name -> transactionrequest.Charge
	28, // 37: transactionrequest.GetTransactionRequestsResponse.TransactionRequestsWithCharges:type_name -> transactionrequest.TransactionRequestsWithCharges
	6,  // 38: transactionrequest.TransactionRequestsWithCharges.From:type_name -> transactionrequest.FromPhone
	17, // 39: transactionrequest.TransactionRequestsWithCharges.Details:type_name -> transactionrequest.Details
	36, // 40: transactionrequest.TransactionRequestsWithCharges.StartDate:type_name -> google.protobuf.Timestamp
	36, // 41: transactionrequest.TransactionRequestsWithCharges.EndDate:type_name -> google.protobuf.Timestamp
	18, // 42: transactionrequest.TransactionRequestsWithCharges.Challenge:type_name -> transactionrequest.Challenge
	19, // 43: transactionrequest.TransactionRequestsWithCharges.Charge:type_name -> transactionrequest.Charge
	25, // 44: transactionrequest.GetSupportedTransactionRequestTypesResponse.TransactionRequestTypes:type_name -> transactionrequest.TransactionRequestType
	1,  // 45: transactionrequest.AnswerTransactionRequestChallengeResponse.From:type_name -> transactionrequest.BankAccount
	33, // 46: transactionrequest.AnswerTransactionRequestChallengeResponse.Details:type_name -> transactionrequest.ChallengeDetails
	36, // 47: transactionrequest.AnswerTransactionRequestChallengeResponse.StartDate:type_name -> google.protobuf.Timestamp
	36, // 48: transactionrequest.AnswerTransactionRequestChallengeResponse.EndDate:type_name -> google.protobuf.Timestamp
	18, // 49: transactionrequest.AnswerTransactionRequestChallengeResponse.Challenge:type_name -> transactionrequest.Challenge
	19, // 50: transactionrequest.AnswerTransactionRequestChallengeResponse.Charge:type_name -> transactionrequest.Charge
	1,  // 51: transactionrequest.ChallengeDetails.To:type_name -> transactionrequest.BankAccount
	35, // 52: transactionrequest.ChallengeDetails.Amount:type_name -> types.Amount
	1,  // 53: transactionrequest.HistoricTransaction.From:type_name -> transactionrequest.BankAccount
	1,  // 54: transactionrequest.HistoricTransaction.To:type_name -> transactionrequest.BankAccount
	35, // 55: transactionrequest.HistoricTransaction.Amount:type_name -> types.Amount
	36, // 56: transactionrequest.HistoricTransaction.Posted:type_name -> google.protobuf.Timestamp
	36, // 57: transactionrequest.HistoricTransaction.Completed:type_name -> google.protobuf.Timestamp
	31, // 58: transactionrequest.TransactionRequestService.AnswerTransactionRequestChallenge:input_type -> transactionrequest.AnswerTransactionRequestChallengeRequest
	0,  // 59: transactionrequest.TransactionRequestService.CreateAccountTransaction:input_type -> transactionrequest.TransactionRequest
	0,  // 60: transactionrequest.TransactionRequestService.CreateAccountOTPTransaction:input_type -> transactionrequest.TransactionRequest
	20, // 61: transactionrequest.TransactionRequestService.CreateCounterPartyTransaction:input_type -> transactionrequest.CounterPartyTransactionRequest
	21, // 62: transactionrequest.TransactionRequestService.CreateFreeFormTransaction:input_type -> transactionrequest.FreeFormTransactionRequest
	22, // 63: transactionrequest.TransactionRequestService.CreateSEPATransaction:input_type -> transactionrequest.SEPATransactionRequest
	23, // 64: transactionrequest.TransactionRequestService.GetTransactionRequestTypes:input_type -> transactionrequest.GetTransactionRequestTypesRequest
	29, // 65: transactionrequest.TransactionRequestService.GetSupportedTransactionRequestTypes:input_type -> transactionrequest.GetSupportedTransactionRequestTypesRequest
	26, // 66: transactionrequest.TransactionRequestService.GetTransactionRequests:input_type -> transactionrequest.GetTransactionRequestsRequest
	34, // 67: transactionrequest.TransactionRequestService.SaveHistoricTransaction:input_type -> transactionrequest.HistoricTransaction
	32, // 68: transactionrequest.TransactionRequestService.AnswerTransactionRequestChallenge:output_type -> transactionrequest.AnswerTransactionRequestChallengeResponse
	2,  // 69: transactionrequest.TransactionRequestService.CreateAccountTransaction:output_type -> transactionrequest.TransactionResponse
	2,  // 70: transactionrequest.TransactionRequestService.CreateAccountOTPTransaction:output_type -> transactionrequest.TransactionResponse
	2,  // 71: transactionrequest.TransactionRequestService.CreateCounterPartyTransaction:output_type -> transactionrequest.TransactionResponse
	2,  // 72: transactionrequest.TransactionRequestService.CreateFreeFormTransaction:output_type -> transactionrequest.TransactionResponse
	2,  // 73: transactionrequest.TransactionRequestService.CreateSEPATransaction:output_type -> transactionrequest.TransactionResponse
	24, // 74: transactionrequest.TransactionRequestService.GetTransactionRequestTypes:output_type -> transactionrequest.GetTransactionRequestTypesResponse
	30, // 75: transactionrequest.TransactionRequestService.GetSupportedTransactionRequestTypes:output_type -> transactionrequest.GetSupportedTransactionRequestTypesResponse
	27, // 76: transactionrequest.TransactionRequestService.GetTransactionRequests:output_type -> transactionrequest.GetTransactionRequestsResponse
	34, // 77: transactionrequest.TransactionRequestService.SaveHistoricTransaction:output_type -> transactionrequest.HistoricTransaction
	68, // [68:78] is the sub-list for method output_type
	58, // [58:68] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_github_com_openbank_openbank_v1_transactionrequest_all_proto_init() }
func file_github_com_openbank_openbank_v1_transactionrequest_all_proto_init() {
	if File_github_com_openbank_openbank_v1_transactionrequest_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToSepa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToCounterparty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToTransferToPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KycDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*To); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToTransferToAtm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToTransferToAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebtorAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditorAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToSepaCreditTransfers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Charge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterPartyTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeFormTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SEPATransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequestTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequestTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRequestType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRequestsWithCharges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportedTransactionRequestTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportedTransactionRequestTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerTransactionRequestChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerTransactionRequestChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openbank_openbank_v1_transactionrequest_all_proto_goTypes,
		DependencyIndexes: file_github_com_openbank_openbank_v1_transactionrequest_all_proto_depIdxs,
		MessageInfos:      file_github_com_openbank_openbank_v1_transactionrequest_all_proto_msgTypes,
	}.Build()
	File_github_com_openbank_openbank_v1_transactionrequest_all_proto = out.File
	file_github_com_openbank_openbank_v1_transactionrequest_all_proto_rawDesc = nil
	file_github_com_openbank_openbank_v1_transactionrequest_all_proto_goTypes = nil
	file_github_com_openbank_openbank_v1_transactionrequest_all_proto_depIdxs = nil
}
