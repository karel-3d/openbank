// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transactionrequest

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionRequestServiceClient is the client API for TransactionRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionRequestServiceClient interface {
	// AnswerTransactionRequestChallenge sends the answer to the challenge for transaction request
	AnswerTransactionRequestChallenge(ctx context.Context, in *AnswerTransactionRequestChallengeRequest, opts ...grpc.CallOption) (*AnswerTransactionRequestChallengeResponse, error)
	// CreateAccountTransaction creates a new account transaction request
	CreateAccountTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// CreateAccountOTPTransaction creates a new account otp transaction request
	CreateAccountOTPTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// CreateCounterPartyTransaction creates a counter party transaction request
	CreateCounterPartyTransaction(ctx context.Context, in *CounterPartyTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// CreateFreeFormTransaction creates a free form transaction request
	CreateFreeFormTransaction(ctx context.Context, in *FreeFormTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// CreateSEPATransaction creates a SEPA transaction request
	CreateSEPATransaction(ctx context.Context, in *SEPATransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// GetTransactionRequestTypes retrieves the list of transaction request types
	GetTransactionRequestTypes(ctx context.Context, in *GetTransactionRequestTypesRequest, opts ...grpc.CallOption) (*GetTransactionRequestTypesResponse, error)
	// GetSupportedTransactionRequestTypes retrieves the list of supported transaction request types
	GetSupportedTransactionRequestTypes(ctx context.Context, in *GetSupportedTransactionRequestTypesRequest, opts ...grpc.CallOption) (*GetSupportedTransactionRequestTypesResponse, error)
	// GetTransactionRequests retrieves the list of transaction request for an account
	GetTransactionRequests(ctx context.Context, in *GetTransactionRequestsRequest, opts ...grpc.CallOption) (*GetTransactionRequestsResponse, error)
	// SaveHistoricTransaction imports a transaction
	SaveHistoricTransaction(ctx context.Context, in *HistoricTransaction, opts ...grpc.CallOption) (*HistoricTransaction, error)
}

type transactionRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionRequestServiceClient(cc grpc.ClientConnInterface) TransactionRequestServiceClient {
	return &transactionRequestServiceClient{cc}
}

func (c *transactionRequestServiceClient) AnswerTransactionRequestChallenge(ctx context.Context, in *AnswerTransactionRequestChallengeRequest, opts ...grpc.CallOption) (*AnswerTransactionRequestChallengeResponse, error) {
	out := new(AnswerTransactionRequestChallengeResponse)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/AnswerTransactionRequestChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRequestServiceClient) CreateAccountTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/CreateAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRequestServiceClient) CreateAccountOTPTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/CreateAccountOTPTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRequestServiceClient) CreateCounterPartyTransaction(ctx context.Context, in *CounterPartyTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/CreateCounterPartyTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRequestServiceClient) CreateFreeFormTransaction(ctx context.Context, in *FreeFormTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/CreateFreeFormTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRequestServiceClient) CreateSEPATransaction(ctx context.Context, in *SEPATransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/CreateSEPATransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRequestServiceClient) GetTransactionRequestTypes(ctx context.Context, in *GetTransactionRequestTypesRequest, opts ...grpc.CallOption) (*GetTransactionRequestTypesResponse, error) {
	out := new(GetTransactionRequestTypesResponse)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/GetTransactionRequestTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRequestServiceClient) GetSupportedTransactionRequestTypes(ctx context.Context, in *GetSupportedTransactionRequestTypesRequest, opts ...grpc.CallOption) (*GetSupportedTransactionRequestTypesResponse, error) {
	out := new(GetSupportedTransactionRequestTypesResponse)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/GetSupportedTransactionRequestTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRequestServiceClient) GetTransactionRequests(ctx context.Context, in *GetTransactionRequestsRequest, opts ...grpc.CallOption) (*GetTransactionRequestsResponse, error) {
	out := new(GetTransactionRequestsResponse)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/GetTransactionRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionRequestServiceClient) SaveHistoricTransaction(ctx context.Context, in *HistoricTransaction, opts ...grpc.CallOption) (*HistoricTransaction, error) {
	out := new(HistoricTransaction)
	err := c.cc.Invoke(ctx, "/transactionrequest.TransactionRequestService/SaveHistoricTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionRequestServiceServer is the server API for TransactionRequestService service.
// All implementations must embed UnimplementedTransactionRequestServiceServer
// for forward compatibility
type TransactionRequestServiceServer interface {
	// AnswerTransactionRequestChallenge sends the answer to the challenge for transaction request
	AnswerTransactionRequestChallenge(context.Context, *AnswerTransactionRequestChallengeRequest) (*AnswerTransactionRequestChallengeResponse, error)
	// CreateAccountTransaction creates a new account transaction request
	CreateAccountTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// CreateAccountOTPTransaction creates a new account otp transaction request
	CreateAccountOTPTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	// CreateCounterPartyTransaction creates a counter party transaction request
	CreateCounterPartyTransaction(context.Context, *CounterPartyTransactionRequest) (*TransactionResponse, error)
	// CreateFreeFormTransaction creates a free form transaction request
	CreateFreeFormTransaction(context.Context, *FreeFormTransactionRequest) (*TransactionResponse, error)
	// CreateSEPATransaction creates a SEPA transaction request
	CreateSEPATransaction(context.Context, *SEPATransactionRequest) (*TransactionResponse, error)
	// GetTransactionRequestTypes retrieves the list of transaction request types
	GetTransactionRequestTypes(context.Context, *GetTransactionRequestTypesRequest) (*GetTransactionRequestTypesResponse, error)
	// GetSupportedTransactionRequestTypes retrieves the list of supported transaction request types
	GetSupportedTransactionRequestTypes(context.Context, *GetSupportedTransactionRequestTypesRequest) (*GetSupportedTransactionRequestTypesResponse, error)
	// GetTransactionRequests retrieves the list of transaction request for an account
	GetTransactionRequests(context.Context, *GetTransactionRequestsRequest) (*GetTransactionRequestsResponse, error)
	// SaveHistoricTransaction imports a transaction
	SaveHistoricTransaction(context.Context, *HistoricTransaction) (*HistoricTransaction, error)
	mustEmbedUnimplementedTransactionRequestServiceServer()
}

// UnimplementedTransactionRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionRequestServiceServer struct{}

func (UnimplementedTransactionRequestServiceServer) AnswerTransactionRequestChallenge(context.Context, *AnswerTransactionRequestChallengeRequest) (*AnswerTransactionRequestChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerTransactionRequestChallenge not implemented")
}

func (UnimplementedTransactionRequestServiceServer) CreateAccountTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountTransaction not implemented")
}

func (UnimplementedTransactionRequestServiceServer) CreateAccountOTPTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountOTPTransaction not implemented")
}

func (UnimplementedTransactionRequestServiceServer) CreateCounterPartyTransaction(context.Context, *CounterPartyTransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCounterPartyTransaction not implemented")
}

func (UnimplementedTransactionRequestServiceServer) CreateFreeFormTransaction(context.Context, *FreeFormTransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFreeFormTransaction not implemented")
}

func (UnimplementedTransactionRequestServiceServer) CreateSEPATransaction(context.Context, *SEPATransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSEPATransaction not implemented")
}

func (UnimplementedTransactionRequestServiceServer) GetTransactionRequestTypes(context.Context, *GetTransactionRequestTypesRequest) (*GetTransactionRequestTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionRequestTypes not implemented")
}

func (UnimplementedTransactionRequestServiceServer) GetSupportedTransactionRequestTypes(context.Context, *GetSupportedTransactionRequestTypesRequest) (*GetSupportedTransactionRequestTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedTransactionRequestTypes not implemented")
}

func (UnimplementedTransactionRequestServiceServer) GetTransactionRequests(context.Context, *GetTransactionRequestsRequest) (*GetTransactionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionRequests not implemented")
}

func (UnimplementedTransactionRequestServiceServer) SaveHistoricTransaction(context.Context, *HistoricTransaction) (*HistoricTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveHistoricTransaction not implemented")
}

func (UnimplementedTransactionRequestServiceServer) mustEmbedUnimplementedTransactionRequestServiceServer() {
}

// UnsafeTransactionRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionRequestServiceServer will
// result in compilation errors.
type UnsafeTransactionRequestServiceServer interface {
	mustEmbedUnimplementedTransactionRequestServiceServer()
}

func RegisterTransactionRequestServiceServer(s grpc.ServiceRegistrar, srv TransactionRequestServiceServer) {
	s.RegisterService(&TransactionRequestService_ServiceDesc, srv)
}

func _TransactionRequestService_AnswerTransactionRequestChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerTransactionRequestChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).AnswerTransactionRequestChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/AnswerTransactionRequestChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).AnswerTransactionRequestChallenge(ctx, req.(*AnswerTransactionRequestChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRequestService_CreateAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).CreateAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/CreateAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).CreateAccountTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRequestService_CreateAccountOTPTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).CreateAccountOTPTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/CreateAccountOTPTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).CreateAccountOTPTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRequestService_CreateCounterPartyTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterPartyTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).CreateCounterPartyTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/CreateCounterPartyTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).CreateCounterPartyTransaction(ctx, req.(*CounterPartyTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRequestService_CreateFreeFormTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeFormTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).CreateFreeFormTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/CreateFreeFormTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).CreateFreeFormTransaction(ctx, req.(*FreeFormTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRequestService_CreateSEPATransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SEPATransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).CreateSEPATransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/CreateSEPATransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).CreateSEPATransaction(ctx, req.(*SEPATransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRequestService_GetTransactionRequestTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequestTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).GetTransactionRequestTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/GetTransactionRequestTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).GetTransactionRequestTypes(ctx, req.(*GetTransactionRequestTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRequestService_GetSupportedTransactionRequestTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedTransactionRequestTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).GetSupportedTransactionRequestTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/GetSupportedTransactionRequestTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).GetSupportedTransactionRequestTypes(ctx, req.(*GetSupportedTransactionRequestTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRequestService_GetTransactionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).GetTransactionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/GetTransactionRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).GetTransactionRequests(ctx, req.(*GetTransactionRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionRequestService_SaveHistoricTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionRequestServiceServer).SaveHistoricTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionrequest.TransactionRequestService/SaveHistoricTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionRequestServiceServer).SaveHistoricTransaction(ctx, req.(*HistoricTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionRequestService_ServiceDesc is the grpc.ServiceDesc for TransactionRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transactionrequest.TransactionRequestService",
	HandlerType: (*TransactionRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnswerTransactionRequestChallenge",
			Handler:    _TransactionRequestService_AnswerTransactionRequestChallenge_Handler,
		},
		{
			MethodName: "CreateAccountTransaction",
			Handler:    _TransactionRequestService_CreateAccountTransaction_Handler,
		},
		{
			MethodName: "CreateAccountOTPTransaction",
			Handler:    _TransactionRequestService_CreateAccountOTPTransaction_Handler,
		},
		{
			MethodName: "CreateCounterPartyTransaction",
			Handler:    _TransactionRequestService_CreateCounterPartyTransaction_Handler,
		},
		{
			MethodName: "CreateFreeFormTransaction",
			Handler:    _TransactionRequestService_CreateFreeFormTransaction_Handler,
		},
		{
			MethodName: "CreateSEPATransaction",
			Handler:    _TransactionRequestService_CreateSEPATransaction_Handler,
		},
		{
			MethodName: "GetTransactionRequestTypes",
			Handler:    _TransactionRequestService_GetTransactionRequestTypes_Handler,
		},
		{
			MethodName: "GetSupportedTransactionRequestTypes",
			Handler:    _TransactionRequestService_GetSupportedTransactionRequestTypes_Handler,
		},
		{
			MethodName: "GetTransactionRequests",
			Handler:    _TransactionRequestService_GetTransactionRequests_Handler,
		},
		{
			MethodName: "SaveHistoricTransaction",
			Handler:    _TransactionRequestService_SaveHistoricTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/transactionrequest/all.proto",
}
