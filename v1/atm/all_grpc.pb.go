// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package atm

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ATMServiceClient is the client API for ATMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ATMServiceClient interface {
	// GetATM retrieves the details regarding an specific ATM.
	GetATM(ctx context.Context, in *GetATMRequest, opts ...grpc.CallOption) (*ATM, error)
	// GetATMs retrieves information regarding all the available ATMs.
	GetATMs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetATMsResponse, error)
	// CreateATM creates a new ATM and returns its id.
	CreateATM(ctx context.Context, in *CreateATMRequest, opts ...grpc.CallOption) (*CreateATMResponse, error)
}

type aTMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewATMServiceClient(cc grpc.ClientConnInterface) ATMServiceClient {
	return &aTMServiceClient{cc}
}

func (c *aTMServiceClient) GetATM(ctx context.Context, in *GetATMRequest, opts ...grpc.CallOption) (*ATM, error) {
	out := new(ATM)
	err := c.cc.Invoke(ctx, "/atm.ATMService/GetATM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aTMServiceClient) GetATMs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetATMsResponse, error) {
	out := new(GetATMsResponse)
	err := c.cc.Invoke(ctx, "/atm.ATMService/GetATMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aTMServiceClient) CreateATM(ctx context.Context, in *CreateATMRequest, opts ...grpc.CallOption) (*CreateATMResponse, error) {
	out := new(CreateATMResponse)
	err := c.cc.Invoke(ctx, "/atm.ATMService/CreateATM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ATMServiceServer is the server API for ATMService service.
// All implementations must embed UnimplementedATMServiceServer
// for forward compatibility
type ATMServiceServer interface {
	// GetATM retrieves the details regarding an specific ATM.
	GetATM(context.Context, *GetATMRequest) (*ATM, error)
	// GetATMs retrieves information regarding all the available ATMs.
	GetATMs(context.Context, *emptypb.Empty) (*GetATMsResponse, error)
	// CreateATM creates a new ATM and returns its id.
	CreateATM(context.Context, *CreateATMRequest) (*CreateATMResponse, error)
	mustEmbedUnimplementedATMServiceServer()
}

// UnimplementedATMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedATMServiceServer struct{}

func (UnimplementedATMServiceServer) GetATM(context.Context, *GetATMRequest) (*ATM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetATM not implemented")
}

func (UnimplementedATMServiceServer) GetATMs(context.Context, *emptypb.Empty) (*GetATMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetATMs not implemented")
}

func (UnimplementedATMServiceServer) CreateATM(context.Context, *CreateATMRequest) (*CreateATMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateATM not implemented")
}
func (UnimplementedATMServiceServer) mustEmbedUnimplementedATMServiceServer() {}

// UnsafeATMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ATMServiceServer will
// result in compilation errors.
type UnsafeATMServiceServer interface {
	mustEmbedUnimplementedATMServiceServer()
}

func RegisterATMServiceServer(s grpc.ServiceRegistrar, srv ATMServiceServer) {
	s.RegisterService(&ATMService_ServiceDesc, srv)
}

func _ATMService_GetATM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetATMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ATMServiceServer).GetATM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atm.ATMService/GetATM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ATMServiceServer).GetATM(ctx, req.(*GetATMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ATMService_GetATMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ATMServiceServer).GetATMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atm.ATMService/GetATMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ATMServiceServer).GetATMs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ATMService_CreateATM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateATMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ATMServiceServer).CreateATM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atm.ATMService/CreateATM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ATMServiceServer).CreateATM(ctx, req.(*CreateATMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ATMService_ServiceDesc is the grpc.ServiceDesc for ATMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ATMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atm.ATMService",
	HandlerType: (*ATMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetATM",
			Handler:    _ATMService_GetATM_Handler,
		},
		{
			MethodName: "GetATMs",
			Handler:    _ATMService_GetATMs_Handler,
		},
		{
			MethodName: "CreateATM",
			Handler:    _ATMService_CreateATM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/atm/all.proto",
}
