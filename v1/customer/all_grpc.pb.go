// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package customer

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	// AddAddressToCustomer Add an Address to the Customer specified by CUSTOMER_ID.
	AddAddressToCustomer(ctx context.Context, in *AddAddressToCustomerRequest, opts ...grpc.CallOption) (*AddAddressToCustomerResponse, error)
	// AddSocialMediaHandle Add a social media handle for the customer specified by CUSTOMER_ID.
	AddSocialMediaHandle(ctx context.Context, in *AddSocialMediaHandleRequest, opts ...grpc.CallOption) (*AddSocialMediaHandleResponse, error)
	// CreateCustomer creates a new customer
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	// CreateCreditLimitOrder creates a new customer
	CreateCreditLimitOrder(ctx context.Context, in *CreateCreditLimitOrderRequest, opts ...grpc.CallOption) (*CreateCreditLimitOrderResponse, error)
	// CreateUserCustomerLink creates a new user customer link.
	CreateUserCustomerLink(ctx context.Context, in *CreateUserCustomerLinkRequest, opts ...grpc.CallOption) (*CreateUserCustomerLinkResponse, error)
	// DeleteCustomerAddress delete the customer address.
	DeleteCustomerAddress(ctx context.Context, in *DeleteCustomerAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTaxResidence delete the tax residence.
	DeleteTaxResidence(ctx context.Context, in *DeleteTaxResidenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetCRMEvents returns a list containing up to 20 crm events.
	GetCRMEvents(ctx context.Context, in *GetCRMEventsRequest, opts ...grpc.CallOption) (*GetCRMEventsResponse, error)
	// GetCreditLimitOrderByID
	GetCreditLimitOrderByID(ctx context.Context, in *GetCreditLimitOrderByIDRequest, opts ...grpc.CallOption) (*GetCreditLimitOrderByIDResponse, error)
	// GetCreditLimitOrder
	GetCreditLimitOrder(ctx context.Context, in *GetCreditLimitOrderRequest, opts ...grpc.CallOption) (*GetCreditLimitOrderResponse, error)
	// GetCustomerAddresses
	GetCustomerAddresses(ctx context.Context, in *GetCustomerAddressesRequest, opts ...grpc.CallOption) (*GetCustomerAddressesResponse, error)
	// GetCustomerSocialMediaHandles
	GetCustomerSocialMediaHandles(ctx context.Context, in *GetCustomerSocialMediaHandlesRequest, opts ...grpc.CallOption) (*GetCustomerSocialMediaHandlesResponse, error)
	// GetCustomerByCustomerID
	GetCustomerByCustomerID(ctx context.Context, in *GetCustomerByCustomerIDRequest, opts ...grpc.CallOption) (*Customer, error)
	// GetCustomerByCustomerNumber
	GetCustomerByCustomerNumber(ctx context.Context, in *GetCustomerByCustomerNumberRequest, opts ...grpc.CallOption) (*Customer, error)
	// GetCustomerForCurrentUser
	GetCustomersForCurrentUser(ctx context.Context, in *GetCustomersForCurrentUserRequest, opts ...grpc.CallOption) (*GetCustomersForCurrentUserResponse, error)
	// GetCustomerForCurrentUserAtBank
	GetCustomersForCurrentUserAtBank(ctx context.Context, in *GetCustomersForCurrentUserAtBankRequest, opts ...grpc.CallOption) (*GetCustomersForCurrentUserAtBankResponse, error)
	// GetFirehoseCustomer
	GetFirehoseCustomer(ctx context.Context, in *GetFirehoseCustomerRequest, opts ...grpc.CallOption) (*GetFirehoseCustomerResponse, error)
	// GetTaxResidenceOfCustomer
	GetTaxResidenceOfCustomer(ctx context.Context, in *GetTaxResidenceOfCustomerRequest, opts ...grpc.CallOption) (*GetTaxResidenceOfCustomerResponse, error)
	// UpdateCustomerAddress
	UpdateCustomerAddress(ctx context.Context, in *UpdateCustomerAddressRequest, opts ...grpc.CallOption) (*UpdateCustomerAddressResponse, error)
	// UpdateCustomerBranch.
	UpdateCustomerBranch(ctx context.Context, in *UpdateCustomerBranchRequest, opts ...grpc.CallOption) (*UpdateCustomerBranchResponse, error)
	// UpdateCustomerCreditLimit.
	UpdateCustomerCreditLimit(ctx context.Context, in *UpdateCustomerCreditLimitRequest, opts ...grpc.CallOption) (*UpdateCustomerCreditLimitResponse, error)
	// UpdateCustomerCreditRatingAndSource.
	UpdateCustomerCreditRatingAndSource(ctx context.Context, in *UpdateCustomerCreditRatingAndSourceRequest, opts ...grpc.CallOption) (*UpdateCustomerCreditRatingAndSourceResponse, error)
	// UpdateCustomerEmail.
	UpdateCustomerEmail(ctx context.Context, in *UpdateCustomerEmailRequest, opts ...grpc.CallOption) (*UpdateCustomerEmailResponse, error)
	// UpdateCustomerIdentity.
	UpdateCustomerIdentity(ctx context.Context, in *UpdateCustomerIdentityRequest, opts ...grpc.CallOption) (*UpdateCustomerIdentityResponse, error)
	// UpdateCustomerMobileNumber.
	UpdateCustomerMobileNumber(ctx context.Context, in *UpdateCustomerMobileNumberRequest, opts ...grpc.CallOption) (*UpdateCustomerMobileNumberResponse, error)
	// UpdateCustomerNumber.
	UpdateCustomerNumber(ctx context.Context, in *UpdateCustomerNumberRequest, opts ...grpc.CallOption) (*UpdateCustomerNumberResponse, error)
	// UpdateCustomerOtherData.
	UpdateCustomerOtherData(ctx context.Context, in *UpdateCustomerOtherDataRequest, opts ...grpc.CallOption) (*UpdateCustomerOtherDataResponse, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) AddAddressToCustomer(ctx context.Context, in *AddAddressToCustomerRequest, opts ...grpc.CallOption) (*AddAddressToCustomerResponse, error) {
	out := new(AddAddressToCustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/AddAddressToCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) AddSocialMediaHandle(ctx context.Context, in *AddSocialMediaHandleRequest, opts ...grpc.CallOption) (*AddSocialMediaHandleResponse, error) {
	out := new(AddSocialMediaHandleResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/AddSocialMediaHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CreateCreditLimitOrder(ctx context.Context, in *CreateCreditLimitOrderRequest, opts ...grpc.CallOption) (*CreateCreditLimitOrderResponse, error) {
	out := new(CreateCreditLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CreateCreditLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) CreateUserCustomerLink(ctx context.Context, in *CreateUserCustomerLinkRequest, opts ...grpc.CallOption) (*CreateUserCustomerLinkResponse, error) {
	out := new(CreateUserCustomerLinkResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CreateUserCustomerLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteCustomerAddress(ctx context.Context, in *DeleteCustomerAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/DeleteCustomerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteTaxResidence(ctx context.Context, in *DeleteTaxResidenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/DeleteTaxResidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCRMEvents(ctx context.Context, in *GetCRMEventsRequest, opts ...grpc.CallOption) (*GetCRMEventsResponse, error) {
	out := new(GetCRMEventsResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCRMEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCreditLimitOrderByID(ctx context.Context, in *GetCreditLimitOrderByIDRequest, opts ...grpc.CallOption) (*GetCreditLimitOrderByIDResponse, error) {
	out := new(GetCreditLimitOrderByIDResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCreditLimitOrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCreditLimitOrder(ctx context.Context, in *GetCreditLimitOrderRequest, opts ...grpc.CallOption) (*GetCreditLimitOrderResponse, error) {
	out := new(GetCreditLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCreditLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerAddresses(ctx context.Context, in *GetCustomerAddressesRequest, opts ...grpc.CallOption) (*GetCustomerAddressesResponse, error) {
	out := new(GetCustomerAddressesResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomerAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerSocialMediaHandles(ctx context.Context, in *GetCustomerSocialMediaHandlesRequest, opts ...grpc.CallOption) (*GetCustomerSocialMediaHandlesResponse, error) {
	out := new(GetCustomerSocialMediaHandlesResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomerSocialMediaHandles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerByCustomerID(ctx context.Context, in *GetCustomerByCustomerIDRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomerByCustomerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomerByCustomerNumber(ctx context.Context, in *GetCustomerByCustomerNumberRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomerByCustomerNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomersForCurrentUser(ctx context.Context, in *GetCustomersForCurrentUserRequest, opts ...grpc.CallOption) (*GetCustomersForCurrentUserResponse, error) {
	out := new(GetCustomersForCurrentUserResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomersForCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomersForCurrentUserAtBank(ctx context.Context, in *GetCustomersForCurrentUserAtBankRequest, opts ...grpc.CallOption) (*GetCustomersForCurrentUserAtBankResponse, error) {
	out := new(GetCustomersForCurrentUserAtBankResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomersForCurrentUserAtBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetFirehoseCustomer(ctx context.Context, in *GetFirehoseCustomerRequest, opts ...grpc.CallOption) (*GetFirehoseCustomerResponse, error) {
	out := new(GetFirehoseCustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetFirehoseCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetTaxResidenceOfCustomer(ctx context.Context, in *GetTaxResidenceOfCustomerRequest, opts ...grpc.CallOption) (*GetTaxResidenceOfCustomerResponse, error) {
	out := new(GetTaxResidenceOfCustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetTaxResidenceOfCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerAddress(ctx context.Context, in *UpdateCustomerAddressRequest, opts ...grpc.CallOption) (*UpdateCustomerAddressResponse, error) {
	out := new(UpdateCustomerAddressResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomerAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerBranch(ctx context.Context, in *UpdateCustomerBranchRequest, opts ...grpc.CallOption) (*UpdateCustomerBranchResponse, error) {
	out := new(UpdateCustomerBranchResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomerBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerCreditLimit(ctx context.Context, in *UpdateCustomerCreditLimitRequest, opts ...grpc.CallOption) (*UpdateCustomerCreditLimitResponse, error) {
	out := new(UpdateCustomerCreditLimitResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomerCreditLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerCreditRatingAndSource(ctx context.Context, in *UpdateCustomerCreditRatingAndSourceRequest, opts ...grpc.CallOption) (*UpdateCustomerCreditRatingAndSourceResponse, error) {
	out := new(UpdateCustomerCreditRatingAndSourceResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomerCreditRatingAndSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerEmail(ctx context.Context, in *UpdateCustomerEmailRequest, opts ...grpc.CallOption) (*UpdateCustomerEmailResponse, error) {
	out := new(UpdateCustomerEmailResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomerEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerIdentity(ctx context.Context, in *UpdateCustomerIdentityRequest, opts ...grpc.CallOption) (*UpdateCustomerIdentityResponse, error) {
	out := new(UpdateCustomerIdentityResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomerIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerMobileNumber(ctx context.Context, in *UpdateCustomerMobileNumberRequest, opts ...grpc.CallOption) (*UpdateCustomerMobileNumberResponse, error) {
	out := new(UpdateCustomerMobileNumberResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomerMobileNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerNumber(ctx context.Context, in *UpdateCustomerNumberRequest, opts ...grpc.CallOption) (*UpdateCustomerNumberResponse, error) {
	out := new(UpdateCustomerNumberResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomerNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerOtherData(ctx context.Context, in *UpdateCustomerOtherDataRequest, opts ...grpc.CallOption) (*UpdateCustomerOtherDataResponse, error) {
	out := new(UpdateCustomerOtherDataResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomerOtherData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	// AddAddressToCustomer Add an Address to the Customer specified by CUSTOMER_ID.
	AddAddressToCustomer(context.Context, *AddAddressToCustomerRequest) (*AddAddressToCustomerResponse, error)
	// AddSocialMediaHandle Add a social media handle for the customer specified by CUSTOMER_ID.
	AddSocialMediaHandle(context.Context, *AddSocialMediaHandleRequest) (*AddSocialMediaHandleResponse, error)
	// CreateCustomer creates a new customer
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	// CreateCreditLimitOrder creates a new customer
	CreateCreditLimitOrder(context.Context, *CreateCreditLimitOrderRequest) (*CreateCreditLimitOrderResponse, error)
	// CreateUserCustomerLink creates a new user customer link.
	CreateUserCustomerLink(context.Context, *CreateUserCustomerLinkRequest) (*CreateUserCustomerLinkResponse, error)
	// DeleteCustomerAddress delete the customer address.
	DeleteCustomerAddress(context.Context, *DeleteCustomerAddressRequest) (*emptypb.Empty, error)
	// DeleteTaxResidence delete the tax residence.
	DeleteTaxResidence(context.Context, *DeleteTaxResidenceRequest) (*emptypb.Empty, error)
	// GetCRMEvents returns a list containing up to 20 crm events.
	GetCRMEvents(context.Context, *GetCRMEventsRequest) (*GetCRMEventsResponse, error)
	// GetCreditLimitOrderByID
	GetCreditLimitOrderByID(context.Context, *GetCreditLimitOrderByIDRequest) (*GetCreditLimitOrderByIDResponse, error)
	// GetCreditLimitOrder
	GetCreditLimitOrder(context.Context, *GetCreditLimitOrderRequest) (*GetCreditLimitOrderResponse, error)
	// GetCustomerAddresses
	GetCustomerAddresses(context.Context, *GetCustomerAddressesRequest) (*GetCustomerAddressesResponse, error)
	// GetCustomerSocialMediaHandles
	GetCustomerSocialMediaHandles(context.Context, *GetCustomerSocialMediaHandlesRequest) (*GetCustomerSocialMediaHandlesResponse, error)
	// GetCustomerByCustomerID
	GetCustomerByCustomerID(context.Context, *GetCustomerByCustomerIDRequest) (*Customer, error)
	// GetCustomerByCustomerNumber
	GetCustomerByCustomerNumber(context.Context, *GetCustomerByCustomerNumberRequest) (*Customer, error)
	// GetCustomerForCurrentUser
	GetCustomersForCurrentUser(context.Context, *GetCustomersForCurrentUserRequest) (*GetCustomersForCurrentUserResponse, error)
	// GetCustomerForCurrentUserAtBank
	GetCustomersForCurrentUserAtBank(context.Context, *GetCustomersForCurrentUserAtBankRequest) (*GetCustomersForCurrentUserAtBankResponse, error)
	// GetFirehoseCustomer
	GetFirehoseCustomer(context.Context, *GetFirehoseCustomerRequest) (*GetFirehoseCustomerResponse, error)
	// GetTaxResidenceOfCustomer
	GetTaxResidenceOfCustomer(context.Context, *GetTaxResidenceOfCustomerRequest) (*GetTaxResidenceOfCustomerResponse, error)
	// UpdateCustomerAddress
	UpdateCustomerAddress(context.Context, *UpdateCustomerAddressRequest) (*UpdateCustomerAddressResponse, error)
	// UpdateCustomerBranch.
	UpdateCustomerBranch(context.Context, *UpdateCustomerBranchRequest) (*UpdateCustomerBranchResponse, error)
	// UpdateCustomerCreditLimit.
	UpdateCustomerCreditLimit(context.Context, *UpdateCustomerCreditLimitRequest) (*UpdateCustomerCreditLimitResponse, error)
	// UpdateCustomerCreditRatingAndSource.
	UpdateCustomerCreditRatingAndSource(context.Context, *UpdateCustomerCreditRatingAndSourceRequest) (*UpdateCustomerCreditRatingAndSourceResponse, error)
	// UpdateCustomerEmail.
	UpdateCustomerEmail(context.Context, *UpdateCustomerEmailRequest) (*UpdateCustomerEmailResponse, error)
	// UpdateCustomerIdentity.
	UpdateCustomerIdentity(context.Context, *UpdateCustomerIdentityRequest) (*UpdateCustomerIdentityResponse, error)
	// UpdateCustomerMobileNumber.
	UpdateCustomerMobileNumber(context.Context, *UpdateCustomerMobileNumberRequest) (*UpdateCustomerMobileNumberResponse, error)
	// UpdateCustomerNumber.
	UpdateCustomerNumber(context.Context, *UpdateCustomerNumberRequest) (*UpdateCustomerNumberResponse, error)
	// UpdateCustomerOtherData.
	UpdateCustomerOtherData(context.Context, *UpdateCustomerOtherDataRequest) (*UpdateCustomerOtherDataResponse, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct{}

func (UnimplementedCustomerServiceServer) AddAddressToCustomer(context.Context, *AddAddressToCustomerRequest) (*AddAddressToCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddressToCustomer not implemented")
}

func (UnimplementedCustomerServiceServer) AddSocialMediaHandle(context.Context, *AddSocialMediaHandleRequest) (*AddSocialMediaHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSocialMediaHandle not implemented")
}

func (UnimplementedCustomerServiceServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}

func (UnimplementedCustomerServiceServer) CreateCreditLimitOrder(context.Context, *CreateCreditLimitOrderRequest) (*CreateCreditLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditLimitOrder not implemented")
}

func (UnimplementedCustomerServiceServer) CreateUserCustomerLink(context.Context, *CreateUserCustomerLinkRequest) (*CreateUserCustomerLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCustomerLink not implemented")
}

func (UnimplementedCustomerServiceServer) DeleteCustomerAddress(context.Context, *DeleteCustomerAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerAddress not implemented")
}

func (UnimplementedCustomerServiceServer) DeleteTaxResidence(context.Context, *DeleteTaxResidenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaxResidence not implemented")
}

func (UnimplementedCustomerServiceServer) GetCRMEvents(context.Context, *GetCRMEventsRequest) (*GetCRMEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCRMEvents not implemented")
}

func (UnimplementedCustomerServiceServer) GetCreditLimitOrderByID(context.Context, *GetCreditLimitOrderByIDRequest) (*GetCreditLimitOrderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditLimitOrderByID not implemented")
}

func (UnimplementedCustomerServiceServer) GetCreditLimitOrder(context.Context, *GetCreditLimitOrderRequest) (*GetCreditLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditLimitOrder not implemented")
}

func (UnimplementedCustomerServiceServer) GetCustomerAddresses(context.Context, *GetCustomerAddressesRequest) (*GetCustomerAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerAddresses not implemented")
}

func (UnimplementedCustomerServiceServer) GetCustomerSocialMediaHandles(context.Context, *GetCustomerSocialMediaHandlesRequest) (*GetCustomerSocialMediaHandlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerSocialMediaHandles not implemented")
}

func (UnimplementedCustomerServiceServer) GetCustomerByCustomerID(context.Context, *GetCustomerByCustomerIDRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByCustomerID not implemented")
}

func (UnimplementedCustomerServiceServer) GetCustomerByCustomerNumber(context.Context, *GetCustomerByCustomerNumberRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByCustomerNumber not implemented")
}

func (UnimplementedCustomerServiceServer) GetCustomersForCurrentUser(context.Context, *GetCustomersForCurrentUserRequest) (*GetCustomersForCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomersForCurrentUser not implemented")
}

func (UnimplementedCustomerServiceServer) GetCustomersForCurrentUserAtBank(context.Context, *GetCustomersForCurrentUserAtBankRequest) (*GetCustomersForCurrentUserAtBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomersForCurrentUserAtBank not implemented")
}

func (UnimplementedCustomerServiceServer) GetFirehoseCustomer(context.Context, *GetFirehoseCustomerRequest) (*GetFirehoseCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirehoseCustomer not implemented")
}

func (UnimplementedCustomerServiceServer) GetTaxResidenceOfCustomer(context.Context, *GetTaxResidenceOfCustomerRequest) (*GetTaxResidenceOfCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaxResidenceOfCustomer not implemented")
}

func (UnimplementedCustomerServiceServer) UpdateCustomerAddress(context.Context, *UpdateCustomerAddressRequest) (*UpdateCustomerAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerAddress not implemented")
}

func (UnimplementedCustomerServiceServer) UpdateCustomerBranch(context.Context, *UpdateCustomerBranchRequest) (*UpdateCustomerBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerBranch not implemented")
}

func (UnimplementedCustomerServiceServer) UpdateCustomerCreditLimit(context.Context, *UpdateCustomerCreditLimitRequest) (*UpdateCustomerCreditLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerCreditLimit not implemented")
}

func (UnimplementedCustomerServiceServer) UpdateCustomerCreditRatingAndSource(context.Context, *UpdateCustomerCreditRatingAndSourceRequest) (*UpdateCustomerCreditRatingAndSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerCreditRatingAndSource not implemented")
}

func (UnimplementedCustomerServiceServer) UpdateCustomerEmail(context.Context, *UpdateCustomerEmailRequest) (*UpdateCustomerEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerEmail not implemented")
}

func (UnimplementedCustomerServiceServer) UpdateCustomerIdentity(context.Context, *UpdateCustomerIdentityRequest) (*UpdateCustomerIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerIdentity not implemented")
}

func (UnimplementedCustomerServiceServer) UpdateCustomerMobileNumber(context.Context, *UpdateCustomerMobileNumberRequest) (*UpdateCustomerMobileNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerMobileNumber not implemented")
}

func (UnimplementedCustomerServiceServer) UpdateCustomerNumber(context.Context, *UpdateCustomerNumberRequest) (*UpdateCustomerNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerNumber not implemented")
}

func (UnimplementedCustomerServiceServer) UpdateCustomerOtherData(context.Context, *UpdateCustomerOtherDataRequest) (*UpdateCustomerOtherDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerOtherData not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_AddAddressToCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressToCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AddAddressToCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/AddAddressToCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AddAddressToCustomer(ctx, req.(*AddAddressToCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_AddSocialMediaHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSocialMediaHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AddSocialMediaHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/AddSocialMediaHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AddSocialMediaHandle(ctx, req.(*AddSocialMediaHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CreateCreditLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreditLimitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateCreditLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CreateCreditLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateCreditLimitOrder(ctx, req.(*CreateCreditLimitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_CreateUserCustomerLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserCustomerLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateUserCustomerLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CreateUserCustomerLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateUserCustomerLink(ctx, req.(*CreateUserCustomerLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteCustomerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteCustomerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/DeleteCustomerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteCustomerAddress(ctx, req.(*DeleteCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteTaxResidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaxResidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteTaxResidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/DeleteTaxResidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteTaxResidence(ctx, req.(*DeleteTaxResidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCRMEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCRMEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCRMEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCRMEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCRMEvents(ctx, req.(*GetCRMEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCreditLimitOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditLimitOrderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCreditLimitOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCreditLimitOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCreditLimitOrderByID(ctx, req.(*GetCreditLimitOrderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCreditLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditLimitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCreditLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCreditLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCreditLimitOrder(ctx, req.(*GetCreditLimitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomerAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerAddresses(ctx, req.(*GetCustomerAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerSocialMediaHandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerSocialMediaHandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerSocialMediaHandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomerSocialMediaHandles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerSocialMediaHandles(ctx, req.(*GetCustomerSocialMediaHandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerByCustomerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerByCustomerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerByCustomerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomerByCustomerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerByCustomerID(ctx, req.(*GetCustomerByCustomerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomerByCustomerNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerByCustomerNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomerByCustomerNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomerByCustomerNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomerByCustomerNumber(ctx, req.(*GetCustomerByCustomerNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomersForCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomersForCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomersForCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomersForCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomersForCurrentUser(ctx, req.(*GetCustomersForCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomersForCurrentUserAtBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomersForCurrentUserAtBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomersForCurrentUserAtBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomersForCurrentUserAtBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomersForCurrentUserAtBank(ctx, req.(*GetCustomersForCurrentUserAtBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetFirehoseCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFirehoseCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetFirehoseCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetFirehoseCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetFirehoseCustomer(ctx, req.(*GetFirehoseCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetTaxResidenceOfCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaxResidenceOfCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetTaxResidenceOfCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetTaxResidenceOfCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetTaxResidenceOfCustomer(ctx, req.(*GetTaxResidenceOfCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomerAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerAddress(ctx, req.(*UpdateCustomerAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomerBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerBranch(ctx, req.(*UpdateCustomerBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerCreditLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerCreditLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerCreditLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomerCreditLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerCreditLimit(ctx, req.(*UpdateCustomerCreditLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerCreditRatingAndSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerCreditRatingAndSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerCreditRatingAndSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomerCreditRatingAndSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerCreditRatingAndSource(ctx, req.(*UpdateCustomerCreditRatingAndSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomerEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerEmail(ctx, req.(*UpdateCustomerEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomerIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerIdentity(ctx, req.(*UpdateCustomerIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerMobileNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerMobileNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerMobileNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomerMobileNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerMobileNumber(ctx, req.(*UpdateCustomerMobileNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomerNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerNumber(ctx, req.(*UpdateCustomerNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomerOtherData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerOtherDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerOtherData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomerOtherData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerOtherData(ctx, req.(*UpdateCustomerOtherDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAddressToCustomer",
			Handler:    _CustomerService_AddAddressToCustomer_Handler,
		},
		{
			MethodName: "AddSocialMediaHandle",
			Handler:    _CustomerService_AddSocialMediaHandle_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerService_CreateCustomer_Handler,
		},
		{
			MethodName: "CreateCreditLimitOrder",
			Handler:    _CustomerService_CreateCreditLimitOrder_Handler,
		},
		{
			MethodName: "CreateUserCustomerLink",
			Handler:    _CustomerService_CreateUserCustomerLink_Handler,
		},
		{
			MethodName: "DeleteCustomerAddress",
			Handler:    _CustomerService_DeleteCustomerAddress_Handler,
		},
		{
			MethodName: "DeleteTaxResidence",
			Handler:    _CustomerService_DeleteTaxResidence_Handler,
		},
		{
			MethodName: "GetCRMEvents",
			Handler:    _CustomerService_GetCRMEvents_Handler,
		},
		{
			MethodName: "GetCreditLimitOrderByID",
			Handler:    _CustomerService_GetCreditLimitOrderByID_Handler,
		},
		{
			MethodName: "GetCreditLimitOrder",
			Handler:    _CustomerService_GetCreditLimitOrder_Handler,
		},
		{
			MethodName: "GetCustomerAddresses",
			Handler:    _CustomerService_GetCustomerAddresses_Handler,
		},
		{
			MethodName: "GetCustomerSocialMediaHandles",
			Handler:    _CustomerService_GetCustomerSocialMediaHandles_Handler,
		},
		{
			MethodName: "GetCustomerByCustomerID",
			Handler:    _CustomerService_GetCustomerByCustomerID_Handler,
		},
		{
			MethodName: "GetCustomerByCustomerNumber",
			Handler:    _CustomerService_GetCustomerByCustomerNumber_Handler,
		},
		{
			MethodName: "GetCustomersForCurrentUser",
			Handler:    _CustomerService_GetCustomersForCurrentUser_Handler,
		},
		{
			MethodName: "GetCustomersForCurrentUserAtBank",
			Handler:    _CustomerService_GetCustomersForCurrentUserAtBank_Handler,
		},
		{
			MethodName: "GetFirehoseCustomer",
			Handler:    _CustomerService_GetFirehoseCustomer_Handler,
		},
		{
			MethodName: "GetTaxResidenceOfCustomer",
			Handler:    _CustomerService_GetTaxResidenceOfCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomerAddress",
			Handler:    _CustomerService_UpdateCustomerAddress_Handler,
		},
		{
			MethodName: "UpdateCustomerBranch",
			Handler:    _CustomerService_UpdateCustomerBranch_Handler,
		},
		{
			MethodName: "UpdateCustomerCreditLimit",
			Handler:    _CustomerService_UpdateCustomerCreditLimit_Handler,
		},
		{
			MethodName: "UpdateCustomerCreditRatingAndSource",
			Handler:    _CustomerService_UpdateCustomerCreditRatingAndSource_Handler,
		},
		{
			MethodName: "UpdateCustomerEmail",
			Handler:    _CustomerService_UpdateCustomerEmail_Handler,
		},
		{
			MethodName: "UpdateCustomerIdentity",
			Handler:    _CustomerService_UpdateCustomerIdentity_Handler,
		},
		{
			MethodName: "UpdateCustomerMobileNumber",
			Handler:    _CustomerService_UpdateCustomerMobileNumber_Handler,
		},
		{
			MethodName: "UpdateCustomerNumber",
			Handler:    _CustomerService_UpdateCustomerNumber_Handler,
		},
		{
			MethodName: "UpdateCustomerOtherData",
			Handler:    _CustomerService_UpdateCustomerOtherData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/customer/all.proto",
}
